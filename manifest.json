{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.10", "generated_at": "2024-07-04T08:31:41.614462Z", "invocation_id": "2c12eeb0-f010-4344-b8f0-af9e353020ee", "env": {}, "project_name": "makeopendata", "project_id": "9637dcfc139c2e5ba2579aedda060e03", "user_id": "d53a29eb-6dbd-4dce-b411-d383ba0bdfa6", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.makeopendata.fake_knn_data": {"database": "defaultdb", "schema": "prep", "name": "fake_knn_data", "resource_type": "model", "package_name": "makeopendata", "path": "prep/simulation/fake_knn_data.sql", "original_file_path": "models/prep/simulation/fake_knn_data.sql", "unique_id": "model.makeopendata.fake_knn_data", "fqn": ["makeopendata", "prep", "simulation", "fake_knn_data"], "alias": "fake_knn_data", "checksum": {"name": "sha256", "checksum": "e5ee06d6deb754c53a6d620a92d220cc9cfa6d76035454f609f33b101dd5de3b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079266.9190142, "relation_name": "\"defaultdb\".\"prep\".\"fake_knn_data\"", "raw_code": "-- Pour tester la fonction knn, nous devons cr\u00e9er une table avec des donn\u00e9es fictives \n-- (impossible de faire des tests unitaires sur des donn\u00e9es qui ne sont pas dans une table). \n-- cr\u00e9e une fausse table avec id, latitude, longitude, et valeur columns\n-- S'assurer que le calcul ne se fait pas sur l'objet de la table\n\n{{ config(materialized='table') }}\n\nWITH fake_knn_table AS (\n    SELECT 1 AS id, 43.7 AS latitude, 3.832 AS longitude, 100 AS valeur UNION ALL -- (3, 2) --> (200 + 300) / 2 = 250\n    SELECT 3,       43.7,             3.830,              200 UNION ALL -- (1, 2) --> (100 + 300) / 2 = 200\n    SELECT 2,       43.7,             3.831,              300 UNION ALL -- (1, 3) --> (100 + 200) / 2 = 150\n    SELECT 4,       43.7,             3.839,              400 UNION ALL -- (6, 1) --> (500 + 100) / 2 = 300\n    SELECT 6,       43.7,             3.838,              500  -- (4, 1) --> (400 + 100) / 2 = 250\n)\n\n\nselect * from fake_knn_table", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/makeopendata/models/prep/simulation/fake_knn_data.sql", "compiled": true, "compiled_code": "-- Pour tester la fonction knn, nous devons cr\u00e9er une table avec des donn\u00e9es fictives \n-- (impossible de faire des tests unitaires sur des donn\u00e9es qui ne sont pas dans une table). \n-- cr\u00e9e une fausse table avec id, latitude, longitude, et valeur columns\n-- S'assurer que le calcul ne se fait pas sur l'objet de la table\n\n\n\nWITH fake_knn_table AS (\n    SELECT 1 AS id, 43.7 AS latitude, 3.832 AS longitude, 100 AS valeur UNION ALL -- (3, 2) --> (200 + 300) / 2 = 250\n    SELECT 3,       43.7,             3.830,              200 UNION ALL -- (1, 2) --> (100 + 300) / 2 = 200\n    SELECT 2,       43.7,             3.831,              300 UNION ALL -- (1, 3) --> (100 + 200) / 2 = 150\n    SELECT 4,       43.7,             3.839,              400 UNION ALL -- (6, 1) --> (500 + 100) / 2 = 300\n    SELECT 6,       43.7,             3.838,              500  -- (4, 1) --> (400 + 100) / 2 = 250\n)\n\n\nselect * from fake_knn_table", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.decoder_demographie": {"database": "defaultdb", "schema": "prep", "name": "decoder_demographie", "resource_type": "model", "package_name": "makeopendata", "path": "prep/demographie/decoder_demographie.sql", "original_file_path": "models/prep/demographie/decoder_demographie.sql", "unique_id": "model.makeopendata.decoder_demographie", "fqn": ["makeopendata", "prep", "demographie", "decoder_demographie"], "alias": "decoder_demographie", "checksum": {"name": "sha256", "checksum": "ea339712b2ad99ef9c36ad509b93526facab278b3172c8c7c1db9f1e074dcc7e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit les r\u00e9ponses concernant la d\u00e9mographie du recenssement des logements, donc 25 millions de logements, avec colonnes et valeurs d\u00e9cod\u00e9es pour une meilleur lisibilit\u00e9 (au prix de taille). Utile pour trouver des corr\u00e9lations \u00e0 l'\u00e9chelle des m\u00e9nages", "columns": {"poids_du_logement": {"name": "poids_du_logement", "description": "Variable cod\u00e9e IPONDL et d\u00e9crite comme Poids du logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_commune_insee": {"name": "code_commune_insee", "description": "Variable cod\u00e9e COMMUNE et d\u00e9crite comme D\u00e9partement et commune du lieu de r\u00e9sidence dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region_residence": {"name": "region_residence", "description": "Variable cod\u00e9e REGION et d\u00e9crite comme R\u00e9gion du lieu de r\u00e9sidence dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage": {"name": "age_regroupe_pr_menage", "description": "Variable cod\u00e9e AGEMEN8 et d\u00e9crite comme \u00c2ge regroup\u00e9 de la personne de r\u00e9f\u00e9rence du m\u00e9nage en 8 lasses d'\u00e2ge dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "diplome_pr": {"name": "diplome_pr", "description": "Variable cod\u00e9e DIPLM et d\u00e9crite comme Dipl\u00f4me le plus \u00e9lev\u00e9 obtenu (personne de r\u00e9f\u00e9rence dum\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage": {"name": "personnes_actives_menage", "description": "Variable cod\u00e9e INPAM et d\u00e9crite comme Nombre de personnes actives du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_menage": {"name": "personnes_menage", "description": "Variable cod\u00e9e INPER et d\u00e9crite comme Nombre de personnes du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage": {"name": "personnes_masculin_menage", "description": "Variable cod\u00e9e INPER1 et d\u00e9crite comme Nombre de personnes du m\u00e9nage, de sexe masculin dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage": {"name": "personnes_feminin_menage", "description": "Variable cod\u00e9e INPER2 et d\u00e9crite comme Nombre de personnes du m\u00e9nage, de sexe f\u00e9minin dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage": {"name": "personnes_actives_ayant_emploi_menage", "description": "Variable cod\u00e9e INPOM et d\u00e9crite comme Nombre de personnes actives ayant un emploi du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage": {"name": "personnes_scolarisees_menage", "description": "Variable cod\u00e9e INPSM et d\u00e9crite comme Nombre de personnes scolaris\u00e9es du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr": {"name": "condition_empoi_pr", "description": "Variable cod\u00e9e EMPLM et d\u00e9crite comme Condition d'emploi (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr": {"name": "lieu_etudes_pr", "description": "Variable cod\u00e9e ILETUDM et d\u00e9crite comme Indicateur du lieu d'\u00e9tudes (personne de r\u00e9f\u00e9rence du m\u00e9age) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr": {"name": "lieu_travail_pr", "description": "Variable cod\u00e9e ILTM et d\u00e9crite comme Indicateur de lieu de travail (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "situation_immigration_pr": {"name": "situation_immigration_pr", "description": "Variable cod\u00e9e IMMIM et d\u00e9crite comme Situation quant \u00e0 l'immigration (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr": {"name": "lieu_naissance_pr", "description": "Variable cod\u00e9e INAIM et d\u00e9crite comme Indicateur du lieu de naissance (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage": {"name": "personnes_scolarise_plus_14_menage", "description": "Variable cod\u00e9e INEEM et d\u00e9crite comme Nombre d'\u00e9l\u00e8ves, \u00e9tudiants ou stagiaires \u00e2g\u00e9s de 14 an ou plus dans le m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage": {"name": "personnes_moins_11_ans_menage", "description": "Variable cod\u00e9e INP11M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 11 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage": {"name": "personnes_moins_15_ans_menage", "description": "Variable cod\u00e9e INP15M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 15 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage": {"name": "personnes_moins_17_ans_menage", "description": "Variable cod\u00e9e INP17M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 17 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage": {"name": "personnes_moins_19_ans_menage", "description": "Variable cod\u00e9e INP19M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 19 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage": {"name": "personnes_moins_24_ans_menage", "description": "Variable cod\u00e9e INP24M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 24 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage": {"name": "personnes_moins_3_ans_menage", "description": "Variable cod\u00e9e INP3M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 3 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage": {"name": "personnes_moins_5_ans_menage", "description": "Variable cod\u00e9e INP5M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 5 ans ou moins du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage": {"name": "personnes_plus_60_ans_menage", "description": "Variable cod\u00e9e INP60M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 60 ans ou plus du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage": {"name": "personnes_plus_65_ans_menage", "description": "Variable cod\u00e9e INP65M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 65 ans ou plus du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage": {"name": "personnes_plus_75_ans_menage", "description": "Variable cod\u00e9e INP75M et d\u00e9crite comme Nombre de personnes \u00e2g\u00e9es de 75 ans ou plus du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr": {"name": "residence_annee_avant_pr", "description": "Variable cod\u00e9e IRANM et d\u00e9crite comme Indicateur du lieu de r\u00e9sidence ant\u00e9rieure au 1er janver de l'ann\u00e9e pr\u00e9c\u00e9dente de la personne de r\u00e9f\u00e9rence du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "type_activite_pr": {"name": "type_activite_pr", "description": "Variable cod\u00e9e TACTM et d\u00e9crite comme Type d'activit\u00e9 de la personne de r\u00e9f\u00e9rence du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "temps_travail_pr": {"name": "temps_travail_pr", "description": "Variable cod\u00e9e TPM et d\u00e9crite comme Temps de travail (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage": {"name": "nombre_voitures_menage", "description": "Variable cod\u00e9e VOIT et d\u00e9crite comme Nombre de voitures du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr": {"name": "mode_transport_plus_utilise_travail_pr", "description": "Variable cod\u00e9e TRANSM et d\u00e9crite comme Mode de transport principal le plus souvent utilis\u00e9 pou aller travailler (personne de r\u00e9f\u00e9rence du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "sexe_pr": {"name": "sexe_pr", "description": "Variable cod\u00e9e SEXEM et d\u00e9crite comme Sexe de la personne de r\u00e9f\u00e9rence du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr": {"name": "status_conjugal_pr", "description": "Variable cod\u00e9e STAT_CONJM et d\u00e9crite comme Statut conjugal de la personne de r\u00e9f\u00e9rence du m\u00e9nage dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr": {"name": "anciennete_recherche_emploi_pr", "description": "Variable cod\u00e9e RECHM et d\u00e9crite comme Anciennet\u00e9 de recherche d'emploi (personne de r\u00e9f\u00e9renc du m\u00e9nage) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Variable cod\u00e9e STOCD et d\u00e9crite comme Statut d'occupation d\u00e9taill\u00e9 du logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/demographie/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1720079267.5571787, "relation_name": "\"defaultdb\".\"prep\".\"decoder_demographie\"", "raw_code": "{{ config(materialized='view') }}\n\nWITH logement AS (\n    select * from {{ source('sources', 'logement_2020')}}\n),\ndecode_logement AS (\n    {{ renommer_colonnes_valeurs_logement(logement, 'logement_2020_demographie_codes') }}\n)\n\nSELECT \n    *\nFROM \n    decode_logement", "language": "sql", "refs": [{"name": "logement_2020_demographie_codes", "package": null, "version": null}], "sources": [["sources", "logement_2020"], ["meta", "logement_2020_variables"]], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.renommer_colonnes_valeurs_logement"], "nodes": ["source.makeopendata.sources.logement_2020", "source.makeopendata.meta.logement_2020_variables", "seed.makeopendata.logement_2020_demographie_codes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/demographie/decoder_demographie.sql", "compiled": true, "compiled_code": "\n\nWITH logement AS (\n    select * from \"defaultdb\".\"sources\".\"logement_2020\"\n),\ndecode_logement AS (\n    \n  \n  \n\n  \n\n  \n\n  \n\n  SELECT\n    \n      \n      \n      \n      \n            \n      \n        \"INP65M\" as \"personnes_plus_65_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP24M\" as \"personnes_moins_24_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"TPM\"\n          \n            WHEN '1' THEN 'temps_complet'\n          \n            WHEN '2' THEN 'temps_partiel'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'sans_objet_sans_emploi'\n          \n        END as \"temps_travail_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"TACTM\"\n          \n            WHEN '11' THEN 'actifs_ayant_emploi'\n          \n            WHEN '12' THEN 'chomeurs'\n          \n            WHEN '21' THEN 'retraites_ou_preretraites'\n          \n            WHEN '22' THEN 'eleves'\n          \n            WHEN '24' THEN 'femmes_ou_hommes_au_foyer'\n          \n            WHEN '25' THEN 'autres_inactifs'\n          \n            WHEN 'YY' THEN 'hors_residence_principale'\n          \n        END as \"type_activite_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"DIPLM\"\n          \n            WHEN '01' THEN 'pas_scolarite_ou_arret_avant_fin_primaire'\n          \n            WHEN '02' THEN 'aucdiplome_et_scolarite_interrompue_a_fin_primaire_ou_avant_fin_college'\n          \n            WHEN '03' THEN 'aucdiplome_et_scolarite_jusqu_a_fin_college_ou_au_dela'\n          \n            WHEN '11' THEN 'cep_certificat_d_etudes_primaires'\n          \n            WHEN '12' THEN 'bepc_brevet_elementaire_brevet_des_colleges_dnb'\n          \n            WHEN '13' THEN 'cap_bep_ou_diplome_niveau_equivalent'\n          \n            WHEN '14' THEN 'baccalaureat_general_ou_technologique_brevet_superieur_capacite_en_droit_daeu_eseu'\n          \n            WHEN '15' THEN 'baccalaureat_professionnel_brevet_professionnel_technicien_ou_d_enseignement_diplome_equivalent'\n          \n            WHEN '16' THEN 'bts_dut_deug_deust_diplome_sante_ou_social_niveau_bac+2_diplome_equivalent'\n          \n            WHEN '17' THEN 'licence_licence_pro_maitrise_diplome_equivalent_niveau_bac+3_ou_bac+4'\n          \n            WHEN '18' THEN 'master_dea_dess_diplome_granecole_niveau_bac+5_doctorat_sante'\n          \n            WHEN '19' THEN 'doctorat_recherche_hors_sante'\n          \n            WHEN 'YY' THEN 'hors_residence_principale'\n          \n        END as \"diplome_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"INAIM\"\n          \n            WHEN '1' THEN 'dans_le_departement_residence_actuelle'\n          \n            WHEN '2' THEN 'dans_autre_departement_region_residence_actuelle'\n          \n            WHEN '3' THEN 'hors_region_residence_actuelle_en_metropole'\n          \n            WHEN '4' THEN 'hors_region_residence_actuelle_dom'\n          \n            WHEN '5' THEN 'hors_region_residence_actuelle_tom_com'\n          \n            WHEN '6' THEN 'a_l_etranger'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"lieu_naissance_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"SEXEM\"\n          \n            WHEN '1' THEN 'hommes'\n          \n            WHEN '2' THEN 'femmes'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"sexe_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPER2\" as \"personnes_feminin_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP19M\" as \"personnes_moins_19_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"EMPLM\"\n          \n            WHEN '11' THEN 'en_contrat_d_apprentissage_ou_professionnalisation'\n          \n            WHEN '12' THEN 'places_par_agence_d_interim'\n          \n            WHEN '13' THEN 'emplois_aides_contrat_unique_d_insertion'\n          \n            WHEN '14' THEN 'stagiaires_remuneres_en_entreprise'\n          \n            WHEN '15' THEN 'autres_emplois_a_duree_limitee'\n          \n            WHEN '16' THEN 'emplois_sans_limite_duree'\n          \n            WHEN '21' THEN 'non_salaries_independants'\n          \n            WHEN '22' THEN 'non_salaries_employeurs'\n          \n            WHEN '23' THEN 'non_salaries_aides_familiaux'\n          \n            WHEN 'YY' THEN 'hors_residence_principale'\n          \n            WHEN 'ZZ' THEN 'sans_objet_sans_emploi'\n          \n        END as \"condition_empoi_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"RECHM\"\n          \n            WHEN '0' THEN 'ne_recherche_pas_d_emploi'\n          \n            WHEN '1' THEN 'cherche_emploi_depuis_moins_an'\n          \n            WHEN '2' THEN 'cherche_emploi_depuis_plus_an'\n          \n            WHEN '9' THEN 'non_declare_inactif'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'sans_objet_en_emploi'\n          \n        END as \"anciennete_recherche_emploi_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"TRANSM\"\n          \n            WHEN '1' THEN 'pas_transport'\n          \n            WHEN '2' THEN 'marche_a_pied_ou_rollers_patinette'\n          \n            WHEN '3' THEN 'velo_y_compris_a_assistance_electrique'\n          \n            WHEN '4' THEN 'deux_roues_motorise'\n          \n            WHEN '5' THEN 'voiture_camion_fourgonnette'\n          \n            WHEN '6' THEN 'transports_en_commun'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'sans_objet'\n          \n        END as \"mode_transport_plus_utilise_travail_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"IPONDL\" as \"poids_du_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPER1\" as \"personnes_masculin_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"STAT_CONJM\"\n          \n            WHEN '1' THEN 'marie_e'\n          \n            WHEN '2' THEN 'pacse_e'\n          \n            WHEN '3' THEN 'en_concubinage_ou_union_libre'\n          \n            WHEN '4' THEN 'veuf_veuve'\n          \n            WHEN '5' THEN 'divorce_e'\n          \n            WHEN '6' THEN 'celibataire'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"status_conjugal_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP60M\" as \"personnes_plus_60_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP75M\" as \"personnes_plus_75_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ILETUDM\"\n          \n            WHEN '1' THEN 'dans_commresidence_actuelle'\n          \n            WHEN '2' THEN 'dans_autre_commdepartement_residence'\n          \n            WHEN '3' THEN 'dans_autre_departement_region_residence'\n          \n            WHEN '4' THEN 'hors_region_residence_actuelle_en_metropole'\n          \n            WHEN '5' THEN 'hors_region_residence_actuelle_dom'\n          \n            WHEN '6' THEN 'hors_region_residence_actuelle_com'\n          \n            WHEN '7' THEN 'a_l_etranger'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'sans_objet_pas_d_inscription_etablissement_d_enseignement'\n          \n        END as \"lieu_etudes_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPER\" as \"personnes_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"VOIT\"\n          \n            WHEN '0' THEN 'aucvoiture'\n          \n            WHEN '1' THEN 'une_seule_voiture'\n          \n            WHEN '2' THEN 'deux_voitures'\n          \n            WHEN '3' THEN 'trois_voitures_ou_plus'\n          \n            WHEN 'X' THEN 'logement_ordinaire_inoccupe'\n          \n        END as \"nombre_voitures_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"COMMUNE\" as \"code_commune_insee\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPAM\" as \"personnes_actives_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"STOCD\"\n          \n            WHEN '00' THEN 'logement_ordinaire_inoccupe'\n          \n            WHEN '10' THEN 'proprietaire'\n          \n            WHEN '21' THEN 'locataire_ou_sous_locataire_logement_loue_vinon_hlm'\n          \n            WHEN '22' THEN 'locataire_ou_sous_locataire_logement_loue_vihlm'\n          \n            WHEN '23' THEN 'locataire_ou_sous_locataire_logement_loue_meuble_ou_d_chambre_d_hotel'\n          \n            WHEN '30' THEN 'loge_gratuitement'\n          \n        END as \"status\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"IMMIM\"\n          \n            WHEN '1' THEN 'immigres'\n          \n            WHEN '2' THEN 'non_immigres'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"situation_immigration_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"AGEMEN8\"\n          \n            WHEN '00' THEN 'moins_15_ans'\n          \n            WHEN '15' THEN '15_a_19_ans'\n          \n            WHEN '20' THEN '20_a_24_ans'\n          \n            WHEN '25' THEN '25_a_39_ans'\n          \n            WHEN '40' THEN '40_a_54_ans'\n          \n            WHEN '55' THEN '55_a_64_ans'\n          \n            WHEN '65' THEN '65_a_79_ans'\n          \n            WHEN '80' THEN '80_ans_ou_plus'\n          \n            WHEN 'YY' THEN 'hors_residence_principale'\n          \n        END as \"age_regroupe_pr_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP3M\" as \"personnes_moins_3_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"REGION\"\n          \n            WHEN '01' THEN 'guadeloupe'\n          \n            WHEN '02' THEN 'martinique'\n          \n            WHEN '03' THEN 'guyane'\n          \n            WHEN '04' THEN 'la_reunion'\n          \n            WHEN '11' THEN 'ile_france'\n          \n            WHEN '24' THEN 'centre_val_loire'\n          \n            WHEN '27' THEN 'bourgogne_franche_comte'\n          \n            WHEN '28' THEN 'normandie'\n          \n            WHEN '32' THEN 'hauts_france'\n          \n            WHEN '44' THEN 'grand_est'\n          \n            WHEN '52' THEN 'pays_loire'\n          \n            WHEN '53' THEN 'bretagne'\n          \n            WHEN '75' THEN 'nouvelle_aquitaine'\n          \n            WHEN '76' THEN 'occitanie'\n          \n            WHEN '84' THEN 'auvergne_rhone_alpes'\n          \n            WHEN '93' THEN 'provence_alpes_cote_d_azur'\n          \n            WHEN '94' THEN 'corse'\n          \n        END as \"region_residence\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INEEM\" as \"personnes_scolarise_plus_14_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP17M\" as \"personnes_moins_17_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP5M\" as \"personnes_moins_5_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP15M\" as \"personnes_moins_15_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INP11M\" as \"personnes_moins_11_ans_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPOM\" as \"personnes_actives_ayant_emploi_menage\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ILTM\"\n          \n            WHEN '1' THEN 'dans_commresidence_actuelle'\n          \n            WHEN '2' THEN 'dans_autre_commdepartement_residence'\n          \n            WHEN '3' THEN 'dans_autre_departement_region_residence'\n          \n            WHEN '4' THEN 'hors_region_residence_actuelle_en_metropole'\n          \n            WHEN '5' THEN 'hors_region_residence_actuelle_dom'\n          \n            WHEN '6' THEN 'hors_region_residence_actuelle_com'\n          \n            WHEN '7' THEN 'a_l_etranger'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'sans_objet_sans_emploi'\n          \n        END as \"lieu_travail_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"IRANM\"\n          \n            WHEN '1' THEN 'dans_le_meme_logement'\n          \n            WHEN '2' THEN 'dans_autre_logement_meme_commune'\n          \n            WHEN '3' THEN 'dans_autre_commdepartement'\n          \n            WHEN '4' THEN 'dans_autre_departement_region'\n          \n            WHEN '5' THEN 'hors_region_residence_actuelle_en_metropole'\n          \n            WHEN '6' THEN 'hors_region_residence_actuelle_dom'\n          \n            WHEN '7' THEN 'hors_region_residence_actuelle_tom_com'\n          \n            WHEN '8' THEN 'a_l_etranger_l_union_europeenne_28_pays_membres'\n          \n            WHEN '9' THEN 'a_l_etranger_hors_union_europeenne'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"residence_annee_avant_pr\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"INPSM\" as \"personnes_scolarisees_menage\"\n      \n      \n      \n      \n    \n  FROM logement\n\n)\n\nSELECT \n    *\nFROM \n    decode_logement", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.aggreger_demographie_communes": {"database": "defaultdb", "schema": "prep", "name": "aggreger_demographie_communes", "resource_type": "model", "package_name": "makeopendata", "path": "prep/demographie/aggreger_demographie_communes.sql", "original_file_path": "models/prep/demographie/aggreger_demographie_communes.sql", "unique_id": "model.makeopendata.aggreger_demographie_communes", "fqn": ["makeopendata", "prep", "demographie", "aggreger_demographie_communes"], "alias": "aggreger_demographie_communes", "checksum": {"name": "sha256", "checksum": "79ada126e34bf57e4e3f3512e7976cc34b3f5e924746715e43d75087ab10556a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit une tables avec les informations d\u00e9mographiques agr\u00e9g\u00e9es par commune", "columns": {"code_commune_insee": {"name": "code_commune_insee", "description": "code commune. Cl\u00e9 primaire de la table", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__0": {"name": "personnes_moins_3_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__1": {"name": "personnes_moins_3_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__2": {"name": "personnes_moins_3_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__3": {"name": "personnes_moins_3_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__4": {"name": "personnes_moins_3_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__5": {"name": "personnes_moins_3_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__6": {"name": "personnes_moins_3_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__7": {"name": "personnes_moins_3_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__8": {"name": "personnes_moins_3_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_3_ans_menage__Y": {"name": "personnes_moins_3_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_3_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__0": {"name": "personnes_moins_11_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__1": {"name": "personnes_moins_11_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__10": {"name": "personnes_moins_11_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__11": {"name": "personnes_moins_11_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__12": {"name": "personnes_moins_11_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__13": {"name": "personnes_moins_11_ans_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__14": {"name": "personnes_moins_11_ans_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__2": {"name": "personnes_moins_11_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__3": {"name": "personnes_moins_11_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__4": {"name": "personnes_moins_11_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__5": {"name": "personnes_moins_11_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__6": {"name": "personnes_moins_11_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__7": {"name": "personnes_moins_11_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__8": {"name": "personnes_moins_11_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__9": {"name": "personnes_moins_11_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_11_ans_menage__Y": {"name": "personnes_moins_11_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_11_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__a_l_etranger_hors_union_europeenne": {"name": "residence_annee_avant_pr__a_l_etranger_hors_union_europeenne", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 a_l_etranger_\"hors_union_europeenne\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__a_l_etranger_l_union_europeenne_28_pa": {"name": "residence_annee_avant_pr__a_l_etranger_l_union_europeenne_28_pa", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 a_l_etranger_\"l_union_europeenne_28_pa\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__dans_autre_commdepartement": {"name": "residence_annee_avant_pr__dans_autre_commdepartement", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 dans_autre_co\"mmdepartement\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__dans_autre_departement_region": {"name": "residence_annee_avant_pr__dans_autre_departement_region", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 dans_autre_de\"partement_region\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__dans_autre_logement_meme_commune": {"name": "residence_annee_avant_pr__dans_autre_logement_meme_commune", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 dans_autre_lo\"gement_meme_commune\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__dans_le_meme_logement": {"name": "residence_annee_avant_pr__dans_le_meme_logement", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 dans_le_meme_\"logement\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__hors_region_residence_actuelle_dom": {"name": "residence_annee_avant_pr__hors_region_residence_actuelle_dom", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_dom\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__hors_region_residence_actuelle_en_met": {"name": "residence_annee_avant_pr__hors_region_residence_actuelle_en_met", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_en_met\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__hors_region_residence_actuelle_tom_co": {"name": "residence_annee_avant_pr__hors_region_residence_actuelle_tom_co", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_tom_co\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_annee_avant_pr__hors_residence_principale": {"name": "residence_annee_avant_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique residence_annee_avant_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__celibataire": {"name": "status_conjugal_pr__celibataire", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 celibataire", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__divorce_e": {"name": "status_conjugal_pr__divorce_e", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 divorce_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__en_concubinage_ou_union_libre": {"name": "status_conjugal_pr__en_concubinage_ou_union_libre", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 en_concubinag\"e_ou_union_libre\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__hors_residence_principale": {"name": "status_conjugal_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__marie_e": {"name": "status_conjugal_pr__marie_e", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 marie_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__pacse_e": {"name": "status_conjugal_pr__pacse_e", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 pacse_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status_conjugal_pr__veuf_veuve": {"name": "status_conjugal_pr__veuf_veuve", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status_conjugal_pr \u00e9gale \u00e0 veuf_veuve", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "sexe_pr__femmes": {"name": "sexe_pr__femmes", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique sexe_pr \u00e9gale \u00e0 femmes", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "sexe_pr__hommes": {"name": "sexe_pr__hommes", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique sexe_pr \u00e9gale \u00e0 hommes", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "sexe_pr__hors_residence_principale": {"name": "sexe_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique sexe_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage__aucvoiture": {"name": "nombre_voitures_menage__aucvoiture", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique nombre_voitures_menage \u00e9gale \u00e0 aucvoiture", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage__deux_voitures": {"name": "nombre_voitures_menage__deux_voitures", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique nombre_voitures_menage \u00e9gale \u00e0 deux_voitures", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage__logement_ordinaire_inoccupe": {"name": "nombre_voitures_menage__logement_ordinaire_inoccupe", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique nombre_voitures_menage \u00e9gale \u00e0 logement_ordi\"naire_inoccupe\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage__trois_voitures_ou_plus": {"name": "nombre_voitures_menage__trois_voitures_ou_plus", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique nombre_voitures_menage \u00e9gale \u00e0 trois_voiture\"s_ou_plus\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_voitures_menage__une_seule_voiture": {"name": "nombre_voitures_menage__une_seule_voiture", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique nombre_voitures_menage \u00e9gale \u00e0 une_seule_voiture", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__0": {"name": "personnes_moins_17_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__1": {"name": "personnes_moins_17_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__10": {"name": "personnes_moins_17_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__11": {"name": "personnes_moins_17_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__12": {"name": "personnes_moins_17_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__13": {"name": "personnes_moins_17_ans_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__14": {"name": "personnes_moins_17_ans_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__15": {"name": "personnes_moins_17_ans_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__16": {"name": "personnes_moins_17_ans_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__17": {"name": "personnes_moins_17_ans_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__2": {"name": "personnes_moins_17_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__24": {"name": "personnes_moins_17_ans_menage__24", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 24", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__3": {"name": "personnes_moins_17_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__4": {"name": "personnes_moins_17_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__5": {"name": "personnes_moins_17_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__6": {"name": "personnes_moins_17_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__7": {"name": "personnes_moins_17_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__8": {"name": "personnes_moins_17_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__9": {"name": "personnes_moins_17_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_17_ans_menage__Y": {"name": "personnes_moins_17_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_17_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__0": {"name": "personnes_actives_ayant_emploi_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__1": {"name": "personnes_actives_ayant_emploi_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__10": {"name": "personnes_actives_ayant_emploi_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__11": {"name": "personnes_actives_ayant_emploi_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__12": {"name": "personnes_actives_ayant_emploi_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__13": {"name": "personnes_actives_ayant_emploi_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__14": {"name": "personnes_actives_ayant_emploi_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__15": {"name": "personnes_actives_ayant_emploi_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__16": {"name": "personnes_actives_ayant_emploi_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__17": {"name": "personnes_actives_ayant_emploi_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__18": {"name": "personnes_actives_ayant_emploi_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__19": {"name": "personnes_actives_ayant_emploi_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__2": {"name": "personnes_actives_ayant_emploi_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__20": {"name": "personnes_actives_ayant_emploi_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__26": {"name": "personnes_actives_ayant_emploi_menage__26", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 26", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__3": {"name": "personnes_actives_ayant_emploi_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__4": {"name": "personnes_actives_ayant_emploi_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__41": {"name": "personnes_actives_ayant_emploi_menage__41", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 41", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__5": {"name": "personnes_actives_ayant_emploi_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__6": {"name": "personnes_actives_ayant_emploi_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__7": {"name": "personnes_actives_ayant_emploi_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__8": {"name": "personnes_actives_ayant_emploi_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__9": {"name": "personnes_actives_ayant_emploi_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_ayant_emploi_menage__Y": {"name": "personnes_actives_ayant_emploi_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_ayant_emploi_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__cherche_emploi_depuis_moins_an": {"name": "anciennete_recherche_emploi_pr__cherche_emploi_depuis_moins_an", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 cherche_emplo\"i_depuis_moins_an\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__cherche_emploi_depuis_plus_an": {"name": "anciennete_recherche_emploi_pr__cherche_emploi_depuis_plus_an", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 cherche_emplo\"i_depuis_plus_an\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__hors_residence_principale": {"name": "anciennete_recherche_emploi_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__ne_recherche_pas_d_emploi": {"name": "anciennete_recherche_emploi_pr__ne_recherche_pas_d_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 ne_recherche_\"pas_d_emploi\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__non_declare_inactif": {"name": "anciennete_recherche_emploi_pr__non_declare_inactif", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 non_declare_i\"nactif\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "anciennete_recherche_emploi_pr__sans_objet_en_emploi": {"name": "anciennete_recherche_emploi_pr__sans_objet_en_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique anciennete_recherche_emploi_pr \u00e9gale \u00e0 sans_objet_en\"_emploi\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__0": {"name": "personnes_masculin_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__1": {"name": "personnes_masculin_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__10": {"name": "personnes_masculin_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__11": {"name": "personnes_masculin_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__12": {"name": "personnes_masculin_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__13": {"name": "personnes_masculin_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__14": {"name": "personnes_masculin_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__15": {"name": "personnes_masculin_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__16": {"name": "personnes_masculin_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__17": {"name": "personnes_masculin_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__18": {"name": "personnes_masculin_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__19": {"name": "personnes_masculin_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__2": {"name": "personnes_masculin_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__20": {"name": "personnes_masculin_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__22": {"name": "personnes_masculin_menage__22", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 22", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__26": {"name": "personnes_masculin_menage__26", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 26", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__3": {"name": "personnes_masculin_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__38": {"name": "personnes_masculin_menage__38", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 38", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__4": {"name": "personnes_masculin_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__5": {"name": "personnes_masculin_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__6": {"name": "personnes_masculin_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__7": {"name": "personnes_masculin_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__8": {"name": "personnes_masculin_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__9": {"name": "personnes_masculin_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_masculin_menage__Y": {"name": "personnes_masculin_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_masculin_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__0": {"name": "personnes_moins_24_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__1": {"name": "personnes_moins_24_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__10": {"name": "personnes_moins_24_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__11": {"name": "personnes_moins_24_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__12": {"name": "personnes_moins_24_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__13": {"name": "personnes_moins_24_ans_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__14": {"name": "personnes_moins_24_ans_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__15": {"name": "personnes_moins_24_ans_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__16": {"name": "personnes_moins_24_ans_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__17": {"name": "personnes_moins_24_ans_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__18": {"name": "personnes_moins_24_ans_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__19": {"name": "personnes_moins_24_ans_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__2": {"name": "personnes_moins_24_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__20": {"name": "personnes_moins_24_ans_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__21": {"name": "personnes_moins_24_ans_menage__21", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 21", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__25": {"name": "personnes_moins_24_ans_menage__25", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 25", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__3": {"name": "personnes_moins_24_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__4": {"name": "personnes_moins_24_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__5": {"name": "personnes_moins_24_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__6": {"name": "personnes_moins_24_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__7": {"name": "personnes_moins_24_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__8": {"name": "personnes_moins_24_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__9": {"name": "personnes_moins_24_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_24_ans_menage__Y": {"name": "personnes_moins_24_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_24_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__0": {"name": "personnes_scolarisees_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__1": {"name": "personnes_scolarisees_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__10": {"name": "personnes_scolarisees_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__11": {"name": "personnes_scolarisees_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__12": {"name": "personnes_scolarisees_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__13": {"name": "personnes_scolarisees_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__14": {"name": "personnes_scolarisees_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__15": {"name": "personnes_scolarisees_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__16": {"name": "personnes_scolarisees_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__2": {"name": "personnes_scolarisees_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__25": {"name": "personnes_scolarisees_menage__25", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 25", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__3": {"name": "personnes_scolarisees_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__4": {"name": "personnes_scolarisees_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__5": {"name": "personnes_scolarisees_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__6": {"name": "personnes_scolarisees_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__7": {"name": "personnes_scolarisees_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__8": {"name": "personnes_scolarisees_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__9": {"name": "personnes_scolarisees_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarisees_menage__Y": {"name": "personnes_scolarisees_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarisees_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__locataire_ou_sous_locataire_logement_loue_meuble_ou_d_c": {"name": "status__locataire_ou_sous_locataire_logement_loue_meuble_ou_d_c", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 locataire_ou_\"sous_locataire_logement_loue_meuble_ou_d_c\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__locataire_ou_sous_locataire_logement_loue_vihlm": {"name": "status__locataire_ou_sous_locataire_logement_loue_vihlm", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 locataire_ou_\"sous_locataire_logement_loue_vihlm\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__locataire_ou_sous_locataire_logement_loue_vinon_hlm": {"name": "status__locataire_ou_sous_locataire_logement_loue_vinon_hlm", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 locataire_ou_\"sous_locataire_logement_loue_vinon_hlm\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__loge_gratuitement": {"name": "status__loge_gratuitement", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 loge_gratuitement", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__logement_ordinaire_inoccupe": {"name": "status__logement_ordinaire_inoccupe", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 logement_ordinaire_inoccupe", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "status__proprietaire": {"name": "status__proprietaire", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique status \u00e9gale \u00e0 proprietaire", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__0": {"name": "personnes_plus_75_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__1": {"name": "personnes_plus_75_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__11": {"name": "personnes_plus_75_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__18": {"name": "personnes_plus_75_ans_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__2": {"name": "personnes_plus_75_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__3": {"name": "personnes_plus_75_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__4": {"name": "personnes_plus_75_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__48": {"name": "personnes_plus_75_ans_menage__48", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 48", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__5": {"name": "personnes_plus_75_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__6": {"name": "personnes_plus_75_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__7": {"name": "personnes_plus_75_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__8": {"name": "personnes_plus_75_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__9": {"name": "personnes_plus_75_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_75_ans_menage__Y": {"name": "personnes_plus_75_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_75_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__0": {"name": "personnes_plus_60_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__1": {"name": "personnes_plus_60_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__10": {"name": "personnes_plus_60_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__11": {"name": "personnes_plus_60_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__12": {"name": "personnes_plus_60_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__17": {"name": "personnes_plus_60_ans_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__19": {"name": "personnes_plus_60_ans_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__2": {"name": "personnes_plus_60_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__3": {"name": "personnes_plus_60_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__4": {"name": "personnes_plus_60_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__5": {"name": "personnes_plus_60_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__55": {"name": "personnes_plus_60_ans_menage__55", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 55", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__6": {"name": "personnes_plus_60_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__7": {"name": "personnes_plus_60_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__8": {"name": "personnes_plus_60_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_60_ans_menage__Y": {"name": "personnes_plus_60_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_60_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__0": {"name": "personnes_moins_19_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__1": {"name": "personnes_moins_19_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__10": {"name": "personnes_moins_19_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__11": {"name": "personnes_moins_19_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__12": {"name": "personnes_moins_19_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__13": {"name": "personnes_moins_19_ans_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__14": {"name": "personnes_moins_19_ans_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__15": {"name": "personnes_moins_19_ans_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__16": {"name": "personnes_moins_19_ans_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__17": {"name": "personnes_moins_19_ans_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__18": {"name": "personnes_moins_19_ans_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__19": {"name": "personnes_moins_19_ans_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__2": {"name": "personnes_moins_19_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__20": {"name": "personnes_moins_19_ans_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__21": {"name": "personnes_moins_19_ans_menage__21", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 21", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__22": {"name": "personnes_moins_19_ans_menage__22", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 22", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__23": {"name": "personnes_moins_19_ans_menage__23", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 23", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__25": {"name": "personnes_moins_19_ans_menage__25", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 25", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__3": {"name": "personnes_moins_19_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__4": {"name": "personnes_moins_19_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__41": {"name": "personnes_moins_19_ans_menage__41", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 41", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__5": {"name": "personnes_moins_19_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__55": {"name": "personnes_moins_19_ans_menage__55", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 55", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__6": {"name": "personnes_moins_19_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__7": {"name": "personnes_moins_19_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__8": {"name": "personnes_moins_19_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__9": {"name": "personnes_moins_19_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_19_ans_menage__Y": {"name": "personnes_moins_19_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_19_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__autres_emplois_a_duree_limitee": {"name": "condition_empoi_pr__autres_emplois_a_duree_limitee", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 autres_emploi\"s_a_duree_limitee\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__emplois_aides_contrat_unique_d_insertion": {"name": "condition_empoi_pr__emplois_aides_contrat_unique_d_insertion", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 emplois_aides\"_contrat_unique_d_insertion\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__emplois_sans_limite_duree": {"name": "condition_empoi_pr__emplois_sans_limite_duree", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 emplois_sans_\"limite_duree\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__en_contrat_d_apprentissage_ou_professionnal": {"name": "condition_empoi_pr__en_contrat_d_apprentissage_ou_professionnal", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 en_contrat_d_\"apprentissage_ou_professionnal\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__hors_residence_principale": {"name": "condition_empoi_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__non_salaries_aides_familiaux": {"name": "condition_empoi_pr__non_salaries_aides_familiaux", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 non_salaries_\"aides_familiaux\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__non_salaries_employeurs": {"name": "condition_empoi_pr__non_salaries_employeurs", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 non_salaries_employeurs", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__non_salaries_independants": {"name": "condition_empoi_pr__non_salaries_independants", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 non_salaries_\"independants\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__places_par_agence_d_interim": {"name": "condition_empoi_pr__places_par_agence_d_interim", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 places_par_ag\"ence_d_interim\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__sans_objet_sans_emploi": {"name": "condition_empoi_pr__sans_objet_sans_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 sans_objet_sans_emploi", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "condition_empoi_pr__stagiaires_remuneres_en_entreprise": {"name": "condition_empoi_pr__stagiaires_remuneres_en_entreprise", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique condition_empoi_pr \u00e9gale \u00e0 stagiaires_re\"muneres_en_entreprise\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__0": {"name": "personnes_moins_5_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__1": {"name": "personnes_moins_5_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__10": {"name": "personnes_moins_5_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__2": {"name": "personnes_moins_5_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__3": {"name": "personnes_moins_5_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__4": {"name": "personnes_moins_5_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__5": {"name": "personnes_moins_5_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__6": {"name": "personnes_moins_5_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__7": {"name": "personnes_moins_5_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__8": {"name": "personnes_moins_5_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__9": {"name": "personnes_moins_5_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_5_ans_menage__Y": {"name": "personnes_moins_5_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_5_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__0": {"name": "personnes_scolarise_plus_14_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__1": {"name": "personnes_scolarise_plus_14_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__10": {"name": "personnes_scolarise_plus_14_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__11": {"name": "personnes_scolarise_plus_14_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__12": {"name": "personnes_scolarise_plus_14_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__2": {"name": "personnes_scolarise_plus_14_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__3": {"name": "personnes_scolarise_plus_14_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__4": {"name": "personnes_scolarise_plus_14_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__5": {"name": "personnes_scolarise_plus_14_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__6": {"name": "personnes_scolarise_plus_14_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__7": {"name": "personnes_scolarise_plus_14_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__8": {"name": "personnes_scolarise_plus_14_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__9": {"name": "personnes_scolarise_plus_14_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_scolarise_plus_14_menage__Y": {"name": "personnes_scolarise_plus_14_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_scolarise_plus_14_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__0": {"name": "personnes_actives_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__1": {"name": "personnes_actives_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__10": {"name": "personnes_actives_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__11": {"name": "personnes_actives_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__12": {"name": "personnes_actives_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__13": {"name": "personnes_actives_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__14": {"name": "personnes_actives_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__15": {"name": "personnes_actives_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__16": {"name": "personnes_actives_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__17": {"name": "personnes_actives_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__18": {"name": "personnes_actives_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__19": {"name": "personnes_actives_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__2": {"name": "personnes_actives_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__20": {"name": "personnes_actives_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__26": {"name": "personnes_actives_menage__26", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 26", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__3": {"name": "personnes_actives_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__4": {"name": "personnes_actives_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__41": {"name": "personnes_actives_menage__41", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 41", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__5": {"name": "personnes_actives_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__6": {"name": "personnes_actives_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__7": {"name": "personnes_actives_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__8": {"name": "personnes_actives_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__9": {"name": "personnes_actives_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_actives_menage__Y": {"name": "personnes_actives_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_actives_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__deux_roues_motorise": {"name": "mode_transport_plus_utilise_travail_pr__deux_roues_motorise", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 deux_roues_mo\"torise\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__hors_residence_principa": {"name": "mode_transport_plus_utilise_travail_pr__hors_residence_principa", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 hors_residenc\"e_principa\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__marche_a_pied_ou_roller": {"name": "mode_transport_plus_utilise_travail_pr__marche_a_pied_ou_roller", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 marche_a_pied\"_ou_roller\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__pas_transport": {"name": "mode_transport_plus_utilise_travail_pr__pas_transport", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 pas_transport\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__sans_objet": {"name": "mode_transport_plus_utilise_travail_pr__sans_objet", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 sans_objet\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__transports_en_commun": {"name": "mode_transport_plus_utilise_travail_pr__transports_en_commun", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 transports_en_commun\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__velo_y_compris_a_assist": {"name": "mode_transport_plus_utilise_travail_pr__velo_y_compris_a_assist", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 velo_y_compris_a_assist\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "mode_transport_plus_utilise_travail_pr__voiture_camion_fourgonn": {"name": "mode_transport_plus_utilise_travail_pr__voiture_camion_fourgonn", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique mode_transport_plus_utilise_travail_pr \u00e9gale \u00e0 voiture_camion_fourgonn\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__15_a_19_ans": {"name": "age_regroupe_pr_menage__15_a_19_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 15_a_19_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__20_a_24_ans": {"name": "age_regroupe_pr_menage__20_a_24_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 20_a_24_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__25_a_39_ans": {"name": "age_regroupe_pr_menage__25_a_39_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 25_a_39_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__40_a_54_ans": {"name": "age_regroupe_pr_menage__40_a_54_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 40_a_54_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__55_a_64_ans": {"name": "age_regroupe_pr_menage__55_a_64_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 55_a_64_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__65_a_79_ans": {"name": "age_regroupe_pr_menage__65_a_79_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 65_a_79_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__80_ans_ou_plus": {"name": "age_regroupe_pr_menage__80_ans_ou_plus", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 80_ans_ou_plus", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__hors_residence_principale": {"name": "age_regroupe_pr_menage__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "age_regroupe_pr_menage__moins_15_ans": {"name": "age_regroupe_pr_menage__moins_15_ans", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique age_regroupe_pr_menage \u00e9gale \u00e0 moins_15_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__actifs_ayant_emploi": {"name": "type_activite_pr__actifs_ayant_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 actifs_ayant_emploi", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__autres_inactifs": {"name": "type_activite_pr__autres_inactifs", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 autres_inactifs", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__chomeurs": {"name": "type_activite_pr__chomeurs", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 chomeurs", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__eleves": {"name": "type_activite_pr__eleves", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 eleves", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__femmes_ou_hommes_au_foyer": {"name": "type_activite_pr__femmes_ou_hommes_au_foyer", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 femmes_ou_hommes_au_foyer", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__hors_residence_principale": {"name": "type_activite_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_activite_pr__retraites_ou_preretraites": {"name": "type_activite_pr__retraites_ou_preretraites", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique type_activite_pr \u00e9gale \u00e0 retraites_ou_preretraites", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__0": {"name": "personnes_moins_15_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__1": {"name": "personnes_moins_15_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__10": {"name": "personnes_moins_15_ans_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__11": {"name": "personnes_moins_15_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__12": {"name": "personnes_moins_15_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__13": {"name": "personnes_moins_15_ans_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__14": {"name": "personnes_moins_15_ans_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__15": {"name": "personnes_moins_15_ans_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__2": {"name": "personnes_moins_15_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__3": {"name": "personnes_moins_15_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__4": {"name": "personnes_moins_15_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__5": {"name": "personnes_moins_15_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__6": {"name": "personnes_moins_15_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__7": {"name": "personnes_moins_15_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__8": {"name": "personnes_moins_15_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__9": {"name": "personnes_moins_15_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_moins_15_ans_menage__Y": {"name": "personnes_moins_15_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_moins_15_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "situation_immigration_pr__hors_residence_principale": {"name": "situation_immigration_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique situation_immigration_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "situation_immigration_pr__immigres": {"name": "situation_immigration_pr__immigres", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique situation_immigration_pr \u00e9gale \u00e0 immigres", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "situation_immigration_pr__non_immigres": {"name": "situation_immigration_pr__non_immigres", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique situation_immigration_pr \u00e9gale \u00e0 non_immigres", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__0": {"name": "personnes_feminin_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__1": {"name": "personnes_feminin_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__10": {"name": "personnes_feminin_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__11": {"name": "personnes_feminin_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__12": {"name": "personnes_feminin_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__13": {"name": "personnes_feminin_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__14": {"name": "personnes_feminin_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__15": {"name": "personnes_feminin_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__16": {"name": "personnes_feminin_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__17": {"name": "personnes_feminin_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__19": {"name": "personnes_feminin_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__2": {"name": "personnes_feminin_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__20": {"name": "personnes_feminin_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__3": {"name": "personnes_feminin_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__39": {"name": "personnes_feminin_menage__39", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 39", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__4": {"name": "personnes_feminin_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__5": {"name": "personnes_feminin_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__6": {"name": "personnes_feminin_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__7": {"name": "personnes_feminin_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__8": {"name": "personnes_feminin_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__9": {"name": "personnes_feminin_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_feminin_menage__Y": {"name": "personnes_feminin_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_feminin_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__aucdiplome_et_scolarite_interrompue_a_fin_primaire_": {"name": "diplome_pr__aucdiplome_et_scolarite_interrompue_a_fin_primaire_", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 aucdiplome_et\"_scolarite_interrompue_a_fin_primaire_\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__aucdiplome_et_scolarite_jusqu_a_fin_college_ou_au_d": {"name": "diplome_pr__aucdiplome_et_scolarite_jusqu_a_fin_college_ou_au_d", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 aucdiplome_et\"_scolarite_jusqu_a_fin_college_ou_au_d\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__baccalaureat_general_ou_technologique_brevet_superi": {"name": "diplome_pr__baccalaureat_general_ou_technologique_brevet_superi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 baccalaureat_\"general_ou_technologique_brevet_superi\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__baccalaureat_professionnel_brevet_professionnel_tec": {"name": "diplome_pr__baccalaureat_professionnel_brevet_professionnel_tec", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 baccalaureat_\"professionnel_brevet_professionnel_tec\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__bepc_brevet_elementaire_brevet_des_colleges_dnb": {"name": "diplome_pr__bepc_brevet_elementaire_brevet_des_colleges_dnb", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 bepc_brevet_e\"lementaire_brevet_des_colleges_dnb\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__bts_dut_deug_deust_diplome_sante_ou_social_niveau_b": {"name": "diplome_pr__bts_dut_deug_deust_diplome_sante_ou_social_niveau_b", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 bts_dut_deug_\"deust_diplome_sante_ou_social_niveau_b\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__cap_bep_ou_diplome_niveau_equivalent": {"name": "diplome_pr__cap_bep_ou_diplome_niveau_equivalent", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 cap_bep_ou_di\"plome_niveau_equivalent\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__cep_certificat_d_etudes_primaires": {"name": "diplome_pr__cep_certificat_d_etudes_primaires", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 cep_certifica\"t_d_etudes_primaires\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__doctorat_recherche_hors_sante": {"name": "diplome_pr__doctorat_recherche_hors_sante", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 doctorat_recherche_hors_sante", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__hors_residence_principale": {"name": "diplome_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__licence_licence_pro_maitrise_diplome_equivalent_niv": {"name": "diplome_pr__licence_licence_pro_maitrise_diplome_equivalent_niv", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 licence_licen\"ce_pro_maitrise_diplome_equivalent_niv\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__master_dea_dess_diplome_granecole_niveau_bac+5_doct": {"name": "diplome_pr__master_dea_dess_diplome_granecole_niveau_bac+5_doct", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 master_dea_de\"ss_diplome_granecole_niveau_bac+5_doct\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "diplome_pr__pas_scolarite_ou_arret_avant_fin_primaire": {"name": "diplome_pr__pas_scolarite_ou_arret_avant_fin_primaire", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique diplome_pr \u00e9gale \u00e0 pas_scolarite\"_ou_arret_avant_fin_primaire\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__a_l_etranger": {"name": "lieu_etudes_pr__a_l_etranger", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 a_l_etranger", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__dans_autre_commdepartement_residence": {"name": "lieu_etudes_pr__dans_autre_commdepartement_residence", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 dans_autre_co\"mmdepartement_residence\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__dans_autre_departement_region_residence": {"name": "lieu_etudes_pr__dans_autre_departement_region_residence", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 dans_autre_de\"partement_region_residence\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__dans_commresidence_actuelle": {"name": "lieu_etudes_pr__dans_commresidence_actuelle", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 dans_commresidence_actuelle", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__hors_region_residence_actuelle_com": {"name": "lieu_etudes_pr__hors_region_residence_actuelle_com", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_com\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__hors_region_residence_actuelle_dom": {"name": "lieu_etudes_pr__hors_region_residence_actuelle_dom", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_dom\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__hors_region_residence_actuelle_en_metropole": {"name": "lieu_etudes_pr__hors_region_residence_actuelle_en_metropole", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_en_metropole\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__hors_residence_principale": {"name": "lieu_etudes_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_etudes_pr__sans_objet_pas_d_inscription_etablissement_d_en": {"name": "lieu_etudes_pr__sans_objet_pas_d_inscription_etablissement_d_en", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_etudes_pr \u00e9gale \u00e0 sans_objet_pa\"s_d_inscription_etablissement_d_en\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__a_l_etranger": {"name": "lieu_naissance_pr__a_l_etranger", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 a_l_etranger", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__dans_autre_departement_region_residence_actu": {"name": "lieu_naissance_pr__dans_autre_departement_region_residence_actu", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 dans_autre_de\"partement_region_residence_actu\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__dans_le_departement_residence_actuelle": {"name": "lieu_naissance_pr__dans_le_departement_residence_actuelle", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 dans_le_depar\"tement_residence_actuelle\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__hors_region_residence_actuelle_dom": {"name": "lieu_naissance_pr__hors_region_residence_actuelle_dom", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_dom\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__hors_region_residence_actuelle_en_metropole": {"name": "lieu_naissance_pr__hors_region_residence_actuelle_en_metropole", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_en_metropole\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__hors_region_residence_actuelle_tom_com": {"name": "lieu_naissance_pr__hors_region_residence_actuelle_tom_com", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_tom_com\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_naissance_pr__hors_residence_principale": {"name": "lieu_naissance_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_naissance_pr \u00e9gale \u00e0 hors_residenc\"e_principale\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__a_l_etranger": {"name": "lieu_travail_pr__a_l_etranger", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 a_l_etranger", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__dans_autre_commdepartement_residence": {"name": "lieu_travail_pr__dans_autre_commdepartement_residence", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 dans_autre_co\"mmdepartement_residence\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__dans_autre_departement_region_residence": {"name": "lieu_travail_pr__dans_autre_departement_region_residence", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 dans_autre_de\"partement_region_residence\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__dans_commresidence_actuelle": {"name": "lieu_travail_pr__dans_commresidence_actuelle", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 dans_commresi\"dence_actuelle\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__hors_region_residence_actuelle_com": {"name": "lieu_travail_pr__hors_region_residence_actuelle_com", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_com\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__hors_region_residence_actuelle_dom": {"name": "lieu_travail_pr__hors_region_residence_actuelle_dom", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_dom\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__hors_region_residence_actuelle_en_metropole": {"name": "lieu_travail_pr__hors_region_residence_actuelle_en_metropole", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 hors_region_r\"esidence_actuelle_en_metropole\"", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__hors_residence_principale": {"name": "lieu_travail_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "lieu_travail_pr__sans_objet_sans_emploi": {"name": "lieu_travail_pr__sans_objet_sans_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique lieu_travail_pr \u00e9gale \u00e0 sans_objet_sans_emploi", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__0": {"name": "personnes_plus_65_ans_menage__0", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 0", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__1": {"name": "personnes_plus_65_ans_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__11": {"name": "personnes_plus_65_ans_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__12": {"name": "personnes_plus_65_ans_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__16": {"name": "personnes_plus_65_ans_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__18": {"name": "personnes_plus_65_ans_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__2": {"name": "personnes_plus_65_ans_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__3": {"name": "personnes_plus_65_ans_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__4": {"name": "personnes_plus_65_ans_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__5": {"name": "personnes_plus_65_ans_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__55": {"name": "personnes_plus_65_ans_menage__55", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 55", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__6": {"name": "personnes_plus_65_ans_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__7": {"name": "personnes_plus_65_ans_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__8": {"name": "personnes_plus_65_ans_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__9": {"name": "personnes_plus_65_ans_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_plus_65_ans_menage__Y": {"name": "personnes_plus_65_ans_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_plus_65_ans_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "temps_travail_pr__hors_residence_principale": {"name": "temps_travail_pr__hors_residence_principale", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique temps_travail_pr \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "temps_travail_pr__sans_objet_sans_emploi": {"name": "temps_travail_pr__sans_objet_sans_emploi", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique temps_travail_pr \u00e9gale \u00e0 sans_objet_sans_emploi", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "temps_travail_pr__temps_complet": {"name": "temps_travail_pr__temps_complet", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique temps_travail_pr \u00e9gale \u00e0 temps_complet", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "temps_travail_pr__temps_partiel": {"name": "temps_travail_pr__temps_partiel", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique temps_travail_pr \u00e9gale \u00e0 temps_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__1": {"name": "personnes_menage__1", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 1", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__10": {"name": "personnes_menage__10", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__11": {"name": "personnes_menage__11", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__12": {"name": "personnes_menage__12", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__13": {"name": "personnes_menage__13", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__14": {"name": "personnes_menage__14", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__15": {"name": "personnes_menage__15", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__16": {"name": "personnes_menage__16", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__17": {"name": "personnes_menage__17", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__18": {"name": "personnes_menage__18", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__19": {"name": "personnes_menage__19", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__2": {"name": "personnes_menage__2", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 2", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__20": {"name": "personnes_menage__20", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__21": {"name": "personnes_menage__21", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 21", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__22": {"name": "personnes_menage__22", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 22", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__23": {"name": "personnes_menage__23", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 23", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__24": {"name": "personnes_menage__24", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 24", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__25": {"name": "personnes_menage__25", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 25", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__26": {"name": "personnes_menage__26", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 26", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__28": {"name": "personnes_menage__28", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 28", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__3": {"name": "personnes_menage__3", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 3", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__34": {"name": "personnes_menage__34", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 34", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__4": {"name": "personnes_menage__4", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 4", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__41": {"name": "personnes_menage__41", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 41", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__5": {"name": "personnes_menage__5", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 5", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__55": {"name": "personnes_menage__55", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 55", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__6": {"name": "personnes_menage__6", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 6", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__7": {"name": "personnes_menage__7", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 7", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__8": {"name": "personnes_menage__8", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 8", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__9": {"name": "personnes_menage__9", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9ristique personnes_menage \u00e9gale \u00e0 9", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "personnes_menage__Y": {"name": "personnes_menage__Y", "description": "Nombres de m\u00e9nages dans la communes avec la caract\u00e9istique personnes_menage inapplicable (hors logement secondaire). Colonnes gard\u00e9es pour tester les aggr\u00e9gations", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/demographie/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.755427, "relation_name": "\"defaultdb\".\"prep\".\"aggreger_demographie_communes\"", "raw_code": "{{ config(materialized='table') }}\n\n--- Agr\u00e8ge les donn\u00e9es de la base logement par commune\n--- Colonne par colonne pour ne pas saturer la m\u00e9moire\n--- L'agr\u00e9gration est faite par univot/pivot.\n\n{% set colonnes_a_aggreger_list = lister_colonnes_a_aggreger('logement_2020_demographie_codes') %}\n\n\nwith communes as (\n    SELECT \n      code_commune_insee,\n      SUM(CAST(poids_du_logement AS numeric)) AS nombre_de_logements\n    FROM \n      {{ ref('decoder_demographie') }}\n    GROUP BY\n      code_commune_insee\n  ),\n  aggregated as (\n\n    SELECT * \n\n    FROM communes\n\n    {% for colonne_a_aggreger in colonnes_a_aggreger_list %}\n\n      LEFT JOIN ( {{ aggreger_logement_par_colonne('decoder_demographie', colonnes_a_aggreger_list, colonne_a_aggreger) }} )\n      USING (code_commune_insee)\n\n    {% endfor %}\n\n  )\n\nSELECT \n    *  \nFROM\n    aggregated", "language": "sql", "refs": [{"name": "logement_2020_demographie_codes", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}, {"name": "decoder_demographie", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.lister_colonnes_a_aggreger", "macro.makeopendata.aggreger_logement_par_colonne"], "nodes": ["seed.makeopendata.logement_2020_demographie_codes", "model.makeopendata.decoder_demographie"]}, "compiled_path": "target/compiled/makeopendata/models/prep/demographie/aggreger_demographie_communes.sql", "compiled": true, "compiled_code": "\n\n--- Agr\u00e8ge les donn\u00e9es de la base logement par commune\n--- Colonne par colonne pour ne pas saturer la m\u00e9moire\n--- L'agr\u00e9gration est faite par univot/pivot.\n\n\n\n\nwith communes as (\n    SELECT \n      code_commune_insee,\n      SUM(CAST(poids_du_logement AS numeric)) AS nombre_de_logements\n    FROM \n      \"defaultdb\".\"prep\".\"decoder_demographie\"\n    GROUP BY\n      code_commune_insee\n  ),\n  aggregated as (\n\n    SELECT * \n\n    FROM communes\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_3_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_3_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_3_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_3_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_11_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_11_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_11_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_11_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('residence_annee_avant_pr' as TEXT) as champs,\n      cast(  \n           residence_annee_avant_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__a_l_etranger_hors_union_europeenne'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__a_l_etranger_hors_union_europeenne\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__a_l_etranger_l_union_europeenne_28_pays_membres'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__a_l_etranger_l_union_europeenne_28_pays_membres\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__dans_autre_commdepartement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__dans_autre_commdepartement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__dans_autre_departement_region'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__dans_autre_departement_region\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__dans_autre_logement_meme_commune'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__dans_autre_logement_meme_commune\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__dans_le_meme_logement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__dans_le_meme_logement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__hors_region_residence_actuelle_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__hors_region_residence_actuelle_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__hors_region_residence_actuelle_en_metropole'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__hors_region_residence_actuelle_en_metropole\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__hors_region_residence_actuelle_tom_com'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__hors_region_residence_actuelle_tom_com\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_annee_avant_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_annee_avant_pr__hors_residence_principale\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('status_conjugal_pr' as TEXT) as champs,\n      cast(  \n           status_conjugal_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__celibataire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__celibataire\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__divorce_e'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__divorce_e\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__en_concubinage_ou_union_libre'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__en_concubinage_ou_union_libre\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__marie_e'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__marie_e\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__pacse_e'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__pacse_e\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status_conjugal_pr__veuf_veuve'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status_conjugal_pr__veuf_veuve\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('sexe_pr' as TEXT) as champs,\n      cast(  \n           sexe_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'sexe_pr__femmes'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"sexe_pr__femmes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'sexe_pr__hommes'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"sexe_pr__hommes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'sexe_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"sexe_pr__hors_residence_principale\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('nombre_voitures_menage' as TEXT) as champs,\n      cast(  \n           nombre_voitures_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_voitures_menage__aucvoiture'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_voitures_menage__aucvoiture\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_voitures_menage__deux_voitures'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_voitures_menage__deux_voitures\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_voitures_menage__logement_ordinaire_inoccupe'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_voitures_menage__logement_ordinaire_inoccupe\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_voitures_menage__trois_voitures_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_voitures_menage__trois_voitures_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_voitures_menage__une_seule_voiture'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_voitures_menage__une_seule_voiture\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_17_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_17_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__24'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__24\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_17_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_17_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_actives_ayant_emploi_menage' as TEXT) as champs,\n      cast(  \n           personnes_actives_ayant_emploi_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__26'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__26\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__41'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__41\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_ayant_emploi_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_ayant_emploi_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('anciennete_recherche_emploi_pr' as TEXT) as champs,\n      cast(  \n           anciennete_recherche_emploi_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__cherche_emploi_depuis_moins_an'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__cherche_emploi_depuis_moins_an\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__cherche_emploi_depuis_plus_an'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__cherche_emploi_depuis_plus_an\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__ne_recherche_pas_d_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__ne_recherche_pas_d_emploi\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__non_declare_inactif'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__non_declare_inactif\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'anciennete_recherche_emploi_pr__sans_objet_en_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"anciennete_recherche_emploi_pr__sans_objet_en_emploi\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_masculin_menage' as TEXT) as champs,\n      cast(  \n           personnes_masculin_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__22'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__22\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__26'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__26\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__38'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__38\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_masculin_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_masculin_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_24_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_24_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__21'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__21\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__25'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__25\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_24_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_24_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_scolarisees_menage' as TEXT) as champs,\n      cast(  \n           personnes_scolarisees_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__25'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__25\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarisees_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarisees_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('status' as TEXT) as champs,\n      cast(  \n           status\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__locataire_ou_sous_locataire_logement_loue_meuble_ou_d_chambre_d_hotel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__locataire_ou_sous_locataire_logement_loue_meuble_ou_d_chambre_d_hotel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__locataire_ou_sous_locataire_logement_loue_vihlm'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__locataire_ou_sous_locataire_logement_loue_vihlm\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__locataire_ou_sous_locataire_logement_loue_vinon_hlm'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__locataire_ou_sous_locataire_logement_loue_vinon_hlm\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__loge_gratuitement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__loge_gratuitement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__logement_ordinaire_inoccupe'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__logement_ordinaire_inoccupe\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'status__proprietaire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"status__proprietaire\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_plus_75_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_plus_75_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__48'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__48\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_75_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_75_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_plus_60_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_plus_60_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__55'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__55\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_60_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_60_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_19_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_19_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__21'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__21\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__22'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__22\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__23'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__23\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__25'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__25\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__41'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__41\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__55'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__55\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_19_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_19_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('condition_empoi_pr' as TEXT) as champs,\n      cast(  \n           condition_empoi_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__autres_emplois_a_duree_limitee'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__autres_emplois_a_duree_limitee\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__emplois_aides_contrat_unique_d_insertion'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__emplois_aides_contrat_unique_d_insertion\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__emplois_sans_limite_duree'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__emplois_sans_limite_duree\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__en_contrat_d_apprentissage_ou_professionnalisation'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__en_contrat_d_apprentissage_ou_professionnalisation\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__non_salaries_aides_familiaux'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__non_salaries_aides_familiaux\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__non_salaries_employeurs'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__non_salaries_employeurs\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__non_salaries_independants'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__non_salaries_independants\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__places_par_agence_d_interim'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__places_par_agence_d_interim\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__sans_objet_sans_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__sans_objet_sans_emploi\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'condition_empoi_pr__stagiaires_remuneres_en_entreprise'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"condition_empoi_pr__stagiaires_remuneres_en_entreprise\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_5_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_5_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_5_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_5_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_scolarise_plus_14_menage' as TEXT) as champs,\n      cast(  \n           personnes_scolarise_plus_14_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_scolarise_plus_14_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_scolarise_plus_14_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_actives_menage' as TEXT) as champs,\n      cast(  \n           personnes_actives_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__26'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__26\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__41'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__41\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_actives_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_actives_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('mode_transport_plus_utilise_travail_pr' as TEXT) as champs,\n      cast(  \n           mode_transport_plus_utilise_travail_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__deux_roues_motorise'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__deux_roues_motorise\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__marche_a_pied_ou_rollers_patinette'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__marche_a_pied_ou_rollers_patinette\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__pas_transport'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__pas_transport\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__sans_objet'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__sans_objet\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__transports_en_commun'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__transports_en_commun\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__velo_y_compris_a_assistance_electrique'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__velo_y_compris_a_assistance_electrique\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_transport_plus_utilise_travail_pr__voiture_camion_fourgonnette'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_transport_plus_utilise_travail_pr__voiture_camion_fourgonnette\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('age_regroupe_pr_menage' as TEXT) as champs,\n      cast(  \n           age_regroupe_pr_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__15_a_19_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__15_a_19_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__20_a_24_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__20_a_24_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__25_a_39_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__25_a_39_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__40_a_54_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__40_a_54_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__55_a_64_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__55_a_64_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__65_a_79_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__65_a_79_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__80_ans_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__80_ans_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'age_regroupe_pr_menage__moins_15_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"age_regroupe_pr_menage__moins_15_ans\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('type_activite_pr' as TEXT) as champs,\n      cast(  \n           type_activite_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__actifs_ayant_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__actifs_ayant_emploi\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__autres_inactifs'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__autres_inactifs\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__chomeurs'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__chomeurs\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__eleves'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__eleves\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__femmes_ou_hommes_au_foyer'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__femmes_ou_hommes_au_foyer\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_activite_pr__retraites_ou_preretraites'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_activite_pr__retraites_ou_preretraites\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_moins_15_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_moins_15_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_moins_15_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_moins_15_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('situation_immigration_pr' as TEXT) as champs,\n      cast(  \n           situation_immigration_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'situation_immigration_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"situation_immigration_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'situation_immigration_pr__immigres'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"situation_immigration_pr__immigres\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'situation_immigration_pr__non_immigres'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"situation_immigration_pr__non_immigres\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_feminin_menage' as TEXT) as champs,\n      cast(  \n           personnes_feminin_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__39'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__39\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_feminin_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_feminin_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('diplome_pr' as TEXT) as champs,\n      cast(  \n           diplome_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__aucdiplome_et_scolarite_interrompue_a_fin_primaire_ou_avant_fin_college'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__aucdiplome_et_scolarite_interrompue_a_fin_primaire_ou_avant_fin_college\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__aucdiplome_et_scolarite_jusqu_a_fin_college_ou_au_dela'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__aucdiplome_et_scolarite_jusqu_a_fin_college_ou_au_dela\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__baccalaureat_general_ou_technologique_brevet_superieur_capacite_en_droit_daeu_eseu'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__baccalaureat_general_ou_technologique_brevet_superieur_capacite_en_droit_daeu_eseu\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__baccalaureat_professionnel_brevet_professionnel_technicien_ou_d_enseignement_diplome_equivalent'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__baccalaureat_professionnel_brevet_professionnel_technicien_ou_d_enseignement_diplome_equivalent\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__bepc_brevet_elementaire_brevet_des_colleges_dnb'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__bepc_brevet_elementaire_brevet_des_colleges_dnb\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__bts_dut_deug_deust_diplome_sante_ou_social_niveau_bac+2_diplome_equivalent'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__bts_dut_deug_deust_diplome_sante_ou_social_niveau_bac+2_diplome_equivalent\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__cap_bep_ou_diplome_niveau_equivalent'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__cap_bep_ou_diplome_niveau_equivalent\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__cep_certificat_d_etudes_primaires'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__cep_certificat_d_etudes_primaires\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__doctorat_recherche_hors_sante'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__doctorat_recherche_hors_sante\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__licence_licence_pro_maitrise_diplome_equivalent_niveau_bac+3_ou_bac+4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__licence_licence_pro_maitrise_diplome_equivalent_niveau_bac+3_ou_bac+4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__master_dea_dess_diplome_granecole_niveau_bac+5_doctorat_sante'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__master_dea_dess_diplome_granecole_niveau_bac+5_doctorat_sante\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'diplome_pr__pas_scolarite_ou_arret_avant_fin_primaire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"diplome_pr__pas_scolarite_ou_arret_avant_fin_primaire\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('lieu_etudes_pr' as TEXT) as champs,\n      cast(  \n           lieu_etudes_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__a_l_etranger'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__a_l_etranger\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__dans_autre_commdepartement_residence'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__dans_autre_commdepartement_residence\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__dans_autre_departement_region_residence'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__dans_autre_departement_region_residence\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__dans_commresidence_actuelle'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__dans_commresidence_actuelle\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__hors_region_residence_actuelle_com'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__hors_region_residence_actuelle_com\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__hors_region_residence_actuelle_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__hors_region_residence_actuelle_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__hors_region_residence_actuelle_en_metropole'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__hors_region_residence_actuelle_en_metropole\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_etudes_pr__sans_objet_pas_d_inscription_etablissement_d_enseignement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_etudes_pr__sans_objet_pas_d_inscription_etablissement_d_enseignement\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('lieu_naissance_pr' as TEXT) as champs,\n      cast(  \n           lieu_naissance_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__a_l_etranger'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__a_l_etranger\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__dans_autre_departement_region_residence_actuelle'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__dans_autre_departement_region_residence_actuelle\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__dans_le_departement_residence_actuelle'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__dans_le_departement_residence_actuelle\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__hors_region_residence_actuelle_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__hors_region_residence_actuelle_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__hors_region_residence_actuelle_en_metropole'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__hors_region_residence_actuelle_en_metropole\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__hors_region_residence_actuelle_tom_com'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__hors_region_residence_actuelle_tom_com\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_naissance_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_naissance_pr__hors_residence_principale\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('lieu_travail_pr' as TEXT) as champs,\n      cast(  \n           lieu_travail_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__a_l_etranger'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__a_l_etranger\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__dans_autre_commdepartement_residence'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__dans_autre_commdepartement_residence\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__dans_autre_departement_region_residence'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__dans_autre_departement_region_residence\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__dans_commresidence_actuelle'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__dans_commresidence_actuelle\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__hors_region_residence_actuelle_com'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__hors_region_residence_actuelle_com\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__hors_region_residence_actuelle_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__hors_region_residence_actuelle_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__hors_region_residence_actuelle_en_metropole'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__hors_region_residence_actuelle_en_metropole\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'lieu_travail_pr__sans_objet_sans_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"lieu_travail_pr__sans_objet_sans_emploi\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_plus_65_ans_menage' as TEXT) as champs,\n      cast(  \n           personnes_plus_65_ans_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__0'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__0\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__55'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__55\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_plus_65_ans_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_plus_65_ans_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('temps_travail_pr' as TEXT) as champs,\n      cast(  \n           temps_travail_pr\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'temps_travail_pr__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"temps_travail_pr__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'temps_travail_pr__sans_objet_sans_emploi'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"temps_travail_pr__sans_objet_sans_emploi\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'temps_travail_pr__temps_complet'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"temps_travail_pr__temps_complet\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'temps_travail_pr__temps_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"temps_travail_pr__temps_partiel\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('personnes_menage' as TEXT) as champs,\n      cast(  \n           personnes_menage\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_demographie\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__1'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__1\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__2'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__2\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__21'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__21\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__22'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__22\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__23'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__23\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__24'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__24\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__25'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__25\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__26'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__26\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__28'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__28\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__3'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__3\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__34'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__34\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__4'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__4\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__41'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__41\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__5'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__5\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__55'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__55\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__6'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__6\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__7'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__7\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__8'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__8\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__9'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__9\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'personnes_menage__Y'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"personnes_menage__Y\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n  )\n\nSELECT \n    *  \nFROM\n    aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.grouper_mutations": {"database": "defaultdb", "schema": "prep", "name": "grouper_mutations", "resource_type": "model", "package_name": "makeopendata", "path": "prep/immo/grouper_mutations.sql", "original_file_path": "models/prep/immo/grouper_mutations.sql", "unique_id": "model.makeopendata.grouper_mutations", "fqn": ["makeopendata", "prep", "immo", "grouper_mutations"], "alias": "grouper_mutations", "checksum": {"name": "sha256", "checksum": "160db43f6bc67def36d98f2dcb0a657d1fe030ec0692f6639b70da24a7beca69"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit les informations sur les transactions immobili\u00e8res (Maison ou appartement) group\u00e9es par mutation. En cas de mutation mutltivente, la localisation (GPS, code postal, code commune) sera celui du bien principal. Maison si Maison et appartement. Si m\u00eame type, on retiendra le plus grand des deux. Toujours en cas de mutivente, le tableau reporte la suface totale et le nombre de pi\u00e8ce total des ventes.", "columns": {"id_mutation": {"name": "id_mutation", "description": "Identifiant de la mutation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "valeur_fonciere": {"name": "valeur_fonciere", "description": "Valeur fonci\u00e8re, en euros, de la mutation", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Cordonn\u00e9es gps, Longitude, ou du bien principal (voir description) en cas de mutation multivente", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Cordonn\u00e9es gps, Latitude, ou du bien principal (voir description) en cas de mutation multivente", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "total_pieces": {"name": "total_pieces", "description": "Nombre de pi\u00e8ces du bien, ou des biens en cas de mutation multiventes", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "total_surface": {"name": "total_surface", "description": "Surface du bien, ou des biens en cas de mutation multiventes", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_local": {"name": "type_local", "description": "Type de bien, ou du bien principal (voir description) de la mutation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_postal": {"name": "code_postal", "description": "Code postal du bien, ou du bien principal (voir description) en cas de mutation multivente", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_commune": {"name": "code_commune", "description": "Code commune du bien, ou du bien principal (voir description) en cas de mutation multivente", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/immo/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.8201702, "relation_name": "\"defaultdb\".\"prep\".\"grouper_mutations\"", "raw_code": "-- Filtres nature transaction et nature bien :\n-- Il convient aussi de garder que les vente (explure les VEFA et les \u00e9changes)\n-- Et que les transactions qui concernent au moins un appartement et les maisons\n\n-- Filtres sur les surfaces et trautement des pi\u00e8ces :\n-- Il convient de garder que les transactions qui concernent des biens de plus de 9m2 \n-- Le nombre de pi\u00e8ces est souvent mal renseign\u00e9, il convient de le corriger en fonction de la surface\n\n-- Filtres sur les prix :\n-- Il convient de garder que les transactions dont le prix au metre carr\u00e9 n'est pas 50% de plus que ses 10 plus proches voisins\n\n-- Donn\u00e9es par mutation : \n-- Les donn\u00e9es DVF sont initilement pr\u00e9sent\u00e9es sous forme d'une ligne par mutation (transaction)\n-- Une mutation peut concerner plusieurs biens\n-- Le prix est le prix total de la mutation, il apparait sur les biens concern\u00e9s\n\n{{ config(materialized='table') }}\n\nWITH source_dvf AS (\n    select * from {{ source('sources', 'dvf_2023')}} as dvf_2023\n),\nfiltrer_dvf AS (\n    {{ filtrer_dvf(source_dvf) }}\n),\naggreger_dvf AS (\n    {{ aggreger_dvf(filtrer_dvf) }}\n),\nbien_principal_dvf AS (\n    {{ selectionner_bien_principal_dvf(filtrer_dvf) }}\n)\n\nSELECT \n    bien_principal_dvf.id_mutation,\n    bien_principal_dvf.valeur_fonciere,\n    bien_principal_dvf.longitude,\n    bien_principal_dvf.latitude,\n    aggreger_dvf.total_pieces,\n    aggreger_dvf.total_surface,\n    bien_principal_dvf.type_local,\n    bien_principal_dvf.code_postal,\n    bien_principal_dvf.code_commune\nFROM \n    bien_principal_dvf\nJOIN \n    aggreger_dvf ON aggreger_dvf.id_mutation = bien_principal_dvf.id_mutation", "language": "sql", "refs": [], "sources": [["sources", "dvf_2023"]], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.filtrer_dvf", "macro.makeopendata.aggreger_dvf", "macro.makeopendata.selectionner_bien_principal_dvf"], "nodes": ["source.makeopendata.sources.dvf_2023"]}, "compiled_path": "target/compiled/makeopendata/models/prep/immo/grouper_mutations.sql", "compiled": true, "compiled_code": "-- Filtres nature transaction et nature bien :\n-- Il convient aussi de garder que les vente (explure les VEFA et les \u00e9changes)\n-- Et que les transactions qui concernent au moins un appartement et les maisons\n\n-- Filtres sur les surfaces et trautement des pi\u00e8ces :\n-- Il convient de garder que les transactions qui concernent des biens de plus de 9m2 \n-- Le nombre de pi\u00e8ces est souvent mal renseign\u00e9, il convient de le corriger en fonction de la surface\n\n-- Filtres sur les prix :\n-- Il convient de garder que les transactions dont le prix au metre carr\u00e9 n'est pas 50% de plus que ses 10 plus proches voisins\n\n-- Donn\u00e9es par mutation : \n-- Les donn\u00e9es DVF sont initilement pr\u00e9sent\u00e9es sous forme d'une ligne par mutation (transaction)\n-- Une mutation peut concerner plusieurs biens\n-- Le prix est le prix total de la mutation, il apparait sur les biens concern\u00e9s\n\n\n\nWITH source_dvf AS (\n    select * from \"defaultdb\".\"sources\".\"dvf_2023\" as dvf_2023\n),\nfiltrer_dvf AS (\n    \n    SELECT \n        id_mutation,\n        CAST(valeur_fonciere AS FLOAT) as valeur_fonciere,\n        CAST(longitude AS FLOAT) as longitude,\n        CAST(latitude AS FLOAT) as latitude,\n        CAST(nombre_pieces_principales AS NUMERIC) as nombre_pieces_principales,\n        CAST(surface_reelle_bati AS NUMERIC) as surface_reelle_bati,\n        type_local,\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        code_commune\n    FROM \n        source_dvf \n     WHERE \n        EXISTS (\n            SELECT 1\n            FROM source_dvf d1\n            WHERE d1.id_mutation = source_dvf.id_mutation AND d1.type_local IN ('Appartement', 'Maison')\n        ) AND\n        NOT EXISTS (\n            SELECT 1\n            FROM source_dvf d2\n            WHERE d2.id_mutation = source_dvf.id_mutation AND d2.nature_mutation != 'Vente'\n        )\n\n),\naggreger_dvf AS (\n    \n    SELECT \n        id_mutation,\n        SUM(CAST(surface_reelle_bati AS numeric)) AS total_surface,\n        SUM(CAST(nombre_pieces_principales AS numeric)) AS total_pieces\n    FROM \n        filtrer_dvf\n    GROUP BY \n        id_mutation\n\n),\nbien_principal_dvf AS (\n    \n    SELECT *\n    FROM (\n        SELECT \n            *,\n            ROW_NUMBER() OVER (\n                PARTITION BY id_mutation\n                ORDER BY \n                    CASE WHEN type_local = 'Maison' THEN 1\n                         WHEN type_local = 'Appartement' THEN 2\n                         ELSE 3\n                    END,\n                    surface_reelle_bati DESC\n            ) AS rang\n        FROM \n            filtrer_dvf\n    ) subquery\n    WHERE\n        rang = 1\n\n)\n\nSELECT \n    bien_principal_dvf.id_mutation,\n    bien_principal_dvf.valeur_fonciere,\n    bien_principal_dvf.longitude,\n    bien_principal_dvf.latitude,\n    aggreger_dvf.total_pieces,\n    aggreger_dvf.total_surface,\n    bien_principal_dvf.type_local,\n    bien_principal_dvf.code_postal,\n    bien_principal_dvf.code_commune\nFROM \n    bien_principal_dvf\nJOIN \n    aggreger_dvf ON aggreger_dvf.id_mutation = bien_principal_dvf.id_mutation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.geo_postaux": {"database": "defaultdb", "schema": "prep", "name": "geo_postaux", "resource_type": "model", "package_name": "makeopendata", "path": "prep/geo/geo_postaux.sql", "original_file_path": "models/prep/geo/geo_postaux.sql", "unique_id": "model.makeopendata.geo_postaux", "fqn": ["makeopendata", "prep", "geo", "geo_postaux"], "alias": "geo_postaux", "checksum": {"name": "sha256", "checksum": "9520ac569f153d782bc901d11b520e8f0aafee465851e2c86ff316b98b6b447c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "D\u00e9duplique les codes postaux et ajoute le nom des departements et regions associ\u00e9s", "columns": {"code_postal": {"name": "code_postal", "description": "code postal. Primary key of the table", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_departement": {"name": "code_departement", "description": "code departement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_departement": {"name": "nom_departement", "description": "nom departement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_region": {"name": "code_region", "description": "code region", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_region": {"name": "nom_region", "description": "nom region", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/geo/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1720079267.8284996, "relation_name": "\"defaultdb\".\"prep\".\"geo_postaux\"", "raw_code": "{{ config(materialized='view') }}\n\nwith format_cog_poste as (\n    select DISTINCT\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        CASE \n            WHEN SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 3) IN ('200', '201') THEN '2A'\n            WHEN SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 1) = '2' THEN '2B'\n            ELSE SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 2)\n        END as code_departement\n    from {{ source('sources', 'cog_poste')}} as cog_poste\n),\n\njoin_departements as (\n    select \n        format_cog_poste.*,\n        cog_departements.nom as nom_departement,\n        cog_departements.region as code_region\n    from format_cog_poste\n    left join {{ source('sources', 'cog_departements')}} cog_departements on format_cog_poste.code_departement = cog_departements.code\n),\n\njoin_regions as (\n    select \n        join_departements.*,\n        cog_regions.nom as nom_region\n    from join_departements\n    left join {{ source('sources', 'cog_regions')}} cog_regions on join_departements.code_region = cog_regions.code\n)\n\nselect *\nfrom join_regions", "language": "sql", "refs": [], "sources": [["sources", "cog_regions"], ["sources", "cog_poste"], ["sources", "cog_departements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_regions", "source.makeopendata.sources.cog_poste", "source.makeopendata.sources.cog_departements"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/geo_postaux.sql", "compiled": true, "compiled_code": "\n\nwith format_cog_poste as (\n    select DISTINCT\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        CASE \n            WHEN SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 3) IN ('200', '201') THEN '2A'\n            WHEN SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 1) = '2' THEN '2B'\n            ELSE SUBSTRING(LPAD(CAST(code_postal AS TEXT), 5, '0') for 2)\n        END as code_departement\n    from \"defaultdb\".\"sources\".\"cog_poste\" as cog_poste\n),\n\njoin_departements as (\n    select \n        format_cog_poste.*,\n        cog_departements.nom as nom_departement,\n        cog_departements.region as code_region\n    from format_cog_poste\n    left join \"defaultdb\".\"sources\".\"cog_departements\" cog_departements on format_cog_poste.code_departement = cog_departements.code\n),\n\njoin_regions as (\n    select \n        join_departements.*,\n        cog_regions.nom as nom_region\n    from join_departements\n    left join \"defaultdb\".\"sources\".\"cog_regions\" cog_regions on join_departements.code_region = cog_regions.code\n)\n\nselect *\nfrom join_regions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.geo_postaux_communes": {"database": "defaultdb", "schema": "prep", "name": "geo_postaux_communes", "resource_type": "model", "package_name": "makeopendata", "path": "prep/geo/geo_postaux_communes.sql", "original_file_path": "models/prep/geo/geo_postaux_communes.sql", "unique_id": "model.makeopendata.geo_postaux_communes", "fqn": ["makeopendata", "prep", "geo", "geo_postaux_communes"], "alias": "geo_postaux_communes", "checksum": {"name": "sha256", "checksum": "04093745bfd4c4c4bea16d9b4c25618bcbeafbabaa3ddb842e9fda70e16114ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table de passage pour avoir une relation unique entre les codes postaux et les codes communes insee. Un code postal peut appartenir \u00e0 plusieurs communes et une code commune insee peut appartenir plusieurs codes postaux.", "columns": {"code_postal": {"name": "code_postal", "description": "code postal. Non-unique", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_commune_insee": {"name": "code_commune_insee", "description": "code commune. Non-unique", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/geo/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.8290255, "relation_name": "\"defaultdb\".\"prep\".\"geo_postaux_communes\"", "raw_code": "{{ config(materialized='table') }}\n\nwith unique_codes_communes_postaux as (\n    select DISTINCT\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        code_commune_insee\n    from {{ source('sources', 'cog_poste')}} as cog_poste\n)\n\nselect *\nfrom unique_codes_communes_postaux", "language": "sql", "refs": [], "sources": [["sources", "cog_poste"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_poste"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/geo_postaux_communes.sql", "compiled": true, "compiled_code": "\n\nwith unique_codes_communes_postaux as (\n    select DISTINCT\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        code_commune_insee\n    from \"defaultdb\".\"sources\".\"cog_poste\" as cog_poste\n)\n\nselect *\nfrom unique_codes_communes_postaux", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.geo_communes": {"database": "defaultdb", "schema": "prep", "name": "geo_communes", "resource_type": "model", "package_name": "makeopendata", "path": "prep/geo/geo_communes.sql", "original_file_path": "models/prep/geo/geo_communes.sql", "unique_id": "model.makeopendata.geo_communes", "fqn": ["makeopendata", "prep", "geo", "geo_communes"], "alias": "geo_communes", "checksum": {"name": "sha256", "checksum": "637d36a106474da9d1c2a7840d4e05a2ba44f0d0eb206eac8aaf2348f2cf672c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit une tables des communes avec les informations d\u00e9normalis\u00e9es", "columns": {"code_commune": {"name": "code_commune", "description": "code commune. Primary key of the table", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_commune": {"name": "nom_commune", "description": "nom de la commune", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_arrondissement": {"name": "code_arrondissement", "description": "code arrondissement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_departement": {"name": "code_departement", "description": "code departement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_region": {"name": "code_region", "description": "code region", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "codes_postaux": {"name": "codes_postaux", "description": "codes postaux", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "population": {"name": "population", "description": "population", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_zone": {"name": "code_zone", "description": "D\u00e9partements ou R\u00e9gions fran\u00e7ais d'Outre-Mer (DROM), Collectivit\u00e9s d'Outre-Mer (COM) ou M\u00e9tropole", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_arrondissement": {"name": "nom_arrondissement", "description": "nom arrondissement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_departement": {"name": "nom_departement", "description": "nom departement", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "nom_region": {"name": "nom_region", "description": "nom region", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "commune_latitude": {"name": "commune_latitude", "description": "latitude de la commune", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "commune_longitude": {"name": "commune_longitude", "description": "longitude de la commune", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/geo/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.8277407, "relation_name": "\"defaultdb\".\"prep\".\"geo_communes\"", "raw_code": "{{ config(materialized='table') }}\n\nwith filtre_cog_communes as (\n    -- Filter out non-commune rows here to avoid confusion of filtering in the main query\n    select * \n    from {{ source('sources', 'cog_communes')}} as cog_communes     \n    where cog_communes.type in ('commune-actuelle', 'arrondissement-municipal')\n\n),denomalise_cog as (\n    select\n        LPAD(CAST(filtre_cog_communes.code as TEXT), 5, '0') as code_commune,\n        filtre_cog_communes.nom as nom_commune,\n        filtre_cog_communes.arrondissement as code_arrondissement,\n        filtre_cog_communes.departement as code_departement,\n        filtre_cog_communes.region as code_region,\n        \"codesPostaux\" as codes_postaux,\n        filtre_cog_communes.population as population,\n        filtre_cog_communes.zone as code_zone,\n        \n        cog_arrondissements.nom as nom_arrondissement,\n        cog_departements.nom as nom_departement,\n        cog_regions.nom as nom_region\n\n    from filtre_cog_communes\n    left join {{ source('sources', 'cog_arrondissements')}}  cog_arrondissements on cog_arrondissements.code = filtre_cog_communes.arrondissement\n    left join {{ source('sources', 'cog_departements')}}  cog_departements on cog_departements.code = filtre_cog_communes.departement\n    left join {{ source('sources', 'cog_regions')}}  cog_regions on cog_regions.code = filtre_cog_communes.region  \n    \n), geopoints as (\n    select DISTINCT\n        LPAD(CAST(cog_poste.code_commune_insee AS TEXT), 5, '0') as code_commune,\n        CAST(SPLIT_PART(cog_poste._geopoint, ',', 1) AS FLOAT) as commune_latitude,\n        CAST(SPLIT_PART(cog_poste._geopoint, ',', 2) AS FLOAT) as commune_longitude\n    from {{ source('sources', 'cog_poste')}}  as cog_poste\n)\n\nselect\n    denomalise_cog.*,\n    geopoints.commune_latitude,\n    geopoints.commune_longitude\nfrom denomalise_cog\nleft join geopoints on denomalise_cog.code_commune = geopoints.code_commune", "language": "sql", "refs": [], "sources": [["sources", "cog_communes"], ["sources", "cog_regions"], ["sources", "cog_arrondissements"], ["sources", "cog_poste"], ["sources", "cog_departements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_communes", "source.makeopendata.sources.cog_regions", "source.makeopendata.sources.cog_arrondissements", "source.makeopendata.sources.cog_poste", "source.makeopendata.sources.cog_departements"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/geo_communes.sql", "compiled": true, "compiled_code": "\n\nwith filtre_cog_communes as (\n    -- Filter out non-commune rows here to avoid confusion of filtering in the main query\n    select * \n    from \"defaultdb\".\"sources\".\"cog_communes\" as cog_communes     \n    where cog_communes.type in ('commune-actuelle', 'arrondissement-municipal')\n\n),denomalise_cog as (\n    select\n        LPAD(CAST(filtre_cog_communes.code as TEXT), 5, '0') as code_commune,\n        filtre_cog_communes.nom as nom_commune,\n        filtre_cog_communes.arrondissement as code_arrondissement,\n        filtre_cog_communes.departement as code_departement,\n        filtre_cog_communes.region as code_region,\n        \"codesPostaux\" as codes_postaux,\n        filtre_cog_communes.population as population,\n        filtre_cog_communes.zone as code_zone,\n        \n        cog_arrondissements.nom as nom_arrondissement,\n        cog_departements.nom as nom_departement,\n        cog_regions.nom as nom_region\n\n    from filtre_cog_communes\n    left join \"defaultdb\".\"sources\".\"cog_arrondissements\"  cog_arrondissements on cog_arrondissements.code = filtre_cog_communes.arrondissement\n    left join \"defaultdb\".\"sources\".\"cog_departements\"  cog_departements on cog_departements.code = filtre_cog_communes.departement\n    left join \"defaultdb\".\"sources\".\"cog_regions\"  cog_regions on cog_regions.code = filtre_cog_communes.region  \n    \n), geopoints as (\n    select DISTINCT\n        LPAD(CAST(cog_poste.code_commune_insee AS TEXT), 5, '0') as code_commune,\n        CAST(SPLIT_PART(cog_poste._geopoint, ',', 1) AS FLOAT) as commune_latitude,\n        CAST(SPLIT_PART(cog_poste._geopoint, ',', 2) AS FLOAT) as commune_longitude\n    from \"defaultdb\".\"sources\".\"cog_poste\"  as cog_poste\n)\n\nselect\n    denomalise_cog.*,\n    geopoints.commune_latitude,\n    geopoints.commune_longitude\nfrom denomalise_cog\nleft join geopoints on denomalise_cog.code_commune = geopoints.code_commune", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.aggeger_effectifs_sante_departement_2022": {"database": "defaultdb", "schema": "prep", "name": "aggeger_effectifs_sante_departement_2022", "resource_type": "model", "package_name": "makeopendata", "path": "prep/sante/aggeger_effectifs_sante_departement_2022.sql", "original_file_path": "models/prep/sante/aggeger_effectifs_sante_departement_2022.sql", "unique_id": "model.makeopendata.aggeger_effectifs_sante_departement_2022", "fqn": ["makeopendata", "prep", "sante", "aggeger_effectifs_sante_departement_2022"], "alias": "aggeger_effectifs_sante_departement_2022", "checksum": {"name": "sha256", "checksum": "91552fc6d7b3f8458c6d756b117a449c9804fbb3ec5420280a84089f16b02fbb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit les effectifs des professionnels de sant\u00e9 (tout sexe, age) par sp\u00e9cialit\u00e9 et d\u00e9partement pour l'ann\u00e9e 2022", "columns": {"region": {"name": "region", "description": "Code r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_region": {"name": "libelle_region", "description": "Libell\u00e9 r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "departement": {"name": "departement", "description": "Code d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_departement": {"name": "libelle_departement", "description": "Libell\u00e9 d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "Stomatologues": {"name": "Stomatologues", "description": "Nombre de Stomatologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Anesth\u00e9sistes-r\u00e9animateurs": {"name": "Anesth\u00e9sistes-r\u00e9animateurs", "description": "Nombre de Anesth\u00e9sistes-r\u00e9animateurs dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Autres m\u00e9decins": {"name": "Autres m\u00e9decins", "description": "Nombre de Autres m\u00e9decins dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Cardiologues": {"name": "Cardiologues", "description": "Nombre de Cardiologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Chirurgiens": {"name": "Chirurgiens", "description": "Nombre de Chirurgiens dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Chirurgiens-dentistes (hors sp\u00e9cialistes d'orthop\u00e9die dento-f": {"name": "Chirurgiens-dentistes (hors sp\u00e9cialistes d'orthop\u00e9die dento-f", "description": "Nombre de Chirurgiens-dentistes (hors sp\u00e9cialistes d'orthop\u00e9die dento-f dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Chirurgiens-dentistes sp\u00e9cialistes d'orthop\u00e9die dento-faciale": {"name": "Chirurgiens-dentistes sp\u00e9cialistes d'orthop\u00e9die dento-faciale", "description": "Nombre de Chirurgiens-dentistes sp\u00e9cialistes d'orthop\u00e9die dento-faciale dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Dermatologues": {"name": "Dermatologues", "description": "Nombre de Dermatologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Endocrinologues": {"name": "Endocrinologues", "description": "Nombre de Endocrinologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ensemble des auxiliaires m\u00e9dicaux": {"name": "Ensemble des auxiliaires m\u00e9dicaux", "description": "Nombre de Ensemble des auxiliaires m\u00e9dicaux dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ensemble des chirurgiens-dentistes": {"name": "Ensemble des chirurgiens-dentistes", "description": "Nombre de Ensemble des chirurgiens-dentistes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ensemble des m\u00e9decins": {"name": "Ensemble des m\u00e9decins", "description": "Nombre de Ensemble des m\u00e9decins dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ensemble des m\u00e9decins g\u00e9n\u00e9ralistes": {"name": "Ensemble des m\u00e9decins g\u00e9n\u00e9ralistes", "description": "Nombre de Ensemble des m\u00e9decins g\u00e9n\u00e9ralistes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ensemble des m\u00e9decins sp\u00e9cialistes (hors g\u00e9n\u00e9ralistes)": {"name": "Ensemble des m\u00e9decins sp\u00e9cialistes (hors g\u00e9n\u00e9ralistes)", "description": "Nombre de Ensemble des m\u00e9decins sp\u00e9cialistes (hors g\u00e9n\u00e9ralistes) dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Gyn\u00e9cologues m\u00e9dicaux et obst\u00e9triciens": {"name": "Gyn\u00e9cologues m\u00e9dicaux et obst\u00e9triciens", "description": "Nombre de Gyn\u00e9cologues m\u00e9dicaux et obst\u00e9triciens dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "H\u00e9pato-gastro-ent\u00e9rologues": {"name": "H\u00e9pato-gastro-ent\u00e9rologues", "description": "Nombre de H\u00e9pato-gastro-ent\u00e9rologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Infirmiers": {"name": "Infirmiers", "description": "Nombre de Infirmiers dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Masseurs-kin\u00e9sith\u00e9rapeutes": {"name": "Masseurs-kin\u00e9sith\u00e9rapeutes", "description": "Nombre de Masseurs-kin\u00e9sith\u00e9rapeutes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "M\u00e9decins g\u00e9n\u00e9ralistes (hors m\u00e9decins \u00e0 expertise particuli": {"name": "M\u00e9decins g\u00e9n\u00e9ralistes (hors m\u00e9decins \u00e0 expertise particuli", "description": "Nombre de M\u00e9decins g\u00e9n\u00e9ralistes (hors m\u00e9decins \u00e0 expertise particuli dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "M\u00e9decins g\u00e9n\u00e9ralistes \u00e0 expertise particuli\u00e8re (MEP)": {"name": "M\u00e9decins g\u00e9n\u00e9ralistes \u00e0 expertise particuli\u00e8re (MEP)", "description": "Nombre de M\u00e9decins g\u00e9n\u00e9ralistes \u00e0 expertise particuli\u00e8re (MEP) dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "M\u00e9decins nucl\u00e9aires": {"name": "M\u00e9decins nucl\u00e9aires", "description": "Nombre de M\u00e9decins nucl\u00e9aires dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "M\u00e9decins pathologistes": {"name": "M\u00e9decins pathologistes", "description": "Nombre de M\u00e9decins pathologistes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Rhumatologues": {"name": "Rhumatologues", "description": "Nombre de Rhumatologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Sages-femmes": {"name": "Sages-femmes", "description": "Nombre de Sages-femmes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "N\u00e9phrologues": {"name": "N\u00e9phrologues", "description": "Nombre de N\u00e9phrologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Neurologues": {"name": "Neurologues", "description": "Nombre de Neurologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Ophtalmologues": {"name": "Ophtalmologues", "description": "Nombre de Ophtalmologues dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "Orthophonistes": {"name": "Orthophonistes", "description": "Nombre de Orthophonistes dans le d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "population_departement": {"name": "population_departement", "description": "Population du d\u00e9partement en 2022", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "latitiude_centre_departement": {"name": "latitiude_centre_departement", "description": "Moyenne des latitudes des communes du d\u00e9partement", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "longitude_centre_departement": {"name": "longitude_centre_departement", "description": "Moyenne des longitudes des communes du d\u00e9partement", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/sante/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.8465393, "relation_name": "\"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"", "raw_code": "{{ config(materialized='table') }}\n\nwith aggreger_effectif_sante_unpivot as (\n\tselect \n\t\tregion,\n\t\tlibelle_region,\n\t\tdepartement,\n\t\tlibelle_departement,\n\t\tprofession_sante,\n\t\tsum(cast(effectif as numeric)) as effectif\n\tFROM {{ source('sources', 'professionels_sante') }}\n\twhere (annee = '2022') and (libelle_departement != 'Tout d\u00e9partement')  and (libelle_departement != 'FRANCE')\n\tgroup by region, departement, libelle_region, libelle_departement, profession_sante\n),\naggreger_effectif_sante_departements as (\n\tselect \n\t\tregion,\n\t\tlibelle_region,\n\t\tdepartement,\n\t\tlibelle_departement,\n\t\t{{ dbt_utils.pivot(\n\t\t\t'profession_sante',\n\t\t\tdbt_utils.get_column_values(source('sources', 'professionels_sante') , 'profession_sante'),\n\t\t\tagg='sum',\n\t\t\tthen_value='effectif'\n\t\t) }}\n  \tFROM aggreger_effectif_sante_unpivot\n\tgroup by region, libelle_region, departement, libelle_departement\n),\ninfos_par_departement as (\n\tselect \n\t\tcode_departement,\n\t\tsum(cast(population as numeric)) as population_departement,\n\t\tavg(commune_latitude) as latitude_centre_departement,\n\t\tavg(commune_longitude) as longitude_centre_departement\n\tfrom {{ ref('geo_communes') }}\n\tgroup by code_departement\n)\n\nselect \n\taggreger_effectif_sante_departements.*,\n\tinfos_par_departement.population_departement,\n\tinfos_par_departement.latitude_centre_departement,\n\tinfos_par_departement.longitude_centre_departement\nfrom aggreger_effectif_sante_departements\nleft join infos_par_departement \non aggreger_effectif_sante_departements.departement = infos_par_departement.code_departement", "language": "sql", "refs": [{"name": "geo_communes", "package": null, "version": null}], "sources": [["sources", "professionels_sante"], ["sources", "professionels_sante"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["source.makeopendata.sources.professionels_sante", "model.makeopendata.geo_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/aggeger_effectifs_sante_departement_2022.sql", "compiled": true, "compiled_code": "\n\nwith aggreger_effectif_sante_unpivot as (\n\tselect \n\t\tregion,\n\t\tlibelle_region,\n\t\tdepartement,\n\t\tlibelle_departement,\n\t\tprofession_sante,\n\t\tsum(cast(effectif as numeric)) as effectif\n\tFROM \"defaultdb\".\"sources\".\"professionels_sante\"\n\twhere (annee = '2022') and (libelle_departement != 'Tout d\u00e9partement')  and (libelle_departement != 'FRANCE')\n\tgroup by region, departement, libelle_region, libelle_departement, profession_sante\n),\naggreger_effectif_sante_departements as (\n\tselect \n\t\tregion,\n\t\tlibelle_region,\n\t\tdepartement,\n\t\tlibelle_departement,\n\t\t\n  \n    sum(\n      \n      case\n      when profession_sante = 'Stomatologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Stomatologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Anesth\u00e9sistes-r\u00e9animateurs'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Anesth\u00e9sistes-r\u00e9animateurs\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Autres m\u00e9decins'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Autres m\u00e9decins\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Cardiologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Cardiologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Chirurgiens'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Chirurgiens\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Chirurgiens-dentistes (hors sp\u00e9cialistes d''orthop\u00e9die dento-faciale - ODF)'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Chirurgiens-dentistes (hors sp\u00e9cialistes d'orthop\u00e9die dento-faciale - ODF)\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Chirurgiens-dentistes sp\u00e9cialistes d''orthop\u00e9die dento-faciale (ODF)'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Chirurgiens-dentistes sp\u00e9cialistes d'orthop\u00e9die dento-faciale (ODF)\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Dermatologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Dermatologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Endocrinologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Endocrinologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ensemble des auxiliaires m\u00e9dicaux'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ensemble des auxiliaires m\u00e9dicaux\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ensemble des chirurgiens-dentistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ensemble des chirurgiens-dentistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ensemble des m\u00e9decins'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ensemble des m\u00e9decins\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ensemble des m\u00e9decins g\u00e9n\u00e9ralistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ensemble des m\u00e9decins g\u00e9n\u00e9ralistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ensemble des m\u00e9decins sp\u00e9cialistes (hors g\u00e9n\u00e9ralistes)'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ensemble des m\u00e9decins sp\u00e9cialistes (hors g\u00e9n\u00e9ralistes)\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Gyn\u00e9cologues m\u00e9dicaux et obst\u00e9triciens'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Gyn\u00e9cologues m\u00e9dicaux et obst\u00e9triciens\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'H\u00e9pato-gastro-ent\u00e9rologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"H\u00e9pato-gastro-ent\u00e9rologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Infirmiers'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Infirmiers\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Masseurs-kin\u00e9sith\u00e9rapeutes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Masseurs-kin\u00e9sith\u00e9rapeutes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'M\u00e9decins g\u00e9n\u00e9ralistes \u00e0 expertise particuli\u00e8re (MEP)'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"M\u00e9decins g\u00e9n\u00e9ralistes \u00e0 expertise particuli\u00e8re (MEP)\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'M\u00e9decins g\u00e9n\u00e9ralistes (hors m\u00e9decins \u00e0 expertise particuli\u00e8re - MEP)'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"M\u00e9decins g\u00e9n\u00e9ralistes (hors m\u00e9decins \u00e0 expertise particuli\u00e8re - MEP)\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'M\u00e9decins nucl\u00e9aires'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"M\u00e9decins nucl\u00e9aires\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'M\u00e9decins pathologistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"M\u00e9decins pathologistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Rhumatologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Rhumatologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Sages-femmes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Sages-femmes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'N\u00e9phrologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"N\u00e9phrologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Neurologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Neurologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Ophtalmologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Ophtalmologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Orthophonistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Orthophonistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Orthoptistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Orthoptistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Oto-rhino-laryngologistes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Oto-rhino-laryngologistes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'P\u00e9diatres'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"P\u00e9diatres\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'P\u00e9dicures-podologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"P\u00e9dicures-podologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Pneumologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Pneumologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Psychiatres'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Psychiatres\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Radiologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Radiologues\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Radioth\u00e9rapeutes'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Radioth\u00e9rapeutes\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'M\u00e9decins vasculaires'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"M\u00e9decins vasculaires\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when profession_sante = 'Allergologues'\n        then effectif\n      else 0\n      end\n    )\n    \n      \n            as \"Allergologues\"\n      \n    \n    \n  \n\n  \tFROM aggreger_effectif_sante_unpivot\n\tgroup by region, libelle_region, departement, libelle_departement\n),\ninfos_par_departement as (\n\tselect \n\t\tcode_departement,\n\t\tsum(cast(population as numeric)) as population_departement,\n\t\tavg(commune_latitude) as latitude_centre_departement,\n\t\tavg(commune_longitude) as longitude_centre_departement\n\tfrom \"defaultdb\".\"prep\".\"geo_communes\"\n\tgroup by code_departement\n)\n\nselect \n\taggreger_effectif_sante_departements.*,\n\tinfos_par_departement.population_departement,\n\tinfos_par_departement.latitude_centre_departement,\n\tinfos_par_departement.longitude_centre_departement\nfrom aggreger_effectif_sante_departements\nleft join infos_par_departement \non aggreger_effectif_sante_departements.departement = infos_par_departement.code_departement", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.decoder_habitat": {"database": "defaultdb", "schema": "prep", "name": "decoder_habitat", "resource_type": "model", "package_name": "makeopendata", "path": "prep/habitat/decoder_habitat.sql", "original_file_path": "models/prep/habitat/decoder_habitat.sql", "unique_id": "model.makeopendata.decoder_habitat", "fqn": ["makeopendata", "prep", "habitat", "decoder_habitat"], "alias": "decoder_habitat", "checksum": {"name": "sha256", "checksum": "076a8fdd15117062876faa8defc48d4998e09a8a23e9a5a55fa532f49a409c51"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit les r\u00e9ponses concernant l'habitat du recenssement des logements, donc 25 millions de logements, avec colonnes et valeurs d\u00e9cod\u00e9es pour une meilleur lisibilit\u00e9 (au prix de taille). Utile pour trouver des corr\u00e9lations \u00e0 l'\u00e9chelle des m\u00e9nages", "columns": {"poids_du_logement": {"name": "poids_du_logement", "description": "Variable cod\u00e9e IPONDL et d\u00e9crite comme Poids du logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_commune_insee": {"name": "code_commune_insee", "description": "Variable cod\u00e9e COMMUNE et d\u00e9crite comme D\u00e9partement et commune du lieu de r\u00e9sidence dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement": {"name": "achevement_construction_logement", "description": "Variable cod\u00e9e ACHL et d\u00e9crite comme P\u00e9riode d'ach\u00e8vement de la construction de la maison ou de l'immeuble dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement": {"name": "annee_regroupe_ammenagement_logement", "description": "Variable cod\u00e9e AEMMR et d\u00e9crite comme Ann\u00e9e d'emm\u00e9nagement dans le logement (regroup\u00e9e) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement": {"name": "aciennete_regroupe_ammenagement_logement", "description": "Variable cod\u00e9e ANEMR et d\u00e9crite comme Anciennet\u00e9 d'emm\u00e9nagement dans le logement (regroup\u00e9e) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "desserte_ascensseur": {"name": "desserte_ascensseur", "description": "Variable cod\u00e9e ASCEN et d\u00e9crite comme Desserte par un ascenseur dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "categorie_logement": {"name": "categorie_logement", "description": "Variable cod\u00e9e CATL et d\u00e9crite comme Cat\u00e9gorie de logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "emplacement_stationnement_reserve": {"name": "emplacement_stationnement_reserve", "description": "Variable cod\u00e9e GARL et d\u00e9crite comme Emplacement r\u00e9serv\u00e9 de stationnement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "logement_hml": {"name": "logement_hml", "description": "Variable cod\u00e9e HLML et d\u00e9crite comme Appartenance du logement \u00e0 un organisme HLM dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "residence_metropole_ou_dom": {"name": "residence_metropole_ou_dom", "description": "Variable cod\u00e9e METRODOM et d\u00e9crite comme Indicateur M\u00e9tropole ou DOM du lieu de r\u00e9sidence dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement": {"name": "nombre_pieces_logement", "description": "Variable cod\u00e9e NBPI et d\u00e9crite comme Nombre de pi\u00e8ces du logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region_residence": {"name": "region_residence", "description": "Variable cod\u00e9e REGION et d\u00e9crite comme R\u00e9gion du lieu de r\u00e9sidence dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "superficie_logement": {"name": "superficie_logement", "description": "Variable cod\u00e9e SURF et d\u00e9crite comme Superficie du logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "type_construction": {"name": "type_construction", "description": "Variable cod\u00e9e TYPC et d\u00e9crite comme Type de construction dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "type_logement": {"name": "type_logement", "description": "Variable cod\u00e9e TYPL et d\u00e9crite comme Type de logement dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "presence_wc_interieur_logement__dom": {"name": "presence_wc_interieur_logement__dom", "description": "Variable cod\u00e9e WC et d\u00e9crite comme Pr\u00e9sence de W.-C. \u00e0 l'int\u00e9rieur du logement (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro": {"name": "chauffage_central_logement__metro", "description": "Variablecod\u00e9e CHFL et d\u00e9crite comme Chauffage central du logement (France m\u00e9tropolitaine) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro": {"name": "combustible_principal_logement__metro", "description": "Variable cod\u00e9e CMBL et d\u00e9crite comme Combustible principal du logement (France m\u00e9tropolitaine) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "baignoire_ou_douche__dom": {"name": "baignoire_ou_douche__dom", "description": "Variable cod\u00e9e BAIN et d\u00e9crite comme Baignoire ou douche (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "aspect_bati__dom": {"name": "aspect_bati__dom", "description": "Variable cod\u00e9e BATI et d\u00e9crite comme Aspect du b\u00e2ti (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chauffage_logement__dom": {"name": "chauffage_logement__dom", "description": "Variable cod\u00e9e CHAU et d\u00e9crite comme Moyen de chauffage du logement (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chauffe_eau_solaire__dom": {"name": "chauffe_eau_solaire__dom", "description": "Variable cod\u00e9e CHOS et d\u00e9crite comme Chauffe-eau solaire (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "min_une_piece_climatise__dom": {"name": "min_une_piece_climatise__dom", "description": "Variable cod\u00e9e CLIM et d\u00e9crite comme Existence d'au moins une pi\u00e8ce climatis\u00e9e (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "cuisine_interieur_avec_evier__dom": {"name": "cuisine_interieur_avec_evier__dom", "description": "Variable cod\u00e9e CUIS et d\u00e9crite comme Cuisine int\u00e9rieure avec \u00e9vier (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nombre_deux_roues_menage__dom": {"name": "nombre_deux_roues_menage__dom", "description": "Variable cod\u00e9e DEROU et d\u00e9crite comme Nombre de deux-roues \u00e0 moteur du m\u00e9nage (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "eau_potabke_interieur_logement__dom": {"name": "eau_potabke_interieur_logement__dom", "description": "Variable cod\u00e9e EAU et d\u00e9crite comme Point d'eau potable \u00e0 l'int\u00e9rieur du logement (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "mode_evacuation_eaux_usagers__dom": {"name": "mode_evacuation_eaux_usagers__dom", "description": "Variable cod\u00e9e EGOUL et d\u00e9crite comme Mode d'\u00e9vacuation des eaux us\u00e9es (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "electricite_logement__dom": {"name": "electricite_logement__dom", "description": "Variable cod\u00e9e ELEC et d\u00e9crite comme \u00c9lectricit\u00e9 dans le logement (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__metro": {"name": "installation_sanitaires__metro", "description": "Variable cod\u00e9e SANI et d\u00e9crite comme Installations sanitaires (France m\u00e9tropolitaine) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__dom": {"name": "installation_sanitaires__dom", "description": "Variable cod\u00e9e SANIDOM et d\u00e9crite comme Installations sanitaires (DOM) dans le fichier source", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/habitat/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1720079267.866968, "relation_name": "\"defaultdb\".\"prep\".\"decoder_habitat\"", "raw_code": "{{ config(materialized='view') }}\n\nWITH logement AS (\n    select * from {{ source('sources', 'logement_2020')}}\n),\ndecode_logement AS (\n    {{ renommer_colonnes_valeurs_logement(logement, 'logement_2020_habitat_codes') }}\n)\n\nSELECT \n    *\nFROM \n    decode_logement", "language": "sql", "refs": [{"name": "logement_2020_habitat_codes", "package": null, "version": null}], "sources": [["sources", "logement_2020"], ["meta", "logement_2020_variables"]], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.renommer_colonnes_valeurs_logement"], "nodes": ["source.makeopendata.sources.logement_2020", "source.makeopendata.meta.logement_2020_variables", "seed.makeopendata.logement_2020_habitat_codes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/habitat/decoder_habitat.sql", "compiled": true, "compiled_code": "\n\nWITH logement AS (\n    select * from \"defaultdb\".\"sources\".\"logement_2020\"\n),\ndecode_logement AS (\n    \n  \n  \n\n  \n\n  \n\n  \n\n  SELECT\n    \n      \n      \n      \n      \n            \n      \n        CASE \"CMBL\"\n          \n            WHEN '1' THEN 'chauffage_urbain'\n          \n            WHEN '2' THEN 'gaz_ville_ou_reseau'\n          \n            WHEN '3' THEN 'fioul_mazout'\n          \n            WHEN '4' THEN 'electricite'\n          \n            WHEN '5' THEN 'gaz_en_bouteilles_ou_en_citerne'\n          \n            WHEN '6' THEN 'autre'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_dom'\n          \n        END as \"combustible_principal_logement__metro\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ASCEN\"\n          \n            WHEN '1' THEN 'avec_ascenseur'\n          \n            WHEN '2' THEN 'sans_ascenseur'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"desserte_ascensseur\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"GARL\"\n          \n            WHEN '1' THEN 'avec_emplacement_s_stationnement'\n          \n            WHEN '2' THEN 'sans_emplacement_stationnement'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"emplacement_stationnement_reserve\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CHFL\"\n          \n            WHEN '1' THEN 'chauffage_central_collectif_y_compris_chauffage_urbain'\n          \n            WHEN '2' THEN 'chauffage_central_individuel_avec_chaudiere_propre_au_logement'\n          \n            WHEN '3' THEN 'chauffage_tout_electrique'\n          \n            WHEN '4' THEN 'autre_moyen_chauffage'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_dom'\n          \n        END as \"chauffage_central_logement__metro\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"IPONDL\" as \"poids_du_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"HLML\"\n          \n            WHEN '1' THEN 'logement_appartenant_a_organisme_hlm'\n          \n            WHEN '2' THEN 'logement_n_appartenant_pas_a_organisme_hlm'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"logement_hml\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"EGOUL\"\n          \n            WHEN '1' THEN 'raccordement_au_reseau_d_egouts'\n          \n            WHEN '2' THEN 'raccordement_a_fosse_septique'\n          \n            WHEN '3' THEN 'raccordement_a_puisard'\n          \n            WHEN '4' THEN 'evacuation_des_eaux_usees_a_meme_le_sol'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"mode_evacuation_eaux_usagers__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CATL\"\n          \n            WHEN '1' THEN 'residences_principales'\n          \n            WHEN '2' THEN 'logements_occasionnels'\n          \n            WHEN '3' THEN 'residences_secondaires'\n          \n            WHEN '4' THEN 'logements_vacants'\n          \n        END as \"categorie_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ANEMR\"\n          \n            WHEN '00' THEN 'moins_2_ans'\n          \n            WHEN '01' THEN 'de_2_a_4_ans'\n          \n            WHEN '02' THEN 'de_5_a_9_ans'\n          \n            WHEN '03' THEN 'de_10_a_19_ans'\n          \n            WHEN '04' THEN 'de_20_a_29_ans'\n          \n            WHEN '05' THEN 'de_30_a_39_ans'\n          \n            WHEN '06' THEN 'de_40_a_49_ans'\n          \n            WHEN '07' THEN 'de_50_a_59_ans'\n          \n            WHEN '08' THEN 'de_60_a_69_ans'\n          \n            WHEN '09' THEN '70_ans_ou_plus'\n          \n            WHEN '99' THEN 'logement_ordinaire_inoccupe'\n          \n        END as \"aciennete_regroupe_ammenagement_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"AEMMR\"\n          \n            WHEN '0' THEN 'logement_ordinaire_inoccupe'\n          \n            WHEN '2' THEN 'emmenagement_entre_1900_et_1919'\n          \n            WHEN '3' THEN 'emmenagement_entre_1920_et_1939'\n          \n            WHEN '4' THEN 'emmenagement_entre_1940_et_1959'\n          \n            WHEN '5' THEN 'emmenagement_entre_1960_et_1969'\n          \n            WHEN '6' THEN 'emmenagement_entre_1970_et_1979'\n          \n            WHEN '7' THEN 'emmenagement_entre_1980_et_1989'\n          \n            WHEN '8' THEN 'emmenagement_entre_1990_et_1999'\n          \n            WHEN '9' THEN 'emmenagement_apres_1999'\n          \n        END as \"annee_regroupe_ammenagement_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"COMMUNE\" as \"code_commune_insee\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CHAU\"\n          \n            WHEN '1' THEN 'presence_moyen_chauffage'\n          \n            WHEN '2' THEN 'absence_moyen_chauffage'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"chauffage_logement__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"SURF\"\n          \n            WHEN '1' THEN 'moins_30'\n          \n            WHEN '2' THEN 'de_30_a_moins_40'\n          \n            WHEN '3' THEN 'de_40_a_moins_60'\n          \n            WHEN '4' THEN 'de_60_a_moins_80'\n          \n            WHEN '5' THEN 'de_80_a_moins_100'\n          \n            WHEN '6' THEN 'de_100_a_moins_120'\n          \n            WHEN '7' THEN '120_ou_plus'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"superficie_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"EAU\"\n          \n            WHEN '1' THEN 'eau_froiseulement'\n          \n            WHEN '2' THEN 'eau_froiet_chaude'\n          \n            WHEN '3' THEN 'aucpoint_d_eau_a_l_interieur_logement'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"eau_potabke_interieur_logement__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"METRODOM\"\n          \n            WHEN 'D' THEN 'dom'\n          \n            WHEN 'M' THEN 'france_metropolitaine'\n          \n        END as \"residence_metropole_ou_dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ELEC\"\n          \n            WHEN '1' THEN 'avec_electricite'\n          \n            WHEN '2' THEN 'sans_electricite'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"electricite_logement__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CLIM\"\n          \n            WHEN '1' THEN 'avec_piece_climatisee'\n          \n            WHEN '2' THEN 'sans_piece_climatisee'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"min_une_piece_climatise__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        \"NBPI\" as \"nombre_pieces_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"BAIN\"\n          \n            WHEN '1' THEN 'avec_baignoire_ou_douche'\n          \n            WHEN '2' THEN 'sans_baignoire_ni_douche'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"baignoire_ou_douche__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"REGION\"\n          \n            WHEN '01' THEN 'guadeloupe'\n          \n            WHEN '02' THEN 'martinique'\n          \n            WHEN '03' THEN 'guyane'\n          \n            WHEN '04' THEN 'la_reunion'\n          \n            WHEN '11' THEN 'ile_france'\n          \n            WHEN '24' THEN 'centre_val_loire'\n          \n            WHEN '27' THEN 'bourgogne_franche_comte'\n          \n            WHEN '28' THEN 'normandie'\n          \n            WHEN '32' THEN 'hauts_france'\n          \n            WHEN '44' THEN 'grand_est'\n          \n            WHEN '52' THEN 'pays_loire'\n          \n            WHEN '53' THEN 'bretagne'\n          \n            WHEN '75' THEN 'nouvelle_aquitaine'\n          \n            WHEN '76' THEN 'occitanie'\n          \n            WHEN '84' THEN 'auvergne_rhone_alpes'\n          \n            WHEN '93' THEN 'provence_alpes_cote_d_azur'\n          \n            WHEN '94' THEN 'corse'\n          \n        END as \"region_residence\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CHOS\"\n          \n            WHEN '1' THEN 'presence_chauffe_eau_solaire'\n          \n            WHEN '2' THEN 'absence_chauffe_eau_solaire'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"chauffe_eau_solaire__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"CUIS\"\n          \n            WHEN '1' THEN 'presence_cuisine_interieure_avec_evier'\n          \n            WHEN '2' THEN 'absence_cuisine_interieure_avec_evier'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"cuisine_interieur_avec_evier__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"SANI\"\n          \n            WHEN '0' THEN 'ni_baignoire'\n          \n            WHEN '1' THEN 'baignoire_ou_douche_hors_piece_reservee'\n          \n            WHEN '2' THEN 'salle_s_bains_avec_douche_ou_baignoire'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_dom'\n          \n        END as \"installation_sanitaires__metro\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"DEROU\"\n          \n            WHEN '0' THEN 'aucdeux_roues_a_moteur'\n          \n            WHEN '1' THEN 'un_seul_deux_roues_a_moteur'\n          \n            WHEN '2' THEN 'deux_deux_roues_a_moteur'\n          \n            WHEN '3' THEN 'trois_deux_roues_a_moteur_ou_plus'\n          \n            WHEN 'X' THEN 'logement_ordinaire_inoccupe_dom'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"nombre_deux_roues_menage__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"BATI\"\n          \n            WHEN '1' THEN 'habitations_fortune'\n          \n            WHEN '2' THEN 'cases_traditionnelles'\n          \n            WHEN '3' THEN 'maisons_ou_immeubles_en_bois'\n          \n            WHEN '4' THEN 'maisons_ou_immeubles_en_dur'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"aspect_bati__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"SANIDOM\"\n          \n            WHEN '11' THEN 'avec_baignoire_ou_douche_et_avec_wc_a_l_interieur'\n          \n            WHEN '12' THEN 'avec_baignoire_ou_douche_mais_sans_wc_a_l_interieur'\n          \n            WHEN '21' THEN 'sans_baignoire_ni_douche_mais_avec_wc_a_l_interieur'\n          \n            WHEN '22' THEN 'sans_baignoire_ni_douche'\n          \n            WHEN 'YY' THEN 'hors_residence_principale'\n          \n            WHEN 'ZZ' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"installation_sanitaires__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"WC\"\n          \n            WHEN '1' THEN 'avec_w._c._a_l_interieur_logement'\n          \n            WHEN '2' THEN 'sans_w._c._a_l_interieur_logement'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n            WHEN 'Z' THEN 'logement_ordinaire_france_metropolitaine'\n          \n        END as \"presence_wc_interieur_logement__dom\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"TYPC\"\n          \n            WHEN '1' THEN 'batiment_d_habitation_seul_logement_isole'\n          \n            WHEN '2' THEN 'batiment_d_habitation_seul_logement_jumele_ou_groupe_toute_autre_facon'\n          \n            WHEN '3' THEN 'batiment_d_habitation_2_logements_ou_plus'\n          \n            WHEN '4' THEN 'batiment_a_usage_autre_qu_habitation'\n          \n            WHEN '5' THEN 'construction_provisoire'\n          \n            WHEN 'Y' THEN 'hors_residence_principale'\n          \n        END as \"type_construction\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"ACHL\"\n          \n            WHEN 'A11' THEN 'avant_1919'\n          \n            WHEN 'A12' THEN 'de_1919_a_1945'\n          \n            WHEN 'B11' THEN 'de_1946_a_1970'\n          \n            WHEN 'B12' THEN 'de_1971_a_1990'\n          \n            WHEN 'C100' THEN 'de_1991_a_2005'\n          \n            WHEN 'C106' THEN 'en_2006'\n          \n            WHEN 'C107' THEN 'en_2007'\n          \n            WHEN 'C108' THEN 'en_2008'\n          \n            WHEN 'C109' THEN 'en_2009'\n          \n            WHEN 'C110' THEN 'en_2010'\n          \n            WHEN 'C111' THEN 'en_2011'\n          \n            WHEN 'C112' THEN 'en_2012'\n          \n            WHEN 'C113' THEN 'en_2013'\n          \n            WHEN 'C114' THEN 'en_2014'\n          \n            WHEN 'C115' THEN 'en_2015'\n          \n            WHEN 'C116' THEN 'en_2016'\n          \n            WHEN 'C117' THEN 'en_2017'\n          \n            WHEN 'C2018' THEN 'en_2018_partiel'\n          \n            WHEN 'C2019' THEN 'en_2019_partiel'\n          \n            WHEN 'C2020' THEN 'en_2020_partiel'\n          \n            WHEN 'C2021' THEN 'en_2021_partiel'\n          \n            WHEN 'C2022' THEN 'en_2022_partiel'\n          \n        END as \"achevement_construction_logement\"\n      \n      \n      \n      , \n    \n      \n      \n      \n      \n            \n      \n        CASE \"TYPL\"\n          \n            WHEN '1' THEN 'maison'\n          \n            WHEN '2' THEN 'appartement'\n          \n            WHEN '3' THEN 'logement_foyer'\n          \n            WHEN '4' THEN 'chambre_d_hotel'\n          \n            WHEN '5' THEN 'habitation_fortune'\n          \n            WHEN '6' THEN 'piece_independante_ayant_sa_propre_entree'\n          \n        END as \"type_logement\"\n      \n      \n      \n      \n    \n  FROM logement\n\n)\n\nSELECT \n    *\nFROM \n    decode_logement", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.makeopendata.aggreger_habitat_communes": {"database": "defaultdb", "schema": "prep", "name": "aggreger_habitat_communes", "resource_type": "model", "package_name": "makeopendata", "path": "prep/habitat/aggreger_habitat_communes.sql", "original_file_path": "models/prep/habitat/aggreger_habitat_communes.sql", "unique_id": "model.makeopendata.aggreger_habitat_communes", "fqn": ["makeopendata", "prep", "habitat", "aggreger_habitat_communes"], "alias": "aggreger_habitat_communes", "checksum": {"name": "sha256", "checksum": "2abf39ba85da64f6d0ecf19de315d620aa48d6b411262b62300c25575379b523"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Fournit une tables avec les informations sur les habitats agr\u00e9g\u00e9es par commune", "columns": {"code_commune_insee": {"name": "code_commune_insee", "description": "code commune. Cl\u00e9 primaire de la table", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "mode_evacuation_eaux_usagers__dom__logement_ordinaire_france_me": {"name": "mode_evacuation_eaux_usagers__dom__logement_ordinaire_france_me", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique mode_evacuation_eaux_usagers \u00e9gale \u00e0 dom__logement_ordinaire_france_me", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_apres_1999": {"name": "annee_regroupe_ammenagement_logement__emmenagement_apres_1999", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_apres_1999", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1900_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1900_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1900_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1920_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1920_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1920_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1940_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1940_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1940_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1960_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1960_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1960_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1970_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1970_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1970_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1980_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1980_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1980_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__emmenagement_entre_1990_e": {"name": "annee_regroupe_ammenagement_logement__emmenagement_entre_1990_e", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 emmenagement_entre_1990_e", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "annee_regroupe_ammenagement_logement__logement_ordinaire_inoccu": {"name": "annee_regroupe_ammenagement_logement__logement_ordinaire_inoccu", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique annee_regroupe_ammenagement_logement \u00e9gale \u00e0 logement_ordinaire_inoccu", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__dom__logement_ordinaire_france_metropo": {"name": "installation_sanitaires__dom__logement_ordinaire_france_metropo", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique installation_sanitaires \u00e9gale \u00e0 dom__logement_ordinaire_france_metropo", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__autre": {"name": "combustible_principal_logement__metro__autre", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__autre", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__chauffage_urbain": {"name": "combustible_principal_logement__metro__chauffage_urbain", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__chauffage_urbain", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__electricite": {"name": "combustible_principal_logement__metro__electricite", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__electricite", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__fioul_mazout": {"name": "combustible_principal_logement__metro__fioul_mazout", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__fioul_mazout", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__gaz_en_bouteilles_ou_en_": {"name": "combustible_principal_logement__metro__gaz_en_bouteilles_ou_en_", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__gaz_en_bouteilles_ou_en_", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__gaz_ville_ou_reseau": {"name": "combustible_principal_logement__metro__gaz_ville_ou_reseau", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__gaz_ville_ou_reseau", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "combustible_principal_logement__metro__hors_residence_principal": {"name": "combustible_principal_logement__metro__hors_residence_principal", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique combustible_principal_logement \u00e9gale \u00e0 metro__hors_residence_principal", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__01": {"name": "nombre_pieces_logement__01", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 01", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__02": {"name": "nombre_pieces_logement__02", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 02", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__03": {"name": "nombre_pieces_logement__03", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 03", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__04": {"name": "nombre_pieces_logement__04", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 04", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__05": {"name": "nombre_pieces_logement__05", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 05", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__06": {"name": "nombre_pieces_logement__06", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 06", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__07": {"name": "nombre_pieces_logement__07", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 07", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__08": {"name": "nombre_pieces_logement__08", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 08", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__09": {"name": "nombre_pieces_logement__09", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 09", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__10": {"name": "nombre_pieces_logement__10", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 10", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__11": {"name": "nombre_pieces_logement__11", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 11", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__12": {"name": "nombre_pieces_logement__12", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 12", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__13": {"name": "nombre_pieces_logement__13", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 13", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__14": {"name": "nombre_pieces_logement__14", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 14", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__15": {"name": "nombre_pieces_logement__15", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 15", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__16": {"name": "nombre_pieces_logement__16", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 16", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__17": {"name": "nombre_pieces_logement__17", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 17", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__18": {"name": "nombre_pieces_logement__18", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 18", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__19": {"name": "nombre_pieces_logement__19", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 19", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__20": {"name": "nombre_pieces_logement__20", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 20", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_logement__YY": {"name": "nombre_pieces_logement__YY", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_pieces_logement \u00e9gale \u00e0 YY", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__120_ou_plus": {"name": "superficie_logement__120_ou_plus", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 120_ou_plus", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__de_100_a_moins_120": {"name": "superficie_logement__de_100_a_moins_120", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 de_100_a_moins_120", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__de_30_a_moins_40": {"name": "superficie_logement__de_30_a_moins_40", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 de_30_a_moins_40", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__de_40_a_moins_60": {"name": "superficie_logement__de_40_a_moins_60", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 de_40_a_moins_60", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__de_60_a_moins_80": {"name": "superficie_logement__de_60_a_moins_80", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 de_60_a_moins_80", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__de_80_a_moins_100": {"name": "superficie_logement__de_80_a_moins_100", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 de_80_a_moins_100", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__hors_residence_principale": {"name": "superficie_logement__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "superficie_logement__moins_30": {"name": "superficie_logement__moins_30", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique superficie_logement \u00e9gale \u00e0 moins_30", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "nombre_deux_roues_menage__dom__logement_ordinaire_france_metrop": {"name": "nombre_deux_roues_menage__dom__logement_ordinaire_france_metrop", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique nombre_deux_roues_menage \u00e9gale \u00e0 dom__logement_ordinaire_france_metrop", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "baignoire_ou_douche__dom__logement_ordinaire_france_metropolita": {"name": "baignoire_ou_douche__dom__logement_ordinaire_france_metropolita", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique baignoire_ou_douche \u00e9gale \u00e0 dom__logement_ordinaire_france_metropolita", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "presence_wc_interieur_logement__dom__logement_ordinaire_france_": {"name": "presence_wc_interieur_logement__dom__logement_ordinaire_france_", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique presence_wc_interieur_logement \u00e9gale \u00e0 dom__logement_ordinaire_france_", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro__autre_moyen_chauffage": {"name": "chauffage_central_logement__metro__autre_moyen_chauffage", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_central_logement \u00e9gale \u00e0 metro__autre_moyen_chauffage", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro__chauffage_central_collectif_": {"name": "chauffage_central_logement__metro__chauffage_central_collectif_", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_central_logement \u00e9gale \u00e0 metro__chauffage_central_collectif_", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro__chauffage_central_individuel": {"name": "chauffage_central_logement__metro__chauffage_central_individuel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_central_logement \u00e9gale \u00e0 metro__chauffage_central_individuel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro__chauffage_tout_electrique": {"name": "chauffage_central_logement__metro__chauffage_tout_electrique", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_central_logement \u00e9gale \u00e0 metro__chauffage_tout_electrique", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_central_logement__metro__hors_residence_principale": {"name": "chauffage_central_logement__metro__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_central_logement \u00e9gale \u00e0 metro__hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "electricite_logement__dom__logement_ordinaire_france_metropolit": {"name": "electricite_logement__dom__logement_ordinaire_france_metropolit", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique electricite_logement \u00e9gale \u00e0 dom__logement_ordinaire_france_metropolit", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "emplacement_stationnement_reserve__avec_emplacement_s_stationne": {"name": "emplacement_stationnement_reserve__avec_emplacement_s_stationne", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique emplacement_stationnement_reserve \u00e9gale \u00e0 avec_emplacement_s_stationne", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "emplacement_stationnement_reserve__hors_residence_principale": {"name": "emplacement_stationnement_reserve__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique emplacement_stationnement_reserve \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "emplacement_stationnement_reserve__sans_emplacement_stationneme": {"name": "emplacement_stationnement_reserve__sans_emplacement_stationneme", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique emplacement_stationnement_reserve \u00e9gale \u00e0 sans_emplacement_stationneme", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "desserte_ascensseur__avec_ascenseur": {"name": "desserte_ascensseur__avec_ascenseur", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique desserte_ascensseur \u00e9gale \u00e0 avec_ascenseur", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "desserte_ascensseur__hors_residence_principale": {"name": "desserte_ascensseur__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique desserte_ascensseur \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "desserte_ascensseur__sans_ascenseur": {"name": "desserte_ascensseur__sans_ascenseur", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique desserte_ascensseur \u00e9gale \u00e0 sans_ascenseur", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aspect_bati__dom__logement_ordinaire_france_metropolitaine": {"name": "aspect_bati__dom__logement_ordinaire_france_metropolitaine", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aspect_bati \u00e9gale \u00e0 dom__logement_ordinaire_france_metropolitaine", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__appartement": {"name": "type_logement__appartement", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 appartement", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__chambre_d_hotel": {"name": "type_logement__chambre_d_hotel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 chambre_d_hotel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__habitation_fortune": {"name": "type_logement__habitation_fortune", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 habitation_fortune", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__logement_foyer": {"name": "type_logement__logement_foyer", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 logement_foyer", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__maison": {"name": "type_logement__maison", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 maison", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_logement__piece_independante_ayant_sa_propre_entree": {"name": "type_logement__piece_independante_ayant_sa_propre_entree", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_logement \u00e9gale \u00e0 piece_independante_ayant_sa_propre_entree", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "cuisine_interieur_avec_evier__dom__logement_ordinaire_france_me": {"name": "cuisine_interieur_avec_evier__dom__logement_ordinaire_france_me", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique cuisine_interieur_avec_evier \u00e9gale \u00e0 dom__logement_ordinaire_france_me", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__batiment_a_usage_autre_qu_habitation": {"name": "type_construction__batiment_a_usage_autre_qu_habitation", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 batiment_a_usage_autre_qu_habitation", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__batiment_d_habitation_2_logements_ou_plus": {"name": "type_construction__batiment_d_habitation_2_logements_ou_plus", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 batiment_d_habitation_2_logements_ou_plus", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__batiment_d_habitation_seul_logement_isole": {"name": "type_construction__batiment_d_habitation_seul_logement_isole", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 batiment_d_habitation_seul_logement_isole", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__batiment_d_habitation_seul_logement_jumele_o": {"name": "type_construction__batiment_d_habitation_seul_logement_jumele_o", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 batiment_d_habitation_seul_logement_jumele_o", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__construction_provisoire": {"name": "type_construction__construction_provisoire", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 construction_provisoire", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "type_construction__hors_residence_principale": {"name": "type_construction__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique type_construction \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "min_une_piece_climatise__dom__logement_ordinaire_france_metropo": {"name": "min_une_piece_climatise__dom__logement_ordinaire_france_metropo", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique min_une_piece_climatise \u00e9gale \u00e0 dom__logement_ordinaire_france_metropo", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "eau_potabke_interieur_logement__dom__logement_ordinaire_france_": {"name": "eau_potabke_interieur_logement__dom__logement_ordinaire_france_", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique eau_potabke_interieur_logement \u00e9gale \u00e0 dom__logement_ordinaire_france_", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__avant_1919": {"name": "achevement_construction_logement__avant_1919", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 avant_1919", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__de_1919_a_1945": {"name": "achevement_construction_logement__de_1919_a_1945", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 de_1919_a_1945", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__de_1946_a_1970": {"name": "achevement_construction_logement__de_1946_a_1970", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 de_1946_a_1970", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__de_1971_a_1990": {"name": "achevement_construction_logement__de_1971_a_1990", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 de_1971_a_1990", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__de_1991_a_2005": {"name": "achevement_construction_logement__de_1991_a_2005", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 de_1991_a_2005", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2006": {"name": "achevement_construction_logement__en_2006", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2006", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2007": {"name": "achevement_construction_logement__en_2007", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2007", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2008": {"name": "achevement_construction_logement__en_2008", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2008", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2009": {"name": "achevement_construction_logement__en_2009", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2009", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2010": {"name": "achevement_construction_logement__en_2010", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2010", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2011": {"name": "achevement_construction_logement__en_2011", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2011", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2012": {"name": "achevement_construction_logement__en_2012", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2012", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2013": {"name": "achevement_construction_logement__en_2013", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2013", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2014": {"name": "achevement_construction_logement__en_2014", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2014", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2015": {"name": "achevement_construction_logement__en_2015", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2015", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2016": {"name": "achevement_construction_logement__en_2016", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2016", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2017": {"name": "achevement_construction_logement__en_2017", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2017", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2018_partiel": {"name": "achevement_construction_logement__en_2018_partiel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2018_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2019_partiel": {"name": "achevement_construction_logement__en_2019_partiel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2019_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2020_partiel": {"name": "achevement_construction_logement__en_2020_partiel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2020_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2021_partiel": {"name": "achevement_construction_logement__en_2021_partiel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2021_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "achevement_construction_logement__en_2022_partiel": {"name": "achevement_construction_logement__en_2022_partiel", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique achevement_construction_logement \u00e9gale \u00e0 en_2022_partiel", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffe_eau_solaire__dom__logement_ordinaire_france_metropolita": {"name": "chauffe_eau_solaire__dom__logement_ordinaire_france_metropolita", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffe_eau_solaire \u00e9gale \u00e0 dom__logement_ordinaire_france_metropolita", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "categorie_logement__logements_occasionnels": {"name": "categorie_logement__logements_occasionnels", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique categorie_logement \u00e9gale \u00e0 logements_occasionnels", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "categorie_logement__logements_vacants": {"name": "categorie_logement__logements_vacants", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique categorie_logement \u00e9gale \u00e0 logements_vacants", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "categorie_logement__residences_principales": {"name": "categorie_logement__residences_principales", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique categorie_logement \u00e9gale \u00e0 residences_principales", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "categorie_logement__residences_secondaires": {"name": "categorie_logement__residences_secondaires", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique categorie_logement \u00e9gale \u00e0 residences_secondaires", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "logement_hml__hors_residence_principale": {"name": "logement_hml__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique logement_hml \u00e9gale \u00e0 hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "logement_hml__logement_appartenant_a_organisme_hlm": {"name": "logement_hml__logement_appartenant_a_organisme_hlm", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique logement_hml \u00e9gale \u00e0 logement_appartenant_a_organisme_hlm", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "logement_hml__logement_n_appartenant_pas_a_organisme_hlm": {"name": "logement_hml__logement_n_appartenant_pas_a_organisme_hlm", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique logement_hml \u00e9gale \u00e0 logement_n_appartenant_pas_a_organisme_hlm", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__70_ans_ou_plus": {"name": "aciennete_regroupe_ammenagement_logement__70_ans_ou_plus", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 70_ans_ou_plus", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_10_a_19_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_10_a_19_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_10_a_19_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_20_a_29_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_20_a_29_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_20_a_29_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_2_a_4_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_2_a_4_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_2_a_4_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_30_a_39_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_30_a_39_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_30_a_39_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_40_a_49_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_40_a_49_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_40_a_49_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_50_a_59_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_50_a_59_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_50_a_59_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_5_a_9_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_5_a_9_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_5_a_9_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__de_60_a_69_ans": {"name": "aciennete_regroupe_ammenagement_logement__de_60_a_69_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 de_60_a_69_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__logement_ordinaire_in": {"name": "aciennete_regroupe_ammenagement_logement__logement_ordinaire_in", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 logement_ordinaire_in", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "aciennete_regroupe_ammenagement_logement__moins_2_ans": {"name": "aciennete_regroupe_ammenagement_logement__moins_2_ans", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique aciennete_regroupe_ammenagement_logement \u00e9gale \u00e0 moins_2_ans", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "residence_metropole_ou_dom__france_metropolitaine": {"name": "residence_metropole_ou_dom__france_metropolitaine", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique residence_metropole_ou_dom \u00e9gale \u00e0 france_metropolitaine", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "chauffage_logement__dom__logement_ordinaire_france_metropolitai": {"name": "chauffage_logement__dom__logement_ordinaire_france_metropolitai", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique chauffage_logement \u00e9gale \u00e0 dom__logement_ordinaire_france_metropolitai", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__metro__baignoire_ou_douche_hors_piece_": {"name": "installation_sanitaires__metro__baignoire_ou_douche_hors_piece_", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique installation_sanitaires \u00e9gale \u00e0 metro__baignoire_ou_douche_hors_piece_", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__metro__hors_residence_principale": {"name": "installation_sanitaires__metro__hors_residence_principale", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique installation_sanitaires \u00e9gale \u00e0 metro__hors_residence_principale", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__metro__ni_baignoire": {"name": "installation_sanitaires__metro__ni_baignoire", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique installation_sanitaires \u00e9gale \u00e0 metro__ni_baignoire", "meta": {}, "data_type": "numeric", "constraints": [], "quote": null, "tags": []}, "installation_sanitaires__metro__salle_s_bains_avec_douche_ou_ba": {"name": "installation_sanitaires__metro__salle_s_bains_avec_douche_ou_ba", "description": "Nombre de m\u00e9nages dans la commune avec la caract\u00e9ristique installation_sanitaires \u00e9gale \u00e0 metro__salle_s_bains_avec_douche_ou_ba", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "data_type:numeric": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "makeopendata://models/prep/habitat/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1720079267.9060218, "relation_name": "\"defaultdb\".\"prep\".\"aggreger_habitat_communes\"", "raw_code": "{{ config(materialized='table') }}\n\n--- Agr\u00e8ge les donn\u00e9es de la base logement par commune\n--- Colonne par colonne pour ne pas saturer la m\u00e9moire\n--- L'agr\u00e9gration est faite par univot/pivot.\n\n{% set colonnes_a_aggreger_list = lister_colonnes_a_aggreger('logement_2020_habitat_codes') %}\n\n\nwith communes as (\n    SELECT \n      code_commune_insee,\n      SUM(CAST(poids_du_logement AS numeric)) AS nombre_de_logements\n    FROM \n      {{ ref('decoder_habitat') }}\n    GROUP BY\n      code_commune_insee\n  ),\n  aggregated as (\n\n    SELECT * \n\n    FROM communes\n\n    {% for colonne_a_aggreger in colonnes_a_aggreger_list %}\n\n      LEFT JOIN ( {{ aggreger_logement_par_colonne('decoder_habitat', colonnes_a_aggreger_list, colonne_a_aggreger) }} )\n      USING (code_commune_insee)\n\n    {% endfor %}\n\n  )\n\nSELECT \n    *  \nFROM\n    aggregated", "language": "sql", "refs": [{"name": "logement_2020_habitat_codes", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}, {"name": "decoder_habitat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.lister_colonnes_a_aggreger", "macro.makeopendata.aggreger_logement_par_colonne"], "nodes": ["seed.makeopendata.logement_2020_habitat_codes", "model.makeopendata.decoder_habitat"]}, "compiled_path": "target/compiled/makeopendata/models/prep/habitat/aggreger_habitat_communes.sql", "compiled": true, "compiled_code": "\n\n--- Agr\u00e8ge les donn\u00e9es de la base logement par commune\n--- Colonne par colonne pour ne pas saturer la m\u00e9moire\n--- L'agr\u00e9gration est faite par univot/pivot.\n\n\n\n\nwith communes as (\n    SELECT \n      code_commune_insee,\n      SUM(CAST(poids_du_logement AS numeric)) AS nombre_de_logements\n    FROM \n      \"defaultdb\".\"prep\".\"decoder_habitat\"\n    GROUP BY\n      code_commune_insee\n  ),\n  aggregated as (\n\n    SELECT * \n\n    FROM communes\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('mode_evacuation_eaux_usagers__dom' as TEXT) as champs,\n      cast(  \n           mode_evacuation_eaux_usagers__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__evacuation_des_eaux_usees_a_meme_le_sol'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__evacuation_des_eaux_usees_a_meme_le_sol\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__raccordement_a_fosse_septique'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__raccordement_a_fosse_septique\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__raccordement_a_puisard'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__raccordement_a_puisard\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'mode_evacuation_eaux_usagers__dom__raccordement_au_reseau_d_egouts'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"mode_evacuation_eaux_usagers__dom__raccordement_au_reseau_d_egouts\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('annee_regroupe_ammenagement_logement' as TEXT) as champs,\n      cast(  \n           annee_regroupe_ammenagement_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_apres_1999'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_apres_1999\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1900_et_1919'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1900_et_1919\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1920_et_1939'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1920_et_1939\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1940_et_1959'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1940_et_1959\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1960_et_1969'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1960_et_1969\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1970_et_1979'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1970_et_1979\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1980_et_1989'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1980_et_1989\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__emmenagement_entre_1990_et_1999'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__emmenagement_entre_1990_et_1999\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'annee_regroupe_ammenagement_logement__logement_ordinaire_inoccupe'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"annee_regroupe_ammenagement_logement__logement_ordinaire_inoccupe\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('installation_sanitaires__dom' as TEXT) as champs,\n      cast(  \n           installation_sanitaires__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__avec_baignoire_ou_douche_et_avec_wc_a_l_interieur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__avec_baignoire_ou_douche_et_avec_wc_a_l_interieur\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__avec_baignoire_ou_douche_mais_sans_wc_a_l_interieur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__avec_baignoire_ou_douche_mais_sans_wc_a_l_interieur\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__sans_baignoire_ni_douche'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__sans_baignoire_ni_douche\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__dom__sans_baignoire_ni_douche_mais_avec_wc_a_l_interieur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__dom__sans_baignoire_ni_douche_mais_avec_wc_a_l_interieur\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('combustible_principal_logement__metro' as TEXT) as champs,\n      cast(  \n           combustible_principal_logement__metro\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__autre'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__autre\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__chauffage_urbain'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__chauffage_urbain\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__electricite'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__electricite\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__fioul_mazout'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__fioul_mazout\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__gaz_en_bouteilles_ou_en_citerne'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__gaz_en_bouteilles_ou_en_citerne\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__gaz_ville_ou_reseau'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__gaz_ville_ou_reseau\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'combustible_principal_logement__metro__logement_ordinaire_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"combustible_principal_logement__metro__logement_ordinaire_dom\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('nombre_pieces_logement' as TEXT) as champs,\n      cast(  \n           nombre_pieces_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__01'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__01\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__02'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__02\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__03'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__03\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__04'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__04\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__05'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__05\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__06'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__06\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__07'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__07\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__08'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__08\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__09'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__09\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__10'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__10\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__11'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__11\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__12'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__12\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__13'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__13\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__14'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__14\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__15'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__15\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__16'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__16\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__17'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__18'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__18\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__19'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__19\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__20'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__20\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_pieces_logement__YY'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_pieces_logement__YY\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('superficie_logement' as TEXT) as champs,\n      cast(  \n           superficie_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__120_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__120_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__de_100_a_moins_120'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__de_100_a_moins_120\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__de_30_a_moins_40'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__de_30_a_moins_40\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__de_40_a_moins_60'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__de_40_a_moins_60\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__de_60_a_moins_80'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__de_60_a_moins_80\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__de_80_a_moins_100'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__de_80_a_moins_100\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'superficie_logement__moins_30'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"superficie_logement__moins_30\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('nombre_deux_roues_menage__dom' as TEXT) as champs,\n      cast(  \n           nombre_deux_roues_menage__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__aucdeux_roues_a_moteur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__aucdeux_roues_a_moteur\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__deux_deux_roues_a_moteur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__deux_deux_roues_a_moteur\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__logement_ordinaire_inoccupe_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__logement_ordinaire_inoccupe_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__trois_deux_roues_a_moteur_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__trois_deux_roues_a_moteur_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'nombre_deux_roues_menage__dom__un_seul_deux_roues_a_moteur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"nombre_deux_roues_menage__dom__un_seul_deux_roues_a_moteur\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('baignoire_ou_douche__dom' as TEXT) as champs,\n      cast(  \n           baignoire_ou_douche__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'baignoire_ou_douche__dom__avec_baignoire_ou_douche'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"baignoire_ou_douche__dom__avec_baignoire_ou_douche\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'baignoire_ou_douche__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"baignoire_ou_douche__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'baignoire_ou_douche__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"baignoire_ou_douche__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'baignoire_ou_douche__dom__sans_baignoire_ni_douche'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"baignoire_ou_douche__dom__sans_baignoire_ni_douche\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('presence_wc_interieur_logement__dom' as TEXT) as champs,\n      cast(  \n           presence_wc_interieur_logement__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'presence_wc_interieur_logement__dom__avec_w._c._a_l_interieur_logement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"presence_wc_interieur_logement__dom__avec_w._c._a_l_interieur_logement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'presence_wc_interieur_logement__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"presence_wc_interieur_logement__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'presence_wc_interieur_logement__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"presence_wc_interieur_logement__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'presence_wc_interieur_logement__dom__sans_w._c._a_l_interieur_logement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"presence_wc_interieur_logement__dom__sans_w._c._a_l_interieur_logement\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('chauffage_central_logement__metro' as TEXT) as champs,\n      cast(  \n           chauffage_central_logement__metro\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__autre_moyen_chauffage'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__autre_moyen_chauffage\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__chauffage_central_collectif_y_compris_chauffage_urbain'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__chauffage_central_collectif_y_compris_chauffage_urbain\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__chauffage_central_individuel_avec_chaudiere_propre_au_logement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__chauffage_central_individuel_avec_chaudiere_propre_au_logement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__chauffage_tout_electrique'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__chauffage_tout_electrique\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_central_logement__metro__logement_ordinaire_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_central_logement__metro__logement_ordinaire_dom\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('electricite_logement__dom' as TEXT) as champs,\n      cast(  \n           electricite_logement__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'electricite_logement__dom__avec_electricite'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"electricite_logement__dom__avec_electricite\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'electricite_logement__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"electricite_logement__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'electricite_logement__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"electricite_logement__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'electricite_logement__dom__sans_electricite'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"electricite_logement__dom__sans_electricite\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('emplacement_stationnement_reserve' as TEXT) as champs,\n      cast(  \n           emplacement_stationnement_reserve\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'emplacement_stationnement_reserve__avec_emplacement_s_stationnement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"emplacement_stationnement_reserve__avec_emplacement_s_stationnement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'emplacement_stationnement_reserve__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"emplacement_stationnement_reserve__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'emplacement_stationnement_reserve__sans_emplacement_stationnement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"emplacement_stationnement_reserve__sans_emplacement_stationnement\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('desserte_ascensseur' as TEXT) as champs,\n      cast(  \n           desserte_ascensseur\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'desserte_ascensseur__avec_ascenseur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"desserte_ascensseur__avec_ascenseur\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'desserte_ascensseur__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"desserte_ascensseur__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'desserte_ascensseur__sans_ascenseur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"desserte_ascensseur__sans_ascenseur\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('aspect_bati__dom' as TEXT) as champs,\n      cast(  \n           aspect_bati__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__cases_traditionnelles'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__cases_traditionnelles\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__habitations_fortune'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__habitations_fortune\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__maisons_ou_immeubles_en_bois'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__maisons_ou_immeubles_en_bois\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aspect_bati__dom__maisons_ou_immeubles_en_dur'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aspect_bati__dom__maisons_ou_immeubles_en_dur\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('type_logement' as TEXT) as champs,\n      cast(  \n           type_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__appartement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__appartement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__chambre_d_hotel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__chambre_d_hotel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__habitation_fortune'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__habitation_fortune\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__logement_foyer'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__logement_foyer\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__maison'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__maison\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_logement__piece_independante_ayant_sa_propre_entree'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_logement__piece_independante_ayant_sa_propre_entree\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('cuisine_interieur_avec_evier__dom' as TEXT) as champs,\n      cast(  \n           cuisine_interieur_avec_evier__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'cuisine_interieur_avec_evier__dom__absence_cuisine_interieure_avec_evier'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"cuisine_interieur_avec_evier__dom__absence_cuisine_interieure_avec_evier\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'cuisine_interieur_avec_evier__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"cuisine_interieur_avec_evier__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'cuisine_interieur_avec_evier__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"cuisine_interieur_avec_evier__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'cuisine_interieur_avec_evier__dom__presence_cuisine_interieure_avec_evier'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"cuisine_interieur_avec_evier__dom__presence_cuisine_interieure_avec_evier\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('type_construction' as TEXT) as champs,\n      cast(  \n           type_construction\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__batiment_a_usage_autre_qu_habitation'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__batiment_a_usage_autre_qu_habitation\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__batiment_d_habitation_2_logements_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__batiment_d_habitation_2_logements_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__batiment_d_habitation_seul_logement_isole'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__batiment_d_habitation_seul_logement_isole\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__batiment_d_habitation_seul_logement_jumele_ou_groupe_toute_autre_facon'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__batiment_d_habitation_seul_logement_jumele_ou_groupe_toute_autre_facon\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__construction_provisoire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__construction_provisoire\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'type_construction__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"type_construction__hors_residence_principale\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('min_une_piece_climatise__dom' as TEXT) as champs,\n      cast(  \n           min_une_piece_climatise__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'min_une_piece_climatise__dom__avec_piece_climatisee'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"min_une_piece_climatise__dom__avec_piece_climatisee\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'min_une_piece_climatise__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"min_une_piece_climatise__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'min_une_piece_climatise__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"min_une_piece_climatise__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'min_une_piece_climatise__dom__sans_piece_climatisee'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"min_une_piece_climatise__dom__sans_piece_climatisee\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('eau_potabke_interieur_logement__dom' as TEXT) as champs,\n      cast(  \n           eau_potabke_interieur_logement__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'eau_potabke_interieur_logement__dom__aucpoint_d_eau_a_l_interieur_logement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"eau_potabke_interieur_logement__dom__aucpoint_d_eau_a_l_interieur_logement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'eau_potabke_interieur_logement__dom__eau_froiet_chaude'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"eau_potabke_interieur_logement__dom__eau_froiet_chaude\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'eau_potabke_interieur_logement__dom__eau_froiseulement'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"eau_potabke_interieur_logement__dom__eau_froiseulement\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'eau_potabke_interieur_logement__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"eau_potabke_interieur_logement__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'eau_potabke_interieur_logement__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"eau_potabke_interieur_logement__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('achevement_construction_logement' as TEXT) as champs,\n      cast(  \n           achevement_construction_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__avant_1919'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__avant_1919\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__de_1919_a_1945'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__de_1919_a_1945\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__de_1946_a_1970'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__de_1946_a_1970\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__de_1971_a_1990'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__de_1971_a_1990\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__de_1991_a_2005'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__de_1991_a_2005\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2006'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2006\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2007'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2007\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2008'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2008\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2009'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2009\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2010'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2010\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2011'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2011\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2012'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2012\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2013'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2013\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2014'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2014\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2015'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2015\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2016'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2016\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2017'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2017\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2018_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2018_partiel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2019_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2019_partiel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2020_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2020_partiel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2021_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2021_partiel\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'achevement_construction_logement__en_2022_partiel'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"achevement_construction_logement__en_2022_partiel\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('chauffe_eau_solaire__dom' as TEXT) as champs,\n      cast(  \n           chauffe_eau_solaire__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffe_eau_solaire__dom__absence_chauffe_eau_solaire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffe_eau_solaire__dom__absence_chauffe_eau_solaire\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffe_eau_solaire__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffe_eau_solaire__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffe_eau_solaire__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffe_eau_solaire__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffe_eau_solaire__dom__presence_chauffe_eau_solaire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffe_eau_solaire__dom__presence_chauffe_eau_solaire\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('categorie_logement' as TEXT) as champs,\n      cast(  \n           categorie_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'categorie_logement__logements_occasionnels'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"categorie_logement__logements_occasionnels\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'categorie_logement__logements_vacants'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"categorie_logement__logements_vacants\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'categorie_logement__residences_principales'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"categorie_logement__residences_principales\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'categorie_logement__residences_secondaires'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"categorie_logement__residences_secondaires\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('logement_hml' as TEXT) as champs,\n      cast(  \n           logement_hml\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'logement_hml__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"logement_hml__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'logement_hml__logement_appartenant_a_organisme_hlm'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"logement_hml__logement_appartenant_a_organisme_hlm\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'logement_hml__logement_n_appartenant_pas_a_organisme_hlm'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"logement_hml__logement_n_appartenant_pas_a_organisme_hlm\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('aciennete_regroupe_ammenagement_logement' as TEXT) as champs,\n      cast(  \n           aciennete_regroupe_ammenagement_logement\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__70_ans_ou_plus'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__70_ans_ou_plus\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_10_a_19_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_10_a_19_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_20_a_29_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_20_a_29_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_2_a_4_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_2_a_4_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_30_a_39_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_30_a_39_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_40_a_49_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_40_a_49_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_50_a_59_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_50_a_59_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_5_a_9_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_5_a_9_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__de_60_a_69_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__de_60_a_69_ans\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__logement_ordinaire_inoccupe'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__logement_ordinaire_inoccupe\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'aciennete_regroupe_ammenagement_logement__moins_2_ans'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"aciennete_regroupe_ammenagement_logement__moins_2_ans\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('residence_metropole_ou_dom' as TEXT) as champs,\n      cast(  \n           residence_metropole_ou_dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_metropole_ou_dom__dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_metropole_ou_dom__dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'residence_metropole_ou_dom__france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"residence_metropole_ou_dom__france_metropolitaine\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n    \n      \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('chauffage_logement__dom' as TEXT) as champs,\n      cast(  \n           chauffage_logement__dom\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_logement__dom__absence_moyen_chauffage'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_logement__dom__absence_moyen_chauffage\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_logement__dom__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_logement__dom__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_logement__dom__logement_ordinaire_france_metropolitaine'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_logement__dom__logement_ordinaire_france_metropolitaine\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'chauffage_logement__dom__presence_moyen_chauffage'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"chauffage_logement__dom__presence_moyen_chauffage\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n      LEFT JOIN (     \n\n\nwith unpivoted as (\n      \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n      \n    \n  \n    \n  \n\n    select\n        code_commune_insee,\n        poids_du_logement,\n\n      cast('installation_sanitaires__metro' as TEXT) as champs,\n      cast(  \n           installation_sanitaires__metro\n             \n           as varchar) as valeur\n\n    from \"defaultdb\".\"prep\".\"decoder_habitat\"\n\n    \n\n), \nconcatenated as (\n        \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n\n),\ndeduplicated as (\n        \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n\n),\npivoted as (\n        \n\n\n\n\n\n    select \n\n    code_commune_insee,\n    \n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__metro__baignoire_ou_douche_hors_piece_reservee'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__metro__baignoire_ou_douche_hors_piece_reservee\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__metro__hors_residence_principale'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__metro__hors_residence_principale\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__metro__logement_ordinaire_dom'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__metro__logement_ordinaire_dom\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__metro__ni_baignoire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__metro__ni_baignoire\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when champs__valeur = 'installation_sanitaires__metro__salle_s_bains_avec_douche_ou_baignoire'\n        then population_par_commune_champs_valeur\n      else 0\n      end\n    )\n    \n      \n            as \"installation_sanitaires__metro__salle_s_bains_avec_douche_ou_baignoire\"\n      \n    \n    \n  \n\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n\n)\n\nselect * from pivoted\n )\n      USING (code_commune_insee)\n\n    \n\n  )\n\nSELECT \n    *  \nFROM\n    aggregated", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.makeopendata.multiple_com_per_cp": {"database": "defaultdb", "schema": "prep", "name": "multiple_com_per_cp", "resource_type": "analysis", "package_name": "makeopendata", "path": "analysis/geo/multiple_com_per_cp.sql", "original_file_path": "analyses/geo/multiple_com_per_cp.sql", "unique_id": "analysis.makeopendata.multiple_com_per_cp", "fqn": ["makeopendata", "analysis", "geo", "multiple_com_per_cp"], "alias": "multiple_com_per_cp", "checksum": {"name": "sha256", "checksum": "451d4658978362ab4a2b09ce7ac753612644560bf9297d5add47f340ef2d3c4e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.1380343, "relation_name": null, "raw_code": "--- Montre les codes postaux qui ont plusieurs codes communes\n\nSELECT code_postal, ARRAY_AGG(DISTINCT code_commune_insee) as communes\nFROM {{ source('sources', 'cog_poste')}} \nGROUP BY code_postal\nHAVING COUNT(DISTINCT code_commune_insee) > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_poste"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_poste"]}, "compiled_path": "target/compiled/makeopendata/analyses/geo/multiple_com_per_cp.sql", "compiled": true, "compiled_code": "--- Montre les codes postaux qui ont plusieurs codes communes\n\nSELECT code_postal, ARRAY_AGG(DISTINCT code_commune_insee) as communes\nFROM \"defaultdb\".\"sources\".\"cog_poste\" \nGROUP BY code_postal\nHAVING COUNT(DISTINCT code_commune_insee) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.makeopendata.multiple_cp_per_com": {"database": "defaultdb", "schema": "prep", "name": "multiple_cp_per_com", "resource_type": "analysis", "package_name": "makeopendata", "path": "analysis/geo/multiple_cp_per_com.sql", "original_file_path": "analyses/geo/multiple_cp_per_com.sql", "unique_id": "analysis.makeopendata.multiple_cp_per_com", "fqn": ["makeopendata", "analysis", "geo", "multiple_cp_per_com"], "alias": "multiple_cp_per_com", "checksum": {"name": "sha256", "checksum": "6c4c2f57160ce6bfd629dcfa304f0b55bf4be3ea642e42b558cce8e8891fb78c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.142447, "relation_name": null, "raw_code": "--- Montre les communes qui ont plusieurs codes postaux\n\nSELECT code_commune_insee, ARRAY_AGG(DISTINCT code_postal) as postal_codes\nFROM {{ source('sources', 'cog_poste')}} \nGROUP BY code_commune_insee\nHAVING COUNT(DISTINCT code_postal) > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_poste"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_poste"]}, "compiled_path": "target/compiled/makeopendata/analyses/geo/multiple_cp_per_com.sql", "compiled": true, "compiled_code": "--- Montre les communes qui ont plusieurs codes postaux\n\nSELECT code_commune_insee, ARRAY_AGG(DISTINCT code_postal) as postal_codes\nFROM \"defaultdb\".\"sources\".\"cog_poste\" \nGROUP BY code_commune_insee\nHAVING COUNT(DISTINCT code_postal) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.makeopendata.multiple_agg_per_cp": {"database": "defaultdb", "schema": "prep", "name": "multiple_agg_per_cp", "resource_type": "analysis", "package_name": "makeopendata", "path": "analysis/geo/multiple_agg_per_cp.sql", "original_file_path": "analyses/geo/multiple_agg_per_cp.sql", "unique_id": "analysis.makeopendata.multiple_agg_per_cp", "fqn": ["makeopendata", "analysis", "geo", "multiple_agg_per_cp"], "alias": "multiple_agg_per_cp", "checksum": {"name": "sha256", "checksum": "339aaa9f04da1fa66acbdf7066b58d3012ef4660908ff631753919973738ccf1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.1465938, "relation_name": null, "raw_code": "-- Les departements et les r\u00e9gions sont donn\u00e9es par commune\n-- Il existe plusieurs codes postaux pour une commune et plusieurs communes pour un code postal\n-- Il convient de v\u00e9rifier que pour un code postal donn\u00e9, apr\u00e8s fusion avec la table communes,\n-- Il n'y a pas qu'un seul arrondissement, un seul d\u00e9partement et une seule r\u00e9gion\nwith merged_data as (\n    select\n        LPAD(CAST(cp.code_postal AS TEXT), 5, '0') as code_postal,\n        -- cc.\"ARR\" as code_arrondissement,\n        cc.departement as code_departement,\n        cc.region as code_region\n    from {{ source('sources', 'cog_poste')}} cp\n    inner join {{ source('sources', 'cog_communes')}} cc on cp.code_commune_insee = cc.\"COM\" and cc.\"TYPECOM\" = 'COM'\n    -- Remplacer par left join \u00e0 l'inclusions des territoire d'outre mer TOM \n    -- Puisque les codes communes ne sont pas renseign\u00e9s pour ces territoires dans codes_geographiques_communes\n    -- La R\u00e9union est une region d'outre, mais pas un territoire d'outre mer, d\u00e8s lors elle est incluse dans les codes_geographiques_communes\n),\n\ncounts as (\n    select \n        code_postal,\n        --count(distinct code_arrondissement) as num_arr,\n        count(distinct code_departement) as num_dep,\n        count(distinct code_region) as num_reg\n    from merged_data\n    group by code_postal\n)\n\nselect *\nfrom counts\nwhere num_dep > 1 or num_reg > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_poste"], ["sources", "cog_communes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_poste", "source.makeopendata.sources.cog_communes"]}, "compiled_path": "target/compiled/makeopendata/analyses/geo/multiple_agg_per_cp.sql", "compiled": true, "compiled_code": "-- Les departements et les r\u00e9gions sont donn\u00e9es par commune\n-- Il existe plusieurs codes postaux pour une commune et plusieurs communes pour un code postal\n-- Il convient de v\u00e9rifier que pour un code postal donn\u00e9, apr\u00e8s fusion avec la table communes,\n-- Il n'y a pas qu'un seul arrondissement, un seul d\u00e9partement et une seule r\u00e9gion\nwith merged_data as (\n    select\n        LPAD(CAST(cp.code_postal AS TEXT), 5, '0') as code_postal,\n        -- cc.\"ARR\" as code_arrondissement,\n        cc.departement as code_departement,\n        cc.region as code_region\n    from \"defaultdb\".\"sources\".\"cog_poste\" cp\n    inner join \"defaultdb\".\"sources\".\"cog_communes\" cc on cp.code_commune_insee = cc.\"COM\" and cc.\"TYPECOM\" = 'COM'\n    -- Remplacer par left join \u00e0 l'inclusions des territoire d'outre mer TOM \n    -- Puisque les codes communes ne sont pas renseign\u00e9s pour ces territoires dans codes_geographiques_communes\n    -- La R\u00e9union est une region d'outre, mais pas un territoire d'outre mer, d\u00e8s lors elle est incluse dans les codes_geographiques_communes\n),\n\ncounts as (\n    select \n        code_postal,\n        --count(distinct code_arrondissement) as num_arr,\n        count(distinct code_departement) as num_dep,\n        count(distinct code_region) as num_reg\n    from merged_data\n    group by code_postal\n)\n\nselect *\nfrom counts\nwhere num_dep > 1 or num_reg > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.makeopendata.sanity_check_habitat": {"database": "defaultdb", "schema": "prep", "name": "sanity_check_habitat", "resource_type": "analysis", "package_name": "makeopendata", "path": "analysis/population/sanity_check_habitat.sql", "original_file_path": "analyses/population/sanity_check_habitat.sql", "unique_id": "analysis.makeopendata.sanity_check_habitat", "fqn": ["makeopendata", "analysis", "population", "sanity_check_habitat"], "alias": "sanity_check_habitat", "checksum": {"name": "sha256", "checksum": "c90c9491b255d08239706b37003fe41cc9ca6575b38de61671cc0c44cf3e95d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.1511226, "relation_name": null, "raw_code": "-- V\u00e9rifier que certaines quantit\u00e9s sont conformes par rapport aux dossier de l'INSEE\n-- Par exemple Montpellier, code commune 34172\n\nselect \n\tnombre_de_logements,\n\ttype_logement__appartement,\n\ttype_logement__maison\nfrom {{ ref('aggreger_habitat_communes') }}\nwhere code_commune_insee = '34172'\n\n-- Nombre_de_logements, type_logement__appartement,type_logement__maison\n-- 177110.492716640209757\t153388.053005437629254\t20926.742388919034265\n\n\n-- Les m\u00eames que les chiffres de l'INSEE pour Montpellier\n-- https://www.insee.fr/fr/statistiques/2011101?geo=COM-34172#consulter-sommaire", "language": "sql", "refs": [{"name": "aggreger_habitat_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.makeopendata.aggreger_habitat_communes"]}, "compiled_path": "target/compiled/makeopendata/analyses/population/sanity_check_habitat.sql", "compiled": true, "compiled_code": "-- V\u00e9rifier que certaines quantit\u00e9s sont conformes par rapport aux dossier de l'INSEE\n-- Par exemple Montpellier, code commune 34172\n\nselect \n\tnombre_de_logements,\n\ttype_logement__appartement,\n\ttype_logement__maison\nfrom \"defaultdb\".\"prep\".\"aggreger_habitat_communes\"\nwhere code_commune_insee = '34172'\n\n-- Nombre_de_logements, type_logement__appartement,type_logement__maison\n-- 177110.492716640209757\t153388.053005437629254\t20926.742388919034265\n\n\n-- Les m\u00eames que les chiffres de l'INSEE pour Montpellier\n-- https://www.insee.fr/fr/statistiques/2011101?geo=COM-34172#consulter-sommaire", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.makeopendata.sanity_check_demographie": {"database": "defaultdb", "schema": "prep", "name": "sanity_check_demographie", "resource_type": "analysis", "package_name": "makeopendata", "path": "analysis/population/sanity_check_demographie.sql", "original_file_path": "analyses/population/sanity_check_demographie.sql", "unique_id": "analysis.makeopendata.sanity_check_demographie", "fqn": ["makeopendata", "analysis", "population", "sanity_check_demographie"], "alias": "sanity_check_demographie", "checksum": {"name": "sha256", "checksum": "62a79d813a1abcb0f7f19f14e27b0979eb30bfa849ae90476c2434887fb052d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.1551986, "relation_name": null, "raw_code": "-- V\u00e9rifier que certaines quantit\u00e9s sont conformes par rapport aux dossier de l'INSEE\n-- Par exemple Montpellier, code commune 34172\n\nselect \n\tstatus_conjugal_pr__celibataire / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_celibataires,\n\tstatus_conjugal_pr__divorce_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_divorce,\n\tstatus_conjugal_pr__en_concubinage_ou_union_libre / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_concubinage_union_libre,\n\tstatus_conjugal_pr__marie_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_marie,\n\tstatus_conjugal_pr__pacse_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_pacse,\n\tstatus_conjugal_pr__veuf_veuve / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_veuf\nfrom {{ ref('aggreger_demographie_communes') }}\nwhere code_commune_insee = '34172'\n\n-- proportions_celibataires, proportions_divorce, proportions_concubinage_union_libre, proportions_marie, proportions_pacse, proportions_veuf\n-- 0.45271001407013124149\t0.11121578101415645350\t0.10832617037363749454\t0.23182251308921670739\t0.03850035728419874230\t0.05742516416865936078\n\n-- Semblables aux chiffres de l'INSEE pour Montpellier \n-- FAMG4 : https://www.insee.fr/fr/statistiques/2011101?geo=COM-34172#consulter-sommaire\n\n-- Ici hypoth\u00e8se qu'un m\u00e9nage = un logement hors r\u00e9sidence de grandeur. Pas forc\u00e9ment le cas.\n-- A appronfondir : https://www.insee.fr/fr/information/2383177", "language": "sql", "refs": [{"name": "aggreger_demographie_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.makeopendata.aggreger_demographie_communes"]}, "compiled_path": "target/compiled/makeopendata/analyses/population/sanity_check_demographie.sql", "compiled": true, "compiled_code": "-- V\u00e9rifier que certaines quantit\u00e9s sont conformes par rapport aux dossier de l'INSEE\n-- Par exemple Montpellier, code commune 34172\n\nselect \n\tstatus_conjugal_pr__celibataire / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_celibataires,\n\tstatus_conjugal_pr__divorce_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_divorce,\n\tstatus_conjugal_pr__en_concubinage_ou_union_libre / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_concubinage_union_libre,\n\tstatus_conjugal_pr__marie_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_marie,\n\tstatus_conjugal_pr__pacse_e / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_pacse,\n\tstatus_conjugal_pr__veuf_veuve / (nombre_de_logements - status_conjugal_pr__hors_residence_principale) as proportions_veuf\nfrom \"defaultdb\".\"prep\".\"aggreger_demographie_communes\"\nwhere code_commune_insee = '34172'\n\n-- proportions_celibataires, proportions_divorce, proportions_concubinage_union_libre, proportions_marie, proportions_pacse, proportions_veuf\n-- 0.45271001407013124149\t0.11121578101415645350\t0.10832617037363749454\t0.23182251308921670739\t0.03850035728419874230\t0.05742516416865936078\n\n-- Semblables aux chiffres de l'INSEE pour Montpellier \n-- FAMG4 : https://www.insee.fr/fr/statistiques/2011101?geo=COM-34172#consulter-sommaire\n\n-- Ici hypoth\u00e8se qu'un m\u00e9nage = un logement hors r\u00e9sidence de grandeur. Pas forc\u00e9ment le cas.\n-- A appronfondir : https://www.insee.fr/fr/information/2383177", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.test_knn": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "test_knn", "resource_type": "test", "package_name": "makeopendata", "path": "macros/test_knn.sql", "original_file_path": "tests/macros/test_knn.sql", "unique_id": "test.makeopendata.test_knn", "fqn": ["makeopendata", "macros", "test_knn"], "alias": "test_knn", "checksum": {"name": "sha256", "checksum": "72048d86ae5d7b3c219d0e98d76d64d624cdf15f45e5be32e7bc24597f698612"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.2342184, "relation_name": null, "raw_code": "-- depends_on: {{ ref('fake_knn_data') }}\n\n-- Define expected values\nWITH expected AS (\n    SELECT 1 AS id, 250 AS expected_valeur UNION ALL\n    SELECT 3,       200 UNION ALL\n    SELECT 2,       150 UNION ALL\n    SELECT 4,       300 UNION ALL\n    SELECT 6,       250\n),\n\n-- Calculate knn for each row in the fake table\ncomputed AS (\n    {{ calculate_geo_knn('fake_knn_data', 'id', 'latitude', 'longitude', 'valeur', 2) }}\n)\n\n-- Compare computed and expected values\nSELECT \n    computed.id, \n    computed.mean_knn_value AS computed_valeur, \n    expected.expected_valeur\nFROM \n    computed\n    JOIN expected ON computed.id = expected.id\nWHERE\n    computed.mean_knn_value != expected.expected_valeur", "language": "sql", "refs": [{"name": "fake_knn_data", "package": null, "version": null}, {"name": "fake_knn_data", "package": null, "version": null}, {"name": "fake_knn_data", "package": null, "version": null}, {"name": "fake_knn_data", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.makeopendata.calculate_geo_knn"], "nodes": ["model.makeopendata.fake_knn_data"]}, "compiled_path": "target/compiled/makeopendata/tests/macros/test_knn.sql", "compiled": true, "compiled_code": "-- depends_on: \"defaultdb\".\"prep\".\"fake_knn_data\"\n\n-- Define expected values\nWITH expected AS (\n    SELECT 1 AS id, 250 AS expected_valeur UNION ALL\n    SELECT 3,       200 UNION ALL\n    SELECT 2,       150 UNION ALL\n    SELECT 4,       300 UNION ALL\n    SELECT 6,       250\n),\n\n-- Calculate knn for each row in the fake table\ncomputed AS (\n    \nWITH knn AS (\n    SELECT \n        a.id AS id,\n        AVG(b.valeur) AS mean_knn_value\n    FROM \n        \"defaultdb\".\"prep\".\"fake_knn_data\" a\n        JOIN LATERAL (\n            SELECT valeur\n            FROM \"defaultdb\".\"prep\".\"fake_knn_data\"\n            WHERE id != a.id\n            ORDER BY ST_SetSRID(ST_MakePoint(a.longitude, a.latitude), 4326) <-> ST_SetSRID(ST_MakePoint(longitude, latitude), 4326)\n            LIMIT 2\n        ) b ON TRUE\n    GROUP BY a.id\n)\n\nSELECT \n    a.*,\n    b.mean_knn_value\nFROM \n    \"defaultdb\".\"prep\".\"fake_knn_data\" a\n    JOIN knn b ON a.id = b.id\n\n)\n\n-- Compare computed and expected values\nSELECT \n    computed.id, \n    computed.mean_knn_value AS computed_valeur, \n    expected.expected_valeur\nFROM \n    computed\n    JOIN expected ON computed.id = expected.id\nWHERE\n    computed.mean_knn_value != expected.expected_valeur", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_price_mutation": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_price_mutation", "resource_type": "test", "package_name": "makeopendata", "path": "immo/input/assert_one_price_mutation.sql", "original_file_path": "tests/immo/input/assert_one_price_mutation.sql", "unique_id": "test.makeopendata.assert_one_price_mutation", "fqn": ["makeopendata", "immo", "input", "assert_one_price_mutation"], "alias": "assert_one_price_mutation", "checksum": {"name": "sha256", "checksum": "cb08c96efa1c1784ae126d13571158bf901a839eea54c1592514d8a085416c09"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.241072, "relation_name": null, "raw_code": "-- Dans le fichier source de dvf, les mutations apparaissent sur plusieurs ligne\n-- Il s'agit des transactions multiventes (un appartement dans une ligne et une maison dans une autre)\n-- Il s'agit donc de v\u00e9rifier que chaque mutation, donc dans les lignes o\u00f9 elle apparait, il n'a qu'une seule valeur fonci\u00e8re\n\nWITH mutation_values AS (\n    SELECT \n        id_mutation,\n        code_commune,\n        code_postal,\n        latitude,\n        longitude,\n        valeur_fonciere\n    FROM \n        {{ source('sources', 'dvf_2023')}} as dvf_2023\n),\n\nmutation_value_counts AS (\n    SELECT \n        id_mutation,\n        COUNT(DISTINCT valeur_fonciere) AS distinct_fonciere_count\n    FROM \n        mutation_values\n    GROUP BY \n        id_mutation\n)\n\nSELECT \n    id_mutation,\n    distinct_fonciere_count\nFROM \n    mutation_value_counts\nWHERE \n    distinct_fonciere_count > 1", "language": "sql", "refs": [], "sources": [["sources", "dvf_2023"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.dvf_2023"]}, "compiled_path": "target/compiled/makeopendata/tests/immo/input/assert_one_price_mutation.sql", "compiled": true, "compiled_code": "-- Dans le fichier source de dvf, les mutations apparaissent sur plusieurs ligne\n-- Il s'agit des transactions multiventes (un appartement dans une ligne et une maison dans une autre)\n-- Il s'agit donc de v\u00e9rifier que chaque mutation, donc dans les lignes o\u00f9 elle apparait, il n'a qu'une seule valeur fonci\u00e8re\n\nWITH mutation_values AS (\n    SELECT \n        id_mutation,\n        code_commune,\n        code_postal,\n        latitude,\n        longitude,\n        valeur_fonciere\n    FROM \n        \"defaultdb\".\"sources\".\"dvf_2023\" as dvf_2023\n),\n\nmutation_value_counts AS (\n    SELECT \n        id_mutation,\n        COUNT(DISTINCT valeur_fonciere) AS distinct_fonciere_count\n    FROM \n        mutation_values\n    GROUP BY \n        id_mutation\n)\n\nSELECT \n    id_mutation,\n    distinct_fonciere_count\nFROM \n    mutation_value_counts\nWHERE \n    distinct_fonciere_count > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_geo_communes_number": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_geo_communes_number", "resource_type": "test", "package_name": "makeopendata", "path": "geo/models/assert_geo_communes_number.sql", "original_file_path": "tests/geo/models/assert_geo_communes_number.sql", "unique_id": "test.makeopendata.assert_geo_communes_number", "fqn": ["makeopendata", "geo", "models", "assert_geo_communes_number"], "alias": "assert_geo_communes_number", "checksum": {"name": "sha256", "checksum": "e10ada93bc07d03ebc734a6550249adcec4b8ab9d1ac3aa1e83e2f8dafcf253c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "test"}, "created_at": 1720079267.2450242, "relation_name": null, "raw_code": "--- Le nombre officiel de communes est de 35029 soit\n--- zone = metro & drom est de 34935 en 2024\n--- i.e. france metropole et departement d'outre mer\n--- https://www.collectivites-locales.gouv.fr/bulletin-dinformation-statistique-bis-de-la-dgcl\n--- PLUS zone = com  est 94 \n--- i.e. collectivit\u00e9 d'outre mer\n--- Plus 45 communes municipales (Paris, Lyon, Marseille)\n\n{{ config(materialized='test') }}\n\nwith source as (\n    SELECT COUNT(DISTINCT code_commune) as commune_count\n    FROM {{ ref('geo_communes') }}\n)\n\nselect *\nfrom source\nwhere commune_count != 35074", "language": "sql", "refs": [{"name": "geo_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.makeopendata.geo_communes"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/models/assert_geo_communes_number.sql", "compiled": true, "compiled_code": "--- Le nombre officiel de communes est de 35029 soit\n--- zone = metro & drom est de 34935 en 2024\n--- i.e. france metropole et departement d'outre mer\n--- https://www.collectivites-locales.gouv.fr/bulletin-dinformation-statistique-bis-de-la-dgcl\n--- PLUS zone = com  est 94 \n--- i.e. collectivit\u00e9 d'outre mer\n--- Plus 45 communes municipales (Paris, Lyon, Marseille)\n\n\n\nwith source as (\n    SELECT COUNT(DISTINCT code_commune) as commune_count\n    FROM \"defaultdb\".\"prep\".\"geo_communes\"\n)\n\nselect *\nfrom source\nwhere commune_count != 35074", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_geo_postaux_distinct": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_geo_postaux_distinct", "resource_type": "test", "package_name": "makeopendata", "path": "geo/models/assert_geo_postaux_distinct.sql", "original_file_path": "tests/geo/models/assert_geo_postaux_distinct.sql", "unique_id": "test.makeopendata.assert_geo_postaux_distinct", "fqn": ["makeopendata", "geo", "models", "assert_geo_postaux_distinct"], "alias": "assert_geo_postaux_distinct", "checksum": {"name": "sha256", "checksum": "42ec2258e564b76cee12156c1bbedfade725dcc6069312c0eb0e13d54dddca95"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "test"}, "created_at": 1720079267.24917, "relation_name": null, "raw_code": "--- V\u00e9rifie que les codes postaux du mod\u00e8le sont distincts\n\n{{ config(materialized='test') }}\n\nwith counts as (\n    SELECT code_postal, COUNT(*) as num_cp\n    FROM {{ ref('geo_postaux') }}\n    GROUP BY code_postal\n)\n\nselect *\nfrom counts\nwhere num_cp > 1", "language": "sql", "refs": [{"name": "geo_postaux", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.makeopendata.geo_postaux"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/models/assert_geo_postaux_distinct.sql", "compiled": true, "compiled_code": "--- V\u00e9rifie que les codes postaux du mod\u00e8le sont distincts\n\n\n\nwith counts as (\n    SELECT code_postal, COUNT(*) as num_cp\n    FROM \"defaultdb\".\"prep\".\"geo_postaux\"\n    GROUP BY code_postal\n)\n\nselect *\nfrom counts\nwhere num_cp > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.asset_geo_communes_distinct": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "asset_geo_communes_distinct", "resource_type": "test", "package_name": "makeopendata", "path": "geo/models/asset_geo_communes_distinct.sql", "original_file_path": "tests/geo/models/asset_geo_communes_distinct.sql", "unique_id": "test.makeopendata.asset_geo_communes_distinct", "fqn": ["makeopendata", "geo", "models", "asset_geo_communes_distinct"], "alias": "asset_geo_communes_distinct", "checksum": {"name": "sha256", "checksum": "e17856c7ac827476aa8d626bd1326c3b9e2fa9a9f0660e6dccd59213b74a36d6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "test"}, "created_at": 1720079267.2531874, "relation_name": null, "raw_code": "--- V\u00e9rifie que les communes du mod\u00e8le sont distinctes\n\n{{ config(materialized='test') }}\n\nwith counts as (\n    SELECT code_commune, COUNT(*) as num_com\n    FROM {{ ref('geo_communes') }}\n    GROUP BY code_commune\n)\n\nselect *\nfrom counts\nwhere num_com > 1", "language": "sql", "refs": [{"name": "geo_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.makeopendata.geo_communes"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/models/asset_geo_communes_distinct.sql", "compiled": true, "compiled_code": "--- V\u00e9rifie que les communes du mod\u00e8le sont distinctes\n\n\n\nwith counts as (\n    SELECT code_commune, COUNT(*) as num_com\n    FROM \"defaultdb\".\"prep\".\"geo_communes\"\n    GROUP BY code_commune\n)\n\nselect *\nfrom counts\nwhere num_com > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_reg": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_reg", "resource_type": "test", "package_name": "makeopendata", "path": "geo/sources/assert_one_reg.sql", "original_file_path": "tests/geo/sources/assert_one_reg.sql", "unique_id": "test.makeopendata.assert_one_reg", "fqn": ["makeopendata", "geo", "sources", "assert_one_reg"], "alias": "assert_one_reg", "checksum": {"name": "sha256", "checksum": "0fa147ebdecef49c6e3b8229bf546acc54d9203936313b1c93dcb21b045b6915"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.2570546, "relation_name": null, "raw_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des r\u00e9gions\n\nWITH counts as (\n    select \n        cog_regions.code,\n        count(*) as num_reg\n    from {{ source('sources', 'cog_regions')}} as cog_regions\n    group by cog_regions.code\n)\n\nselect *\nfrom counts\nwhere num_reg > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_regions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_regions"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/sources/assert_one_reg.sql", "compiled": true, "compiled_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des r\u00e9gions\n\nWITH counts as (\n    select \n        cog_regions.code,\n        count(*) as num_reg\n    from \"defaultdb\".\"sources\".\"cog_regions\" as cog_regions\n    group by cog_regions.code\n)\n\nselect *\nfrom counts\nwhere num_reg > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_gps_com": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_gps_com", "resource_type": "test", "package_name": "makeopendata", "path": "geo/sources/assert_one_gps_com.sql", "original_file_path": "tests/geo/sources/assert_one_gps_com.sql", "unique_id": "test.makeopendata.assert_one_gps_com", "fqn": ["makeopendata", "geo", "sources", "assert_one_gps_com"], "alias": "assert_one_gps_com", "checksum": {"name": "sha256", "checksum": "b2860705abfb3b461478ec1cea740e175dd4a0a1d76920aff3553900a0764038"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "test"}, "created_at": 1720079267.2607484, "relation_name": null, "raw_code": "-- https://www.data.gouv.fr/fr/datasets/base-officielle-des-codes-postaux/\n-- Mention que : contient en plus les coordonn\u00e9es des centro\u00efdes des communes est \u00e9galement disponible.\n-- V\u00e9rifions que les coordonn\u00e9es des centro\u00efdes sont bien uniques pour chaque commune\n\n{{ config(materialized='test') }}\n\nwith source as (\n    SELECT code_commune_insee, COUNT(DISTINCT _geopoint) as geopoint_count\n    FROM {{ source('sources', 'cog_poste')}} as cog_poste\n    GROUP BY code_commune_insee\n)\n\nselect *\nfrom source\nwhere geopoint_count > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_poste"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_poste"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/sources/assert_one_gps_com.sql", "compiled": true, "compiled_code": "-- https://www.data.gouv.fr/fr/datasets/base-officielle-des-codes-postaux/\n-- Mention que : contient en plus les coordonn\u00e9es des centro\u00efdes des communes est \u00e9galement disponible.\n-- V\u00e9rifions que les coordonn\u00e9es des centro\u00efdes sont bien uniques pour chaque commune\n\n\n\nwith source as (\n    SELECT code_commune_insee, COUNT(DISTINCT _geopoint) as geopoint_count\n    FROM \"defaultdb\".\"sources\".\"cog_poste\" as cog_poste\n    GROUP BY code_commune_insee\n)\n\nselect *\nfrom source\nwhere geopoint_count > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_dep": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_dep", "resource_type": "test", "package_name": "makeopendata", "path": "geo/sources/assert_one_dep.sql", "original_file_path": "tests/geo/sources/assert_one_dep.sql", "unique_id": "test.makeopendata.assert_one_dep", "fqn": ["makeopendata", "geo", "sources", "assert_one_dep"], "alias": "assert_one_dep", "checksum": {"name": "sha256", "checksum": "1acdb5b963ecd14aced18e15cfd5969878144a15f6056d69d4b83e8aa60e3a30"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.2646823, "relation_name": null, "raw_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des departements\n\nWITH counts as (\n    select \n        cog_departements.code,\n        count(*) as num_dep\n    from {{ source('sources', 'cog_departements')}} as cog_departements\n    group by cog_departements.code\n)\n\nselect *\nfrom counts\nwhere num_dep > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_departements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_departements"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/sources/assert_one_dep.sql", "compiled": true, "compiled_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des departements\n\nWITH counts as (\n    select \n        cog_departements.code,\n        count(*) as num_dep\n    from \"defaultdb\".\"sources\".\"cog_departements\" as cog_departements\n    group by cog_departements.code\n)\n\nselect *\nfrom counts\nwhere num_dep > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_arr": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_arr", "resource_type": "test", "package_name": "makeopendata", "path": "geo/sources/assert_one_arr.sql", "original_file_path": "tests/geo/sources/assert_one_arr.sql", "unique_id": "test.makeopendata.assert_one_arr", "fqn": ["makeopendata", "geo", "sources", "assert_one_arr"], "alias": "assert_one_arr", "checksum": {"name": "sha256", "checksum": "610c4e549dc0a921055167ca4f15bdcf1dbb9c40dc2dee212dcb874043f2c0a6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.2697053, "relation_name": null, "raw_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des arrondissements\n\nWITH counts as (\n    select \n        cog_arrondissements.code,\n        count(*) as num_arr\n    from {{ source('sources', 'cog_arrondissements')}}  as cog_arrondissements \n    group by cog_arrondissements.code\n)\n\nselect *\nfrom counts\nwhere num_arr > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_arrondissements"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_arrondissements"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/sources/assert_one_arr.sql", "compiled": true, "compiled_code": "-- Test qu'il n'ya pas de doublons dans la table des codes g\u00e9ographiques des arrondissements\n\nWITH counts as (\n    select \n        cog_arrondissements.code,\n        count(*) as num_arr\n    from \"defaultdb\".\"sources\".\"cog_arrondissements\"  as cog_arrondissements \n    group by cog_arrondissements.code\n)\n\nselect *\nfrom counts\nwhere num_arr > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.assert_one_com": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "assert_one_com", "resource_type": "test", "package_name": "makeopendata", "path": "geo/sources/assert_one_com.sql", "original_file_path": "tests/geo/sources/assert_one_com.sql", "unique_id": "test.makeopendata.assert_one_com", "fqn": ["makeopendata", "geo", "sources", "assert_one_com"], "alias": "assert_one_com", "checksum": {"name": "sha256", "checksum": "73953011638b5fba6c00b2cefa7f3fd5591736153507adfae6a4692d5dbbaaf1"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.273438, "relation_name": null, "raw_code": "-- Une commune peut avoir plusieurs types\n-- COM\tCommune / COMA\tCommune associ\u00e9e / COMD\tCommune d\u00e9l\u00e9gu\u00e9e / ARM\tArrondissement municipal\n-- Les COM sont celles existantes, les autres types sont des legacy de fusions ou disparitions de communes\n\nWITH counts as (\n    select \n        cog_communes.code,\n        count(*) as num_com\n    from {{ source('sources', 'cog_communes')}}  as cog_communes\n    where cog_communes.type = 'commune-actuelle'\n    group by cog_communes.code\n)\n\nselect *\nfrom counts\nwhere num_com > 1", "language": "sql", "refs": [], "sources": [["sources", "cog_communes"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.cog_communes"]}, "compiled_path": "target/compiled/makeopendata/tests/geo/sources/assert_one_com.sql", "compiled": true, "compiled_code": "-- Une commune peut avoir plusieurs types\n-- COM\tCommune / COMA\tCommune associ\u00e9e / COMD\tCommune d\u00e9l\u00e9gu\u00e9e / ARM\tArrondissement municipal\n-- Les COM sont celles existantes, les autres types sont des legacy de fusions ou disparitions de communes\n\nWITH counts as (\n    select \n        cog_communes.code,\n        count(*) as num_com\n    from \"defaultdb\".\"sources\".\"cog_communes\"  as cog_communes\n    where cog_communes.type = 'commune-actuelle'\n    group by cog_communes.code\n)\n\nselect *\nfrom counts\nwhere num_com > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.makeopendata.effectif_tout_departement_egal_some_region": {"database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "effectif_tout_departement_egal_some_region", "resource_type": "test", "package_name": "makeopendata", "path": "sante/sources/effectif_tout_departement_egal_some_region.sql", "original_file_path": "tests/sante/sources/effectif_tout_departement_egal_some_region.sql", "unique_id": "test.makeopendata.effectif_tout_departement_egal_some_region", "fqn": ["makeopendata", "sante", "sources", "effectif_tout_departement_egal_some_region"], "alias": "effectif_tout_departement_egal_some_region", "checksum": {"name": "sha256", "checksum": "292cd936b794c7167e521ac326402ec54927be652c47f2284c9cd63d95e2e313"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.2770011, "relation_name": null, "raw_code": "-- Teste que l'entr\u00e9e 'Tout d\u00e9partement' dans libelle de departement reporte le total des effectifs de tous les d\u00e9partements\n\n\nWITH sommes_par_departement AS (\n    SELECT \n        annee, \n        profession_sante, \n        libelle_region, \n        SUM(cast(effectif as numeric)) AS effectif_total_calcule\n    FROM {{ source('sources', 'professionels_sante') }}\n    WHERE libelle_departement != 'Tout departement'\n    GROUP BY annee, profession_sante, libelle_region\n),\n\t\ntout_departement AS (\n    SELECT \n        annee, \n        profession_sante, \n        libelle_region, \n        CAST(effectif as numeric) AS tout_departement_effectif\n    FROM {{ source('sources', 'professionels_sante') }}\n    WHERE libelle_departement = 'Tout departement'\n)\n\t\nSELECT \n    sommes_par_departement.effectif_total_calcule, \n    tout_departement.tout_departement_effectif\nFROM sommes_par_departement\nLEFT JOIN tout_departement \n    ON sommes_par_departement.annee = tout_departement.annee \n    AND sommes_par_departement.profession_sante = tout_departement.profession_sante \n    AND sommes_par_departement.libelle_region = tout_departement.libelle_region\nWHERE sommes_par_departement.effectif_total_calcule != tout_departement.tout_departement_effectif", "language": "sql", "refs": [], "sources": [["sources", "professionels_sante"], ["sources", "professionels_sante"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.makeopendata.sources.professionels_sante"]}, "compiled_path": "target/compiled/makeopendata/tests/sante/sources/effectif_tout_departement_egal_some_region.sql", "compiled": true, "compiled_code": "-- Teste que l'entr\u00e9e 'Tout d\u00e9partement' dans libelle de departement reporte le total des effectifs de tous les d\u00e9partements\n\n\nWITH sommes_par_departement AS (\n    SELECT \n        annee, \n        profession_sante, \n        libelle_region, \n        SUM(cast(effectif as numeric)) AS effectif_total_calcule\n    FROM \"defaultdb\".\"sources\".\"professionels_sante\"\n    WHERE libelle_departement != 'Tout departement'\n    GROUP BY annee, profession_sante, libelle_region\n),\n\t\ntout_departement AS (\n    SELECT \n        annee, \n        profession_sante, \n        libelle_region, \n        CAST(effectif as numeric) AS tout_departement_effectif\n    FROM \"defaultdb\".\"sources\".\"professionels_sante\"\n    WHERE libelle_departement = 'Tout departement'\n)\n\t\nSELECT \n    sommes_par_departement.effectif_total_calcule, \n    tout_departement.tout_departement_effectif\nFROM sommes_par_departement\nLEFT JOIN tout_departement \n    ON sommes_par_departement.annee = tout_departement.annee \n    AND sommes_par_departement.profession_sante = tout_departement.profession_sante \n    AND sommes_par_departement.libelle_region = tout_departement.libelle_region\nWHERE sommes_par_departement.effectif_total_calcule != tout_departement.tout_departement_effectif", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.makeopendata.logement_2020_demographie_codes": {"database": "defaultdb", "schema": "prep", "name": "logement_2020_demographie_codes", "resource_type": "seed", "package_name": "makeopendata", "path": "logement_2020_demographie_codes.csv", "original_file_path": "seeds/logement_2020_demographie_codes.csv", "unique_id": "seed.makeopendata.logement_2020_demographie_codes", "fqn": ["makeopendata", "logement_2020_demographie_codes"], "alias": "logement_2020_demographie_codes", "checksum": {"name": "sha256", "checksum": "4f4abf59c815837b8569721b0929092742dbfdd588d48ea8e6f13fa8795cdd15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.3650155, "relation_name": "\"defaultdb\".\"prep\".\"logement_2020_demographie_codes\"", "raw_code": "", "root_path": "/home/runner/work/make-open-data/make-open-data", "depends_on": {"macros": []}}, "seed.makeopendata.logement_2020_habitat_codes": {"database": "defaultdb", "schema": "prep", "name": "logement_2020_habitat_codes", "resource_type": "seed", "package_name": "makeopendata", "path": "logement_2020_habitat_codes.csv", "original_file_path": "seeds/logement_2020_habitat_codes.csv", "unique_id": "seed.makeopendata.logement_2020_habitat_codes", "fqn": ["makeopendata", "logement_2020_habitat_codes"], "alias": "logement_2020_habitat_codes", "checksum": {"name": "sha256", "checksum": "0396cee31317c3834daf54892989a345c49f1fc4bfe36bbcfc1d530b2e00b71b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.3673916, "relation_name": "\"defaultdb\".\"prep\".\"logement_2020_habitat_codes\"", "raw_code": "", "root_path": "/home/runner/work/make-open-data/make-open-data", "depends_on": {"macros": []}}, "test.makeopendata.unique_aggreger_demographie_communes_code_commune_insee.e9ea688474": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "code_commune_insee", "model": "{{ get_where_subquery(ref('aggreger_demographie_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_aggreger_demographie_communes_code_commune_insee", "resource_type": "test", "package_name": "makeopendata", "path": "unique_aggreger_demographie_communes_code_commune_insee.sql", "original_file_path": "models/prep/demographie/schema.yml", "unique_id": "test.makeopendata.unique_aggreger_demographie_communes_code_commune_insee.e9ea688474", "fqn": ["makeopendata", "prep", "demographie", "unique_aggreger_demographie_communes_code_commune_insee"], "alias": "unique_aggreger_demographie_communes_code_commune_insee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8152301, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggreger_demographie_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggreger_demographie_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/demographie/schema.yml/unique_aggreger_demographie_communes_code_commune_insee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code_commune_insee as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"aggreger_demographie_communes\"\nwhere code_commune_insee is not null\ngroup by code_commune_insee\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune_insee", "file_key_name": "models.aggreger_demographie_communes", "attached_node": "model.makeopendata.aggreger_demographie_communes"}, "test.makeopendata.not_null_aggreger_demographie_communes_code_commune_insee.93bafe8c43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "code_commune_insee", "model": "{{ get_where_subquery(ref('aggreger_demographie_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggreger_demographie_communes_code_commune_insee", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggreger_demographie_communes_code_commune_insee.sql", "original_file_path": "models/prep/demographie/schema.yml", "unique_id": "test.makeopendata.not_null_aggreger_demographie_communes_code_commune_insee.93bafe8c43", "fqn": ["makeopendata", "prep", "demographie", "not_null_aggreger_demographie_communes_code_commune_insee"], "alias": "not_null_aggreger_demographie_communes_code_commune_insee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8171601, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggreger_demographie_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggreger_demographie_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/demographie/schema.yml/not_null_aggreger_demographie_communes_code_commune_insee.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code_commune_insee\nfrom \"defaultdb\".\"prep\".\"aggreger_demographie_communes\"\nwhere code_commune_insee is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune_insee", "file_key_name": "models.aggreger_demographie_communes", "attached_node": "model.makeopendata.aggreger_demographie_communes"}, "test.makeopendata.unique_grouper_mutations_id_mutation.167a98860e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id_mutation", "model": "{{ get_where_subquery(ref('grouper_mutations')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_grouper_mutations_id_mutation", "resource_type": "test", "package_name": "makeopendata", "path": "unique_grouper_mutations_id_mutation.sql", "original_file_path": "models/prep/immo/schema.yml", "unique_id": "test.makeopendata.unique_grouper_mutations_id_mutation.167a98860e", "fqn": ["makeopendata", "prep", "immo", "unique_grouper_mutations_id_mutation"], "alias": "unique_grouper_mutations_id_mutation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8209777, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "grouper_mutations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.grouper_mutations"]}, "compiled_path": "target/compiled/makeopendata/models/prep/immo/schema.yml/unique_grouper_mutations_id_mutation.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id_mutation as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"grouper_mutations\"\nwhere id_mutation is not null\ngroup by id_mutation\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_mutation", "file_key_name": "models.grouper_mutations", "attached_node": "model.makeopendata.grouper_mutations"}, "test.makeopendata.not_null_grouper_mutations_id_mutation.0834c40ce5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id_mutation", "model": "{{ get_where_subquery(ref('grouper_mutations')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_grouper_mutations_id_mutation", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_grouper_mutations_id_mutation.sql", "original_file_path": "models/prep/immo/schema.yml", "unique_id": "test.makeopendata.not_null_grouper_mutations_id_mutation.0834c40ce5", "fqn": ["makeopendata", "prep", "immo", "not_null_grouper_mutations_id_mutation"], "alias": "not_null_grouper_mutations_id_mutation", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8227031, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "grouper_mutations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.grouper_mutations"]}, "compiled_path": "target/compiled/makeopendata/models/prep/immo/schema.yml/not_null_grouper_mutations_id_mutation.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id_mutation\nfrom \"defaultdb\".\"prep\".\"grouper_mutations\"\nwhere id_mutation is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id_mutation", "file_key_name": "models.grouper_mutations", "attached_node": "model.makeopendata.grouper_mutations"}, "test.makeopendata.unique_geo_communes_code_commune.b822eae2cf": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "code_commune", "model": "{{ get_where_subquery(ref('geo_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_geo_communes_code_commune", "resource_type": "test", "package_name": "makeopendata", "path": "unique_geo_communes_code_commune.sql", "original_file_path": "models/prep/geo/schema.yml", "unique_id": "test.makeopendata.unique_geo_communes_code_commune.b822eae2cf", "fqn": ["makeopendata", "prep", "geo", "unique_geo_communes_code_commune"], "alias": "unique_geo_communes_code_commune", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8298216, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "geo_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.geo_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/schema.yml/unique_geo_communes_code_commune.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code_commune as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"geo_communes\"\nwhere code_commune is not null\ngroup by code_commune\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune", "file_key_name": "models.geo_communes", "attached_node": "model.makeopendata.geo_communes"}, "test.makeopendata.not_null_geo_communes_code_commune.12ca32dbb5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "code_commune", "model": "{{ get_where_subquery(ref('geo_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_geo_communes_code_commune", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_geo_communes_code_commune.sql", "original_file_path": "models/prep/geo/schema.yml", "unique_id": "test.makeopendata.not_null_geo_communes_code_commune.12ca32dbb5", "fqn": ["makeopendata", "prep", "geo", "not_null_geo_communes_code_commune"], "alias": "not_null_geo_communes_code_commune", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8314686, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "geo_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.geo_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/schema.yml/not_null_geo_communes_code_commune.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code_commune\nfrom \"defaultdb\".\"prep\".\"geo_communes\"\nwhere code_commune is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune", "file_key_name": "models.geo_communes", "attached_node": "model.makeopendata.geo_communes"}, "test.makeopendata.unique_geo_postaux_code_postal.11a7ce8c7a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "code_postal", "model": "{{ get_where_subquery(ref('geo_postaux')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_geo_postaux_code_postal", "resource_type": "test", "package_name": "makeopendata", "path": "unique_geo_postaux_code_postal.sql", "original_file_path": "models/prep/geo/schema.yml", "unique_id": "test.makeopendata.unique_geo_postaux_code_postal.11a7ce8c7a", "fqn": ["makeopendata", "prep", "geo", "unique_geo_postaux_code_postal"], "alias": "unique_geo_postaux_code_postal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8330534, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "geo_postaux", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.geo_postaux"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/schema.yml/unique_geo_postaux_code_postal.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code_postal as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"geo_postaux\"\nwhere code_postal is not null\ngroup by code_postal\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_postal", "file_key_name": "models.geo_postaux", "attached_node": "model.makeopendata.geo_postaux"}, "test.makeopendata.not_null_geo_postaux_code_postal.f3f26546c2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "code_postal", "model": "{{ get_where_subquery(ref('geo_postaux')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_geo_postaux_code_postal", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_geo_postaux_code_postal.sql", "original_file_path": "models/prep/geo/schema.yml", "unique_id": "test.makeopendata.not_null_geo_postaux_code_postal.f3f26546c2", "fqn": ["makeopendata", "prep", "geo", "not_null_geo_postaux_code_postal"], "alias": "not_null_geo_postaux_code_postal", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.834896, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "geo_postaux", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.geo_postaux"]}, "compiled_path": "target/compiled/makeopendata/models/prep/geo/schema.yml/not_null_geo_postaux_code_postal.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code_postal\nfrom \"defaultdb\".\"prep\".\"geo_postaux\"\nwhere code_postal is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_postal", "file_key_name": "models.geo_postaux", "attached_node": "model.makeopendata.geo_postaux"}, "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_region.426bcb46c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "region", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggeger_effectifs_sante_departement_2022_region", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggeger_effectifs_sante_departement_2022_region.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_region.426bcb46c6", "fqn": ["makeopendata", "prep", "sante", "not_null_aggeger_effectifs_sante_departement_2022_region"], "alias": "not_null_aggeger_effectifs_sante_departement_2022_region", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8473291, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/not_null_aggeger_effectifs_sante_departement_2022_region.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect region\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere region is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "region", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_region.ad2b5d1f84": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "libelle_region", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggeger_effectifs_sante_departement_2022_libelle_region", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_region.ad2b5d1f84", "fqn": ["makeopendata", "prep", "sante", "not_null_aggeger_effectifs_sante_departement_2022_libelle_region"], "alias": "not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0"}, "created_at": 1720079267.8491082, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0\") }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/not_null_aggeger_effectifs_san_65270dd67904ae1009e4c014c73117c0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect libelle_region\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere libelle_region is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "libelle_region", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_departement.f929a79113": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "departement", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_aggeger_effectifs_sante_departement_2022_departement", "resource_type": "test", "package_name": "makeopendata", "path": "unique_aggeger_effectifs_sante_departement_2022_departement.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_departement.f929a79113", "fqn": ["makeopendata", "prep", "sante", "unique_aggeger_effectifs_sante_departement_2022_departement"], "alias": "unique_aggeger_effectifs_sante_departement_2022_departement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.850767, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/unique_aggeger_effectifs_sante_departement_2022_departement.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    departement as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere departement is not null\ngroup by departement\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "departement", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_departement.cc58d5e085": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "departement", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggeger_effectifs_sante_departement_2022_departement", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggeger_effectifs_sante_departement_2022_departement.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_departement.cc58d5e085", "fqn": ["makeopendata", "prep", "sante", "not_null_aggeger_effectifs_sante_departement_2022_departement"], "alias": "not_null_aggeger_effectifs_sante_departement_2022_departement", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.8523405, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/not_null_aggeger_effectifs_sante_departement_2022_departement.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect departement\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere departement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "departement", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_libelle_departement.79882a7e79": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "libelle_departement", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_aggeger_effectifs_sante_departement_2022_libelle_departement", "resource_type": "test", "package_name": "makeopendata", "path": "unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_libelle_departement.79882a7e79", "fqn": ["makeopendata", "prep", "sante", "unique_aggeger_effectifs_sante_departement_2022_libelle_departement"], "alias": "unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85"}, "created_at": 1720079267.8539195, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85\") }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/unique_aggeger_effectifs_sante_25bf800492c44fa2d25cffc6615afb85.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    libelle_departement as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere libelle_departement is not null\ngroup by libelle_departement\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "libelle_departement", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_departement.baae3ab3e8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "libelle_departement", "model": "{{ get_where_subquery(ref('aggeger_effectifs_sante_departement_2022')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggeger_effectifs_sante_departement_2022_libelle_departement", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3.sql", "original_file_path": "models/prep/sante/schema.yml", "unique_id": "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_departement.baae3ab3e8", "fqn": ["makeopendata", "prep", "sante", "not_null_aggeger_effectifs_sante_departement_2022_libelle_departement"], "alias": "not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3"}, "created_at": 1720079267.8555741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3\") }}", "language": "sql", "refs": [{"name": "aggeger_effectifs_sante_departement_2022", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"]}, "compiled_path": "target/compiled/makeopendata/models/prep/sante/schema.yml/not_null_aggeger_effectifs_san_11fe7356c1c2ff21432ed296d24e46c3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect libelle_departement\nfrom \"defaultdb\".\"prep\".\"aggeger_effectifs_sante_departement_2022\"\nwhere libelle_departement is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "libelle_departement", "file_key_name": "models.aggeger_effectifs_sante_departement_2022", "attached_node": "model.makeopendata.aggeger_effectifs_sante_departement_2022"}, "test.makeopendata.unique_aggreger_habitat_communes_code_commune_insee.4e49975331": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "code_commune_insee", "model": "{{ get_where_subquery(ref('aggreger_habitat_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "unique_aggreger_habitat_communes_code_commune_insee", "resource_type": "test", "package_name": "makeopendata", "path": "unique_aggreger_habitat_communes_code_commune_insee.sql", "original_file_path": "models/prep/habitat/schema.yml", "unique_id": "test.makeopendata.unique_aggreger_habitat_communes_code_commune_insee.4e49975331", "fqn": ["makeopendata", "prep", "habitat", "unique_aggreger_habitat_communes_code_commune_insee"], "alias": "unique_aggreger_habitat_communes_code_commune_insee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.9069557, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggreger_habitat_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggreger_habitat_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/habitat/schema.yml/unique_aggreger_habitat_communes_code_commune_insee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    code_commune_insee as unique_field,\n    count(*) as n_records\n\nfrom \"defaultdb\".\"prep\".\"aggreger_habitat_communes\"\nwhere code_commune_insee is not null\ngroup by code_commune_insee\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune_insee", "file_key_name": "models.aggreger_habitat_communes", "attached_node": "model.makeopendata.aggreger_habitat_communes"}, "test.makeopendata.not_null_aggreger_habitat_communes_code_commune_insee.cb97ce64fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "code_commune_insee", "model": "{{ get_where_subquery(ref('aggreger_habitat_communes')) }}"}, "namespace": null}, "database": "defaultdb", "schema": "prep_dbt_test__audit", "name": "not_null_aggreger_habitat_communes_code_commune_insee", "resource_type": "test", "package_name": "makeopendata", "path": "not_null_aggreger_habitat_communes_code_commune_insee.sql", "original_file_path": "models/prep/habitat/schema.yml", "unique_id": "test.makeopendata.not_null_aggreger_habitat_communes_code_commune_insee.cb97ce64fb", "fqn": ["makeopendata", "prep", "habitat", "not_null_aggreger_habitat_communes_code_commune_insee"], "alias": "not_null_aggreger_habitat_communes_code_commune_insee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720079267.9086888, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "aggreger_habitat_communes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.makeopendata.aggreger_habitat_communes"]}, "compiled_path": "target/compiled/makeopendata/models/prep/habitat/schema.yml/not_null_aggreger_habitat_communes_code_commune_insee.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect code_commune_insee\nfrom \"defaultdb\".\"prep\".\"aggreger_habitat_communes\"\nwhere code_commune_insee is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "code_commune_insee", "file_key_name": "models.aggreger_habitat_communes", "attached_node": "model.makeopendata.aggreger_habitat_communes"}}, "sources": {"source.makeopendata.meta.logement_2020_variables": {"database": "defaultdb", "schema": "meta", "name": "logement_2020_variables", "resource_type": "source", "package_name": "makeopendata", "path": "models/meta/schema.yml", "original_file_path": "models/meta/schema.yml", "unique_id": "source.makeopendata.meta.logement_2020_variables", "fqn": ["makeopendata", "meta", "meta", "logement_2020_variables"], "source_name": "meta", "source_description": "Metadata tables", "loader": "", "identifier": "logement_2020_variables", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Dictionnaire des variables pour la table logement_2020. Producteur des donn\u00e9es: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/recensement-de-la-population-fichiers-detail-logements-ordinaires-en-2020-1/", "columns": {"COD_VAR": {"name": "COD_VAR", "description": "Nom de la variable", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "LIB_VAR": {"name": "LIB_VAR", "description": "Libell\u00e9 de la variable", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "COD_MOD": {"name": "COD_MOD", "description": "Nom de le modalit\u00e9", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "LIB_MOD": {"name": "LIB_MOD", "description": "Libell\u00e9 de la modalit\u00e9", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "TYPE_VAR": {"name": "TYPE_VAR", "description": "Type de la variable (pas applicable en import CSV car tout en text)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "LONG_VAR": {"name": "LONG_VAR", "description": "Longueur de la variable (pas applicable en import CSV car tout en text)", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"meta\".\"logement_2020_variables\"", "created_at": 1720079267.911484}, "source.makeopendata.sources.cog_poste": {"database": "defaultdb", "schema": "sources", "name": "cog_poste", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.cog_poste", "fqn": ["makeopendata", "sources", "sources", "cog_poste"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "cog_poste", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Base officielle des codes postaux. Producteur des donn\u00e9es: La Poste. Origine: https://www.data.gouv.fr/fr/datasets/base-officielle-des-codes-postaux/", "columns": {"code_postal": {"name": "code_postal", "description": "Code postal", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "commune": {"name": "commune", "description": "Commune name", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "code_commune_insee": {"name": "code_commune_insee", "description": "Code INSEE de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom_de_la_commune": {"name": "nom_de_la_commune", "description": "Nom de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_d_acheminement": {"name": "libelle_d_acheminement", "description": "Libell\u00e9 d'acheminement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ligne_5": {"name": "ligne_5", "description": "Ligne 5", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "_geopoint": {"name": "_geopoint", "description": "Point g\u00e9ographique", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"cog_poste\"", "created_at": 1720079267.9117181}, "source.makeopendata.sources.cog_communes": {"database": "defaultdb", "schema": "sources", "name": "cog_communes", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.cog_communes", "fqn": ["makeopendata", "sources", "sources", "cog_communes"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "cog_communes", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "List of communes. Producteur des donnees: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/code-officiel-geographique-cog/", "columns": {"code": {"name": "code", "description": "Code unique de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom": {"name": "nom", "description": "Nom de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "typeLiaison": {"name": "typeLiaison", "description": "Type de liaison", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "Zone de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "arrondissement": {"name": "arrondissement", "description": "Arrondissement de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "departement": {"name": "departement", "description": "D\u00e9partement de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "R\u00e9gion de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type de commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "rangChefLieu": {"name": "rangChefLieu", "description": "Rang du chef-lieu", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "siren": {"name": "siren", "description": "Code SIREN", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "codesPostaux": {"name": "codesPostaux", "description": "Codes postaux associ\u00e9s \u00e0 la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "population": {"name": "population", "description": "Population de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "anciensCodes": {"name": "anciensCodes", "description": "Anciens codes de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chefLieu": {"name": "chefLieu", "description": "Chef-lieu de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "commune": {"name": "commune", "description": "Commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"cog_communes\"", "created_at": 1720079267.9119}, "source.makeopendata.sources.cog_arrondissements": {"database": "defaultdb", "schema": "sources", "name": "cog_arrondissements", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.cog_arrondissements", "fqn": ["makeopendata", "sources", "sources", "cog_arrondissements"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "cog_arrondissements", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Informations sur les arrondissements.Producteur des donn\u00e9es: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/code-officiel-geographique-cog/", "columns": {"code": {"name": "code", "description": "Code de l'arrondissement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "departement": {"name": "departement", "description": "D\u00e9partement de l'arrondissement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "R\u00e9gion de l'arrondissement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chefLieu": {"name": "chefLieu", "description": "Chef-lieu de l'arrondissement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom": {"name": "nom", "description": "Nom de l'arrondissement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "typeLiaison": {"name": "typeLiaison", "description": "Type de liaison", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"cog_arrondissements\"", "created_at": 1720079267.9120662}, "source.makeopendata.sources.cog_departements": {"database": "defaultdb", "schema": "sources", "name": "cog_departements", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.cog_departements", "fqn": ["makeopendata", "sources", "sources", "cog_departements"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "cog_departements", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Informations sur les d\u00e9partements.Producteur des donn\u00e9es: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/code-officiel-geographique-cog/", "columns": {"code": {"name": "code", "description": "Code du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "R\u00e9gion du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chefLieu": {"name": "chefLieu", "description": "Chef-lieu du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom": {"name": "nom", "description": "Nom du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "typeLiaison": {"name": "typeLiaison", "description": "Type de liaison", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "Zone du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"cog_departements\"", "created_at": 1720079267.9122205}, "source.makeopendata.sources.cog_regions": {"database": "defaultdb", "schema": "sources", "name": "cog_regions", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.cog_regions", "fqn": ["makeopendata", "sources", "sources", "cog_regions"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "cog_regions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Informations sur les r\u00e9gions.Producteur des donn\u00e9es: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/code-officiel-geographique-cog/", "columns": {"code": {"name": "code", "description": "Code de la r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "chefLieu": {"name": "chefLieu", "description": "Chef-lieu de la r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom": {"name": "nom", "description": "Nom de la r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "typeLiaison": {"name": "typeLiaison", "description": "Type de liaison", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "zone": {"name": "zone", "description": "Zone de la r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"cog_regions\"", "created_at": 1720079267.912363}, "source.makeopendata.sources.dvf_2023": {"database": "defaultdb", "schema": "sources", "name": "dvf_2023", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.dvf_2023", "fqn": ["makeopendata", "sources", "sources", "dvf_2023"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "dvf_2023", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Demandes de valeurs fonci\u00e8res g\u00e9olocalis\u00e9es pour 2023. Producteur des donn\u00e9es: dat.gouv.fr. Origine: https://www.data.gouv.fr/fr/datasets/demandes-de-valeurs-foncieres-geolocalisees/", "columns": {"id_mutation": {"name": "id_mutation", "description": "Identifiant de la mutation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "date_mutation": {"name": "date_mutation", "description": "Date de la mutation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "numero_disposition": {"name": "numero_disposition", "description": "Num\u00e9ro de disposition", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nature_mutation": {"name": "nature_mutation", "description": "Nature de la mutation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "valeur_fonciere": {"name": "valeur_fonciere", "description": "Valeur fonci\u00e8re", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "adresse_numero": {"name": "adresse_numero", "description": "Num\u00e9ro de l'adresse", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "adresse_suffixe": {"name": "adresse_suffixe", "description": "Suffixe de l'adresse", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "adresse_nom_voie": {"name": "adresse_nom_voie", "description": "Nom de la voie", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "adresse_code_voie": {"name": "adresse_code_voie", "description": "Code de la voie", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_postal": {"name": "code_postal", "description": "Code postal", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_commune": {"name": "code_commune", "description": "Code de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nom_commune": {"name": "nom_commune", "description": "Nom de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_departement": {"name": "code_departement", "description": "Code du d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ancien_code_commune": {"name": "ancien_code_commune", "description": "Ancien code de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ancien_nom_commune": {"name": "ancien_nom_commune", "description": "Ancien nom de la commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "id_parcelle": {"name": "id_parcelle", "description": "Identifiant de la parcelle", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ancien_id_parcelle": {"name": "ancien_id_parcelle", "description": "Ancien identifiant de la parcelle", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "numero_volume": {"name": "numero_volume", "description": "Num\u00e9ro de volume", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot1_numero": {"name": "lot1_numero", "description": "Num\u00e9ro du lot 1", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot1_surface_carrez": {"name": "lot1_surface_carrez", "description": "Surface Carrez du lot 1", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot2_numero": {"name": "lot2_numero", "description": "Num\u00e9ro du lot 2", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot2_surface_carrez": {"name": "lot2_surface_carrez", "description": "Surface Carrez du lot 2", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot3_numero": {"name": "lot3_numero", "description": "Num\u00e9ro du lot 3", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot3_surface_carrez": {"name": "lot3_surface_carrez", "description": "Surface Carrez du lot 3", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot4_numero": {"name": "lot4_numero", "description": "Num\u00e9ro du lot 4", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot4_surface_carrez": {"name": "lot4_surface_carrez", "description": "Surface Carrez du lot 4", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot5_numero": {"name": "lot5_numero", "description": "Num\u00e9ro du lot 5", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "lot5_surface_carrez": {"name": "lot5_surface_carrez", "description": "Surface Carrez du lot 5", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nombre_lots": {"name": "nombre_lots", "description": "Nombre de lots", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_type_local": {"name": "code_type_local", "description": "Code du type de local", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "type_local": {"name": "type_local", "description": "Type de local", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "surface_reelle_bati": {"name": "surface_reelle_bati", "description": "Surface r\u00e9elle du b\u00e2ti", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nombre_pieces_principales": {"name": "nombre_pieces_principales", "description": "Nombre de pi\u00e8ces principales", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_nature_culture": {"name": "code_nature_culture", "description": "Code de la nature de la culture", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nature_culture": {"name": "nature_culture", "description": "Nature de la culture", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "code_nature_culture_speciale": {"name": "code_nature_culture_speciale", "description": "Code de la nature de la culture sp\u00e9ciale", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "nature_culture_speciale": {"name": "nature_culture_speciale", "description": "Nature de la culture sp\u00e9ciale", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "surface_terrain": {"name": "surface_terrain", "description": "Surface du terrain", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"dvf_2023\"", "created_at": 1720079267.9125676}, "source.makeopendata.sources.logement_2020": {"database": "defaultdb", "schema": "sources", "name": "logement_2020", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.logement_2020", "fqn": ["makeopendata", "sources", "sources", "logement_2020"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "logement_2020", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Logements, individus, activit\u00e9, mobilit\u00e9s scolaires et professionnelles, migrations r\u00e9sidentielles en 2020 Recensement de la population - Fichier d\u00e9tail. Producteur des donn\u00e9es: INSEE. Origine: https://www.data.gouv.fr/fr/datasets/recensement-de-la-population-fichiers-detail-logements-ordinaires-en-2020-1/", "columns": {"COMMUNE": {"name": "COMMUNE", "description": "Commune", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ARM": {"name": "ARM", "description": "Ann\u00e9e de r\u00e9f\u00e9rence des mat\u00e9riaux", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "IRIS": {"name": "IRIS", "description": "Identifiant d'un IRIS (Ilots Regroup\u00e9s pour l'Information Statistique)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ACHL": {"name": "ACHL", "description": "Ann\u00e9e de construction de l'habitation l\u00e9g\u00e8re", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "AEMM": {"name": "AEMM", "description": "Ann\u00e9e d'entr\u00e9e dans le m\u00e9nage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "AEMMR": {"name": "AEMMR", "description": "Ann\u00e9e d'entr\u00e9e du m\u00e9nage dans la r\u00e9sidence", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "AGEMEN8": {"name": "AGEMEN8", "description": "\u00c2ge du m\u00e9nage (tranche)", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ANEM": {"name": "ANEM", "description": "Ann\u00e9e de naissance de l'enqu\u00eat\u00e9 majeur", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ANEMR": {"name": "ANEMR", "description": "Ann\u00e9e de naissance du r\u00e9pondant majeur", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ASCEN": {"name": "ASCEN", "description": "Ascendance", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "BAIN": {"name": "BAIN", "description": "Salle de bain", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "BATI": {"name": "BATI", "description": "Type de b\u00e2timent", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CATIRIS": {"name": "CATIRIS", "description": "Cat\u00e9gorie IRIS", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CATL": {"name": "CATL", "description": "Cat\u00e9gorie de logement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CHAU": {"name": "CHAU", "description": "Chauffage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CHFL": {"name": "CHFL", "description": "Chauffage au sol", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CHOS": {"name": "CHOS", "description": "Choix", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CLIM": {"name": "CLIM", "description": "Climatisation", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CMBL": {"name": "CMBL", "description": "Combles", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "CUIS": {"name": "CUIS", "description": "Cuisine", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "DEROU": {"name": "DEROU", "description": "Dernier ouvrage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "DIPLM": {"name": "DIPLM", "description": "Dipl\u00f4me le plus \u00e9lev\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "EAU": {"name": "EAU", "description": "Eau", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "EGOUL": {"name": "EGOUL", "description": "\u00c9gout", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ELEC": {"name": "ELEC", "description": "\u00c9lectricit\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "EMPLM": {"name": "EMPLM", "description": "Emploi", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "GARL": {"name": "GARL", "description": "Garage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "HLML": {"name": "HLML", "description": "Habitation l\u00e9g\u00e8re de loisirs", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ILETUDM": {"name": "ILETUDM", "description": "Illettrisme", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "ILTM": {"name": "ILTM", "description": "Immigration", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "IMMIM": {"name": "IMMIM", "description": "Immigration", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INAIM": {"name": "INAIM", "description": "Inactivit\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INEEM": {"name": "INEEM", "description": "In\u00e9galit\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP11M": {"name": "INP11M", "description": "Inscription p\u00f4le emploi 1 \u00e0 1 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP15M": {"name": "INP15M", "description": "Inscription p\u00f4le emploi 1 \u00e0 5 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP17M": {"name": "INP17M", "description": "Inscription p\u00f4le emploi 1 \u00e0 7 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP19M": {"name": "INP19M", "description": "Inscription p\u00f4le emploi 1 \u00e0 9 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP24M": {"name": "INP24M", "description": "Inscription p\u00f4le emploi 2 \u00e0 4 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP3M": {"name": "INP3M", "description": "Inscription p\u00f4le emploi 3 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP60M": {"name": "INP60M", "description": "Inscription p\u00f4le emploi 6 \u00e0 0 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP65M": {"name": "INP65M", "description": "Inscription p\u00f4le emploi 6 \u00e0 5 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP5M": {"name": "INP5M", "description": "Inscription p\u00f4le emploi 5 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INP75M": {"name": "INP75M", "description": "Inscription p\u00f4le emploi 7 \u00e0 5 mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPAM": {"name": "INPAM", "description": "Inscription p\u00f4le emploi Ann\u00e9e Mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPER": {"name": "INPER", "description": "Inscription p\u00f4le emploi Erreur", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPER1": {"name": "INPER1", "description": "Inscription p\u00f4le emploi Erreur 1", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPER2": {"name": "INPER2", "description": "Inscription p\u00f4le emploi Erreur 2", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPOM": {"name": "INPOM", "description": "Inscription p\u00f4le emploi Outre-Mer", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "INPSM": {"name": "INPSM", "description": "Inscription p\u00f4le emploi Sans Mois", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "IPONDL": {"name": "IPONDL", "description": "Pond\u00e9ration", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "IRANM": {"name": "IRANM", "description": "Iranien", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "METRODOM": {"name": "METRODOM", "description": "M\u00e9tropole/DOM", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "NBPI": {"name": "NBPI", "description": "Nombre de pi\u00e8ces", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "RECHM": {"name": "RECHM", "description": "Recherche d'emploi", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "REGION": {"name": "REGION", "description": "R\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "SANI": {"name": "SANI", "description": "Sanitaire", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "SANIDOM": {"name": "SANIDOM", "description": "Sanitaire DOM", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "SEXEM": {"name": "SEXEM", "description": "Sexe", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "STAT_CONJM": {"name": "STAT_CONJM", "description": "Statut conjugal", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "STOCD": {"name": "STOCD", "description": "Stockage", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "SURF": {"name": "SURF", "description": "Surface", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TACTM": {"name": "TACTM", "description": "Activit\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TPM": {"name": "TPM", "description": "Temps partiel", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TRANSM": {"name": "TRANSM", "description": "Transport", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TRIRIS": {"name": "TRIRIS", "description": "Tri IRIS", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TYPC": {"name": "TYPC", "description": "Type de chauffage central", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "TYPL": {"name": "TYPL", "description": "Type de logement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"logement_2020\"", "created_at": 1720079267.912816}, "source.makeopendata.sources.professionels_sante": {"database": "defaultdb", "schema": "sources", "name": "professionels_sante", "resource_type": "source", "package_name": "makeopendata", "path": "models/sources/schema.yml", "original_file_path": "models/sources/schema.yml", "unique_id": "source.makeopendata.sources.professionels_sante", "fqn": ["makeopendata", "sources", "sources", "professionels_sante"], "source_name": "sources", "source_description": "Source tables for various datasets", "loader": "", "identifier": "professionels_sante", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Ce jeu de donn\u00e9es fournit des informations sur les effectifs des professionnels de sant\u00e9 lib\u00e9raux par d\u00e9partement/r\u00e9gion, \u00e2ge, sexe et sp\u00e9cialit\u00e9. Origine: https://www.data.gouv.fr/fr/datasets/professionnels-de-sante-liberaux-effectif-et-densite-par-tranche-dage-sexe-et-territoire-departement-region/#/resources", "columns": {"annee": {"name": "annee", "description": "Ann\u00e9e", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "profession_sante": {"name": "profession_sante", "description": "32 professions de sant\u00e9", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Code r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_region": {"name": "libelle_region", "description": "Libell\u00e9 de la r\u00e9gion", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "departement": {"name": "departement", "description": "Code d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_departement": {"name": "libelle_departement", "description": "Libell\u00e9 d\u00e9partement", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "classe_age": {"name": "classe_age", "description": "Code classe d'\u00e2ge", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_classe_age": {"name": "libelle_classe_age", "description": "Libell\u00e9 classe d'\u00e2ge", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "libelle_sexe": {"name": "libelle_sexe", "description": "Sexe des professionnels", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "effectif": {"name": "effectif", "description": "Nombre de professionnels", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "densite": {"name": "densite", "description": "?", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "vision_generale_all": {"name": "vision_generale_all", "description": "?", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "vision_generale_prescriptions": {"name": "vision_generale_prescriptions", "description": "?", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}, "vision_profession_territoire": {"name": "vision_profession_territoire", "description": "?", "meta": {}, "data_type": "text", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"defaultdb\".\"sources\".\"professionels_sante\"", "created_at": 1720079267.9129794}}, "macros": {"macro.makeopendata.calculate_geo_knn": {"name": "calculate_geo_knn", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/immo/geo_knn.sql", "original_file_path": "macros/immo/geo_knn.sql", "unique_id": "macro.makeopendata.calculate_geo_knn", "macro_sql": "{% macro calculate_geo_knn(source_table, id_column, lat_column, lon_column, value_column, k) %}\nWITH knn AS (\n    SELECT \n        a.{{ id_column }} AS id,\n        AVG(b.{{ value_column }}) AS mean_knn_value\n    FROM \n        {{ ref(source_table) }} a\n        JOIN LATERAL (\n            SELECT {{ value_column }}\n            FROM {{ ref(source_table) }}\n            WHERE {{ id_column }} != a.{{ id_column }}\n            ORDER BY ST_SetSRID(ST_MakePoint(a.{{ lon_column }}, a.{{ lat_column }}), 4326) <-> ST_SetSRID(ST_MakePoint({{ lon_column }}, {{ lat_column }}), 4326)\n            LIMIT {{ k }}\n        ) b ON TRUE\n    GROUP BY a.{{ id_column }}\n)\n\nSELECT \n    a.*,\n    b.mean_knn_value\nFROM \n    {{ ref(source_table) }} a\n    JOIN knn b ON a.{{ id_column }} = b.id\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0078485, "supported_languages": null}, "macro.makeopendata.filtrer_dvf": {"name": "filtrer_dvf", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/immo/filtrer_dvf.sql", "original_file_path": "macros/immo/filtrer_dvf.sql", "unique_id": "macro.makeopendata.filtrer_dvf", "macro_sql": "{% macro filtrer_dvf(source_dvf) %}\n    SELECT \n        id_mutation,\n        CAST(valeur_fonciere AS FLOAT) as valeur_fonciere,\n        CAST(longitude AS FLOAT) as longitude,\n        CAST(latitude AS FLOAT) as latitude,\n        CAST(nombre_pieces_principales AS NUMERIC) as nombre_pieces_principales,\n        CAST(surface_reelle_bati AS NUMERIC) as surface_reelle_bati,\n        type_local,\n        LPAD(CAST(code_postal AS TEXT), 5, '0') as code_postal,\n        code_commune\n    FROM \n        source_dvf \n     WHERE \n        EXISTS (\n            SELECT 1\n            FROM source_dvf d1\n            WHERE d1.id_mutation = source_dvf.id_mutation AND d1.type_local IN ('Appartement', 'Maison')\n        ) AND\n        NOT EXISTS (\n            SELECT 1\n            FROM source_dvf d2\n            WHERE d2.id_mutation = source_dvf.id_mutation AND d2.nature_mutation != 'Vente'\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.008236, "supported_languages": null}, "macro.makeopendata.aggreger_dvf": {"name": "aggreger_dvf", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/immo/aggreger_dvf.sql", "original_file_path": "macros/immo/aggreger_dvf.sql", "unique_id": "macro.makeopendata.aggreger_dvf", "macro_sql": "{% macro aggreger_dvf(filtrer_dvf) %}\n    SELECT \n        id_mutation,\n        SUM(CAST(surface_reelle_bati AS numeric)) AS total_surface,\n        SUM(CAST(nombre_pieces_principales AS numeric)) AS total_pieces\n    FROM \n        filtrer_dvf\n    GROUP BY \n        id_mutation\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.008482, "supported_languages": null}, "macro.makeopendata.selectionner_bien_principal_dvf": {"name": "selectionner_bien_principal_dvf", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/immo/selectionner_bien_principal_dvf.sql", "original_file_path": "macros/immo/selectionner_bien_principal_dvf.sql", "unique_id": "macro.makeopendata.selectionner_bien_principal_dvf", "macro_sql": "{% macro selectionner_bien_principal_dvf(filtrer_dvf) %}\n    SELECT *\n    FROM (\n        SELECT \n            *,\n            ROW_NUMBER() OVER (\n                PARTITION BY id_mutation\n                ORDER BY \n                    CASE WHEN type_local = 'Maison' THEN 1\n                         WHEN type_local = 'Appartement' THEN 2\n                         ELSE 3\n                    END,\n                    surface_reelle_bati DESC\n            ) AS rang\n        FROM \n            filtrer_dvf\n    ) subquery\n    WHERE\n        rang = 1\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0087938, "supported_languages": null}, "macro.makeopendata.aggreger_logement_par_colonne": {"name": "aggreger_logement_par_colonne", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/aggreger_logement_par_colonne.sql", "original_file_path": "macros/population/aggreger_logement_par_colonne.sql", "unique_id": "macro.makeopendata.aggreger_logement_par_colonne", "macro_sql": "{% macro aggreger_logement_par_colonne(variante_logement, colonnes_a_aggreger_list, colonne_a_aggreger) %}    \n\n\nwith unpivoted as (\n    {{ unpivot_logement(variante_logement, colonnes_a_aggreger_list, colonne_a_aggreger) }}\n), \nconcatenated as (\n    {{ concatener_logement(unpivoted) }}\n),\ndeduplicated as (\n    {{ dedupliquer_logement(concatenated) }}\n),\npivoted as (\n    {{ pivoter_logement(variante_logement, deduplicated, colonne_a_aggreger) }}\n)\n\nselect * from pivoted\n{% endmacro %}", "depends_on": {"macros": ["macro.makeopendata.unpivot_logement", "macro.makeopendata.concatener_logement", "macro.makeopendata.dedupliquer_logement", "macro.makeopendata.pivoter_logement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0095308, "supported_languages": null}, "macro.makeopendata.renommer_colonnes_valeurs_logement": {"name": "renommer_colonnes_valeurs_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/renommer_colonnes_valeurs_logement.sql", "original_file_path": "macros/population/renommer_colonnes_valeurs_logement.sql", "unique_id": "macro.makeopendata.renommer_colonnes_valeurs_logement", "macro_sql": "{% macro renommer_colonnes_valeurs_logement(logement, codes_variante_logement) %}\n  \n  {% set seed_query %}\n    SELECT DISTINCT \n      code_col, \n      lib_col, \n      code_ou_libelle_valeurs\n    FROM {{ ref(codes_variante_logement) }} as logement_2020_codes\n  {% endset %}\n\n  {% set seed_results = run_query(seed_query) %}\n\n  {% set metadata_query %}\n    SELECT DISTINCT \n      \"COD_VAR\", \n      \"LIB_VAR\", \n      \"COD_MOD\", \n      {{ nettoyer_modalite_logement('\"LIB_MOD\"') }} AS \"LIB_MOD\"\n      FROM {{ source(\"meta\", \"logement_2020_variables\" ) }}\n  {% endset %}\n\n  {% set metadata_results = run_query(metadata_query) %}\n\n  SELECT\n    {% for row in seed_results %}\n      \n      {% set code_col = row['code_col'] %}\n      {% set lib_col = row['lib_col'] %}\n      {% set code_ou_libelle_valeurs = row['code_ou_libelle_valeurs'] %}\n            \n      {% if code_ou_libelle_valeurs == 'CODE' %}\n        \"{{ code_col }}\" as \"{{ lib_col }}\"\n      \n      {% else %}\n        CASE \"{{ code_col }}\"\n          {% for meta_row in metadata_results | selectattr(\"COD_VAR\", \"equalto\", code_col) %}\n            WHEN '{{ meta_row['COD_MOD'] }}' THEN '{{ meta_row['LIB_MOD'] }}'\n          {% endfor %}\n        END as \"{{ lib_col }}\"\n      \n      {% endif %}\n      \n      {% if not loop.last %}, {% endif %}\n    {% endfor %}\n  FROM logement\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.makeopendata.nettoyer_modalite_logement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.012338, "supported_languages": null}, "macro.makeopendata.lister_colonnes_a_aggreger": {"name": "lister_colonnes_a_aggreger", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/lister_colonnes_a_aggreger.sql", "original_file_path": "macros/population/lister_colonnes_a_aggreger.sql", "unique_id": "macro.makeopendata.lister_colonnes_a_aggreger", "macro_sql": "{% macro lister_colonnes_a_aggreger(variante_logement) %}    \n\n\n{% set colonnes_logement_query %}\n\n  SELECT DISTINCT \n  lib_col\n  FROM {{ ref(variante_logement) }}\n{% endset %}\n{% set colonnes_logement_resultat = run_query(colonnes_logement_query) %}\n\n{% set colonnes_cles = ['code_commune_insee', 'poids_du_logement', 'region_residence'] %}\n{% if execute %}\n  {% set colonnes_a_aggreger_list = [] %}\n  {% for row in colonnes_logement_resultat %}\n    {% if row[0] not in colonnes_cles %}\n      {% do colonnes_a_aggreger_list.append(row[0]) %}\n    {% endif %}\n  {% endfor %}\n  \n  {{ return(colonnes_a_aggreger_list) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0137582, "supported_languages": null}, "macro.makeopendata.concatener_logement": {"name": "concatener_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/concatener_logement.sql", "original_file_path": "macros/population/concatener_logement.sql", "unique_id": "macro.makeopendata.concatener_logement", "macro_sql": "{% macro concatener_logement(unpivoted) %}    \n    SELECT\n        code_commune_insee,\n        poids_du_logement,\n        champs,\n        valeur,\n        champs || '__' || valeur AS champs__valeur\n    FROM\n        unpivoted\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0140004, "supported_languages": null}, "macro.makeopendata.lister_colonne_a_aggrger_valeurs": {"name": "lister_colonne_a_aggrger_valeurs", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/lister_colonne_a_aggrger_valeurs.sql", "original_file_path": "macros/population/lister_colonne_a_aggrger_valeurs.sql", "unique_id": "macro.makeopendata.lister_colonne_a_aggrger_valeurs", "macro_sql": "{% macro lister_colonne_a_aggrger_valeurs(variante_logement, colonne_a_aggreger) %}    \n\n\n      {% set colonne_a_aggreger_values_query %}\n        SELECT DISTINCT \n        {{ colonne_a_aggreger }}\n        FROM {{ ref(variante_logement) }}\n      {% endset %}\n\n      {% set colonne_a_aggreger_values = run_query(colonne_a_aggreger_values_query) %}\n\n      {% set colonne_a_aggreger_values_list = [] %}\n      {% for row in colonne_a_aggreger_values %}\n          {% do colonne_a_aggreger_values_list.append(colonne_a_aggreger +\"__\"+ row[0]) %}\n      {% endfor %}\n\n      {{ return(colonne_a_aggreger_values_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0151281, "supported_languages": null}, "macro.makeopendata.nettoyer_modalite_logement": {"name": "nettoyer_modalite_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/nettoyer_modalite_logement.sql", "original_file_path": "macros/population/nettoyer_modalite_logement.sql", "unique_id": "macro.makeopendata.nettoyer_modalite_logement", "macro_sql": "{% macro nettoyer_modalite_logement(nom_colonne) %}\n  CASE \n    WHEN right(lower(regexp_replace(\n        regexp_replace(\n          regexp_replace(\n            regexp_replace(\n              regexp_replace(\n                regexp_replace(\n                  regexp_replace(\n                    regexp_replace(\n                      regexp_replace(\n                        regexp_replace(\n                          unaccent({{ nom_colonne }}), \n                          'm\u00b2', '', 'g'\n                        ), \n                        '[ ''(),\\-:]+', '_', 'g'\n                      ),\n                      'de_', '', 'g'\n                    ),\n                    'la_', '', 'g'\n                  ),\n                  'du_', '', 'g'\n                ),\n                'd_un_', '', 'g'\n              ),\n              'dans_', '', 'g'\n            ),\n            'un_', '', 'g'\n          ),\n          'une_', '', 'g'\n        ),\n        'd_une_', '', 'g'\n      )), 1) = '_' THEN\n      left(lower(regexp_replace(\n        regexp_replace(\n          regexp_replace(\n            regexp_replace(\n              regexp_replace(\n                regexp_replace(\n                  regexp_replace(\n                    regexp_replace(\n                      regexp_replace(\n                        regexp_replace(\n                          unaccent({{ nom_colonne }}), \n                          'm\u00b2', '', 'g'\n                        ), \n                        '[ ''(),\\-:]+', '_', 'g'\n                      ),\n                      'de_', '', 'g'\n                    ),\n                    'la_', '', 'g'\n                  ),\n                  'du_', '', 'g'\n                ),\n                'd_un_', '', 'g'\n              ),\n              'dans_', '', 'g'\n            ),\n            'un_', '', 'g'\n          ),\n          'une_', '', 'g'\n        ),\n        'd_une_', '', 'g'\n      )), -1)\n    ELSE\n      lower(regexp_replace(\n        regexp_replace(\n          regexp_replace(\n            regexp_replace(\n              regexp_replace(\n                regexp_replace(\n                  regexp_replace(\n                    regexp_replace(\n                      regexp_replace(\n                        regexp_replace(\n                          unaccent({{ nom_colonne }}), \n                          'm\u00b2', '', 'g'\n                        ), \n                        '[ ''(),\\-:]+', '_', 'g'\n                      ),\n                      'de_', '', 'g'\n                    ),\n                    'la_', '', 'g'\n                  ),\n                  'du_', '', 'g'\n                ),\n                'd_un_', '', 'g'\n              ),\n              'dans_', '', 'g'\n            ),\n            'un_', '', 'g'\n          ),\n          'une_', '', 'g'\n        ),\n        'd_une_', '', 'g'\n      ))\n  END\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0164356, "supported_languages": null}, "macro.makeopendata.unpivot_logement": {"name": "unpivot_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/unpivot_logement.sql", "original_file_path": "macros/population/unpivot_logement.sql", "unique_id": "macro.makeopendata.unpivot_logement", "macro_sql": "{% macro unpivot_logement(variante_logement, colonnes_a_aggreger_list, colonne_a_aggreger) %}  \n\n-- Prends toutes les colonnes sauf la colonne \u00e0 consid\u00e9rer, pour donne en param\u00e8tre \u00e0 unpivot\n  {% set colonnes_a_ignorer = ['region_residence'] %}\n  {% for row in colonnes_a_aggreger_list %}\n    {% if row != colonne_a_aggreger %}\n      {% do colonnes_a_ignorer.append(row) %}\n    {% endif %}\n  {% endfor %}\n\n    {{ dbt_utils.unpivot(\n        relation=ref(variante_logement),\n        exclude=['code_commune_insee', 'poids_du_logement'],\n        remove=colonnes_a_ignorer,\n        field_name='champs',\n        value_name='valeur'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0175204, "supported_languages": null}, "macro.makeopendata.dedupliquer_logement": {"name": "dedupliquer_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/dedupliquer_logement.sql", "original_file_path": "macros/population/dedupliquer_logement.sql", "unique_id": "macro.makeopendata.dedupliquer_logement", "macro_sql": "{% macro dedupliquer_logement(concatenated) %}    \n    SELECT\n        code_commune_insee,\n        champs,\n        champs__valeur,\n        SUM(CAST(poids_du_logement as NUMERIC)) as population_par_commune_champs_valeur\n    FROM\n        concatenated\n    GROUP BY\n        code_commune_insee,\n        champs__valeur,\n        champs\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0177565, "supported_languages": null}, "macro.makeopendata.pivoter_logement": {"name": "pivoter_logement", "resource_type": "macro", "package_name": "makeopendata", "path": "macros/population/pivoter_logement.sql", "original_file_path": "macros/population/pivoter_logement.sql", "unique_id": "macro.makeopendata.pivoter_logement", "macro_sql": "{% macro pivoter_logement(variante_logement, deduplicated, colonne_a_aggreger) %}    \n\n\n\n{% set colonne_a_aggreger_values_list = lister_colonne_a_aggrger_valeurs(variante_logement, colonne_a_aggreger) %}\n\n    select \n\n    code_commune_insee,\n    {{ dbt_utils.pivot(\n        'champs__valeur',\n        colonne_a_aggreger_values_list,\n        agg='sum',\n        then_value='population_par_commune_champs_valeur',\n    ) }}\n    from \n        deduplicated\n    group by\n        code_commune_insee\n\n{% endmacro %}", "depends_on": {"macros": ["macro.makeopendata.lister_colonne_a_aggrger_valeurs", "macro.dbt_utils.pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0183918, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0188239, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.019121, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0192974, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0194833, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0196626, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0206132, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.020833, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.032466, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0332706, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0337658, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0342674, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0350199, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0356765, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0359483, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.036491, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0373569, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0386698, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0389755, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0394714, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0398898, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0405629, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0409102, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0418367, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0421598, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0423648, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0426402, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.042866, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0449626, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0455143, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0457442, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0468633, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0471714, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0473988, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0486743, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }};\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.049466, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.049932, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0501552, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0507345, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0512083, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0514858, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0517023, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0525525, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0528276, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0534031, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0546045, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.05551, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0558388, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0602238, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0609975, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.061231, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.061853, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0623715, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.062702, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.063177, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0635085, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0640254, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0644372, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0654144, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.065992, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.066282, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.066621, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.066932, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0680254, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0698674, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0705853, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0712821, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0718439, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0722349, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.073216, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0738897, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.074366, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0748289, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.076261, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0764556, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0773056, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0775657, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0777807, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0797758, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.080369, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0809054, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0813112, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0814807, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0818882, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0821216, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0833936, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.083688, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0843563, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0854213, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0861335, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0864456, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0867276, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0871432, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0873842, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.087797, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.087968, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0888662, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0891743, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0897427, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0899765, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.090476, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0906925, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0911052, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.091339, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0917556, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0919826, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0924, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.092633, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0930278, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0931978, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0944471, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0946825, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0964775, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0967886, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0971591, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0978038, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.098062, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0983648, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0990367, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0994556, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.0996897, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1018791, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1029243, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.10339, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.105958, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1078305, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.109025, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1093936, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1099582, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.110256, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1105425, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.110839, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1135883, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1138506, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1141884, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.11467, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1150475, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1155486, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1158333, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1160934, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1164706, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1173117, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.117667, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.11789, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1186686, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.118914, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.119143, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1193144, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1195736, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1197088, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1200986, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1203692, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.122803, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1229923, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.123255, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1234355, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.123986, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1242752, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1244416, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1248014, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1251082, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.125463, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1257615, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1261165, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1271725, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1274688, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1278608, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.128217, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.129994, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1308205, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1311233, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.131343, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.132305, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1325786, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1328971, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1331723, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1336029, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1345298, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.134985, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1353483, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1384919, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1387622, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1392624, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.139605, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1399307, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1402142, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1419983, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1425629, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1428528, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1433902, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1437404, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.144668, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1450593, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1462848, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.146938, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1475697, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.151468, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1518745, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1521823, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1526017, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1529021, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.153159, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1534393, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1539543, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1542685, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1547844, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1550756, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1553304, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1555874, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1558292, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.156148, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.156418, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1576083, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1578295, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.158076, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1587174, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1589992, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1592143, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1594563, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.159661, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.160523, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1609764, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1613476, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.161849, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.163453, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1637566, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1639862, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1642191, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1644506, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1650047, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1654856, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.166148, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.172562, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.173946, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1743217, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1750755, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1753812, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1755948, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1758142, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.176019, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.176281, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1764696, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1771975, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.177481, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1793594, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.184059, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1879725, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.188624, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.189093, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1896446, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1902514, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.1944382, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2011435, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.20174, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2021275, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.204303, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2046783, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2057016, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2099016, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.210288, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2105079, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.210959, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2111726, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.216321, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2175927, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2179565, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2182534, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2187185, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2190063, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2194507, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2197392, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2201347, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2204258, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2206626, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2211006, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2295136, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2330747, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2334974, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2351394, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2355614, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2365797, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2440472, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2459455, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2478664, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2491863, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.251525, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2524333, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2534568, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.253819, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2550044, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2559867, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2635221, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2685282, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2688026, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.269165, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2702978, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2705956, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2708728, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2730887, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.275111, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2802906, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2807565, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2810228, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2811704, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.281398, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2815852, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2819014, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2832656, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2835627, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2839544, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2846107, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2852566, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.285682, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2942615, "supported_languages": ["sql"]}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2950726, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2955008, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.295956, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2965422, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2969458, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.2975428, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.298134, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.300377, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3006241, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3018715, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.302529, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3034236, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3041413, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3042617, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3047116, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3049297, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3053138, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3054812, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3066897, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3073657, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3076603, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3084764, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3089192, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3091457, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3100362, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.310847, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3114188, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3118129, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3123364, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3126054, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3130505, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3132691, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3137705, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3140318, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.314477, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3146932, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3157084, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3166232, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3169763, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.317539, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.31796, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3181703, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.318701, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3191032, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.319333, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3197024, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3198726, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3212056, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3214521, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3217113, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.32196, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3223794, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3226345, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3228867, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.323159, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3234112, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3236473, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3238955, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3241243, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3243718, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3245978, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3250947, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3253558, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3257525, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.326007, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3264158, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.326587, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3269598, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.32722, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3275597, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3276842, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.328396, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3286545, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3289986, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3293977, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.329618, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3300283, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3302484, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.330663, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3309734, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3313162, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3314414, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3318033, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3320017, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3327532, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.33312, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3335578, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.33398, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3345497, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3354151, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.335913, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3364167, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3371048, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3381064, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3390937, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3397794, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.340173, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3404486, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3408473, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3411112, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3415322, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3418424, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3431323, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3435683, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.343959, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3455267, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3481224, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3486588, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3492055, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3496807, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3502157, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3512378, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3525512, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.353752, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3544292, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.354731, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3555467, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3562918, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.356515, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3567343, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3569512, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3587098, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.360912, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3615148, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3618913, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.363439, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3638818, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.364756, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3661811, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3704553, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.371036, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.37208, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3732038, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3740005, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3750422, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.375974, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3763442, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.376907, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3776085, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3787785, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.379473, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3804736, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3817306, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3820806, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3823698, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3826756, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3829448, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.38321, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3834815, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3840683, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3849318, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3860047, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3867517, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3870559, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3912284, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3967798, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3975704, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3988154, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3992867, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.3995073, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4013557, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4038525, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4044714, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.404915, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4058871, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4072561, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4078386, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4087007, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.410169, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4115195, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4121063, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4130344, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4137619, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.414238, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.414918, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.415643, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4164214, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.416962, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4179935, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4194763, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4204237, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4209585, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4218938, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4231646, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4240463, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4247794, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4253848, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4259543, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4267566, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4273612, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4286132, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4300408, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4344177, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.436881, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4377975, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.438841, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.440293, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.441865, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.442808, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4440477, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4466908, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.4530551, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.454276, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720079266.455993, "supported_languages": null}}, "docs": {"doc.makeopendata.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "makeopendata", "path": "__overview__.md", "original_file_path": "models/__overview__.md", "unique_id": "doc.makeopendata.__overview__", "block_contents": "# Bienvenue sur le catalogue de donn\u00e9es publiques pr\u00e9par\u00e9es par Make Open Data\n---\n\nSite du projet https://make-open-data.fr/ pour plus de contexte sur la solution et les donn\u00e9es anisi que les \u00e9tapes de d\u00e9ploiement.\n\nSite du repo github https://github.com/make-open-data/make-open-data/ pour plus de d\u00e9tails et surtout pour nous soutenir avec une petite \u00e9toile.\n\n\nVous trouverez ici le catalogue des donn\u00e9es.\n\n- Donn\u00e9es sources et trait\u00e9es (interm\u00e9diaires, g\u00e9n\u00e9ralement des vues) et aggr\u00e9g\u00e9es (\u00e0 l'echelle de la commune ou du d\u00e9partement) ;\n- R\u00e8gles de transformations ;\n- Descriptif et types des colonnes ;\n- Tests r\u00e9alis\u00e9es pour chaque tables.\n\n\nCe documentation est la seule source de v\u00e9rit\u00e9 concernant les donn\u00e9es produite. Plus pr\u00e9cisement, il s'agit d'une documentation g\u00e9n\u00e9r\u00e9e avec Github Actions \u00e0 chaque push dans *main*."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.makeopendata.fake_knn_data": [], "model.makeopendata.decoder_demographie": ["seed.makeopendata.logement_2020_demographie_codes", "source.makeopendata.meta.logement_2020_variables", "source.makeopendata.sources.logement_2020"], "model.makeopendata.aggreger_demographie_communes": ["model.makeopendata.decoder_demographie", "seed.makeopendata.logement_2020_demographie_codes"], "model.makeopendata.grouper_mutations": ["source.makeopendata.sources.dvf_2023"], "model.makeopendata.geo_postaux": ["source.makeopendata.sources.cog_departements", "source.makeopendata.sources.cog_poste", "source.makeopendata.sources.cog_regions"], "model.makeopendata.geo_postaux_communes": ["source.makeopendata.sources.cog_poste"], "model.makeopendata.geo_communes": ["source.makeopendata.sources.cog_arrondissements", "source.makeopendata.sources.cog_communes", "source.makeopendata.sources.cog_departements", "source.makeopendata.sources.cog_poste", "source.makeopendata.sources.cog_regions"], "model.makeopendata.aggeger_effectifs_sante_departement_2022": ["model.makeopendata.geo_communes", "source.makeopendata.sources.professionels_sante"], "model.makeopendata.decoder_habitat": ["seed.makeopendata.logement_2020_habitat_codes", "source.makeopendata.meta.logement_2020_variables", "source.makeopendata.sources.logement_2020"], "model.makeopendata.aggreger_habitat_communes": ["model.makeopendata.decoder_habitat", "seed.makeopendata.logement_2020_habitat_codes"], "analysis.makeopendata.multiple_com_per_cp": ["source.makeopendata.sources.cog_poste"], "analysis.makeopendata.multiple_cp_per_com": ["source.makeopendata.sources.cog_poste"], "analysis.makeopendata.multiple_agg_per_cp": ["source.makeopendata.sources.cog_communes", "source.makeopendata.sources.cog_poste"], "analysis.makeopendata.sanity_check_habitat": ["model.makeopendata.aggreger_habitat_communes"], "analysis.makeopendata.sanity_check_demographie": ["model.makeopendata.aggreger_demographie_communes"], "test.makeopendata.test_knn": ["model.makeopendata.fake_knn_data"], "test.makeopendata.assert_one_price_mutation": ["source.makeopendata.sources.dvf_2023"], "test.makeopendata.assert_geo_communes_number": ["model.makeopendata.geo_communes"], "test.makeopendata.assert_geo_postaux_distinct": ["model.makeopendata.geo_postaux"], "test.makeopendata.asset_geo_communes_distinct": ["model.makeopendata.geo_communes"], "test.makeopendata.assert_one_reg": ["source.makeopendata.sources.cog_regions"], "test.makeopendata.assert_one_gps_com": ["source.makeopendata.sources.cog_poste"], "test.makeopendata.assert_one_dep": ["source.makeopendata.sources.cog_departements"], "test.makeopendata.assert_one_arr": ["source.makeopendata.sources.cog_arrondissements"], "test.makeopendata.assert_one_com": ["source.makeopendata.sources.cog_communes"], "test.makeopendata.effectif_tout_departement_egal_some_region": ["source.makeopendata.sources.professionels_sante"], "seed.makeopendata.logement_2020_demographie_codes": [], "seed.makeopendata.logement_2020_habitat_codes": [], "test.makeopendata.unique_aggreger_demographie_communes_code_commune_insee.e9ea688474": ["model.makeopendata.aggreger_demographie_communes"], "test.makeopendata.not_null_aggreger_demographie_communes_code_commune_insee.93bafe8c43": ["model.makeopendata.aggreger_demographie_communes"], "test.makeopendata.unique_grouper_mutations_id_mutation.167a98860e": ["model.makeopendata.grouper_mutations"], "test.makeopendata.not_null_grouper_mutations_id_mutation.0834c40ce5": ["model.makeopendata.grouper_mutations"], "test.makeopendata.unique_geo_communes_code_commune.b822eae2cf": ["model.makeopendata.geo_communes"], "test.makeopendata.not_null_geo_communes_code_commune.12ca32dbb5": ["model.makeopendata.geo_communes"], "test.makeopendata.unique_geo_postaux_code_postal.11a7ce8c7a": ["model.makeopendata.geo_postaux"], "test.makeopendata.not_null_geo_postaux_code_postal.f3f26546c2": ["model.makeopendata.geo_postaux"], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_region.426bcb46c6": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_region.ad2b5d1f84": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_departement.f929a79113": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_departement.cc58d5e085": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_libelle_departement.79882a7e79": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_departement.baae3ab3e8": ["model.makeopendata.aggeger_effectifs_sante_departement_2022"], "test.makeopendata.unique_aggreger_habitat_communes_code_commune_insee.4e49975331": ["model.makeopendata.aggreger_habitat_communes"], "test.makeopendata.not_null_aggreger_habitat_communes_code_commune_insee.cb97ce64fb": ["model.makeopendata.aggreger_habitat_communes"], "source.makeopendata.meta.logement_2020_variables": [], "source.makeopendata.sources.cog_poste": [], "source.makeopendata.sources.cog_communes": [], "source.makeopendata.sources.cog_arrondissements": [], "source.makeopendata.sources.cog_departements": [], "source.makeopendata.sources.cog_regions": [], "source.makeopendata.sources.dvf_2023": [], "source.makeopendata.sources.logement_2020": [], "source.makeopendata.sources.professionels_sante": []}, "child_map": {"model.makeopendata.fake_knn_data": ["test.makeopendata.test_knn"], "model.makeopendata.decoder_demographie": ["model.makeopendata.aggreger_demographie_communes"], "model.makeopendata.aggreger_demographie_communes": ["analysis.makeopendata.sanity_check_demographie", "test.makeopendata.not_null_aggreger_demographie_communes_code_commune_insee.93bafe8c43", "test.makeopendata.unique_aggreger_demographie_communes_code_commune_insee.e9ea688474"], "model.makeopendata.grouper_mutations": ["test.makeopendata.not_null_grouper_mutations_id_mutation.0834c40ce5", "test.makeopendata.unique_grouper_mutations_id_mutation.167a98860e"], "model.makeopendata.geo_postaux": ["test.makeopendata.assert_geo_postaux_distinct", "test.makeopendata.not_null_geo_postaux_code_postal.f3f26546c2", "test.makeopendata.unique_geo_postaux_code_postal.11a7ce8c7a"], "model.makeopendata.geo_postaux_communes": [], "model.makeopendata.geo_communes": ["model.makeopendata.aggeger_effectifs_sante_departement_2022", "test.makeopendata.assert_geo_communes_number", "test.makeopendata.asset_geo_communes_distinct", "test.makeopendata.not_null_geo_communes_code_commune.12ca32dbb5", "test.makeopendata.unique_geo_communes_code_commune.b822eae2cf"], "model.makeopendata.aggeger_effectifs_sante_departement_2022": ["test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_departement.cc58d5e085", "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_departement.baae3ab3e8", "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_region.ad2b5d1f84", "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_region.426bcb46c6", "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_departement.f929a79113", "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_libelle_departement.79882a7e79"], "model.makeopendata.decoder_habitat": ["model.makeopendata.aggreger_habitat_communes"], "model.makeopendata.aggreger_habitat_communes": ["analysis.makeopendata.sanity_check_habitat", "test.makeopendata.not_null_aggreger_habitat_communes_code_commune_insee.cb97ce64fb", "test.makeopendata.unique_aggreger_habitat_communes_code_commune_insee.4e49975331"], "analysis.makeopendata.multiple_com_per_cp": [], "analysis.makeopendata.multiple_cp_per_com": [], "analysis.makeopendata.multiple_agg_per_cp": [], "analysis.makeopendata.sanity_check_habitat": [], "analysis.makeopendata.sanity_check_demographie": [], "test.makeopendata.test_knn": [], "test.makeopendata.assert_one_price_mutation": [], "test.makeopendata.assert_geo_communes_number": [], "test.makeopendata.assert_geo_postaux_distinct": [], "test.makeopendata.asset_geo_communes_distinct": [], "test.makeopendata.assert_one_reg": [], "test.makeopendata.assert_one_gps_com": [], "test.makeopendata.assert_one_dep": [], "test.makeopendata.assert_one_arr": [], "test.makeopendata.assert_one_com": [], "test.makeopendata.effectif_tout_departement_egal_some_region": [], "seed.makeopendata.logement_2020_demographie_codes": ["model.makeopendata.aggreger_demographie_communes", "model.makeopendata.decoder_demographie"], "seed.makeopendata.logement_2020_habitat_codes": ["model.makeopendata.aggreger_habitat_communes", "model.makeopendata.decoder_habitat"], "test.makeopendata.unique_aggreger_demographie_communes_code_commune_insee.e9ea688474": [], "test.makeopendata.not_null_aggreger_demographie_communes_code_commune_insee.93bafe8c43": [], "test.makeopendata.unique_grouper_mutations_id_mutation.167a98860e": [], "test.makeopendata.not_null_grouper_mutations_id_mutation.0834c40ce5": [], "test.makeopendata.unique_geo_communes_code_commune.b822eae2cf": [], "test.makeopendata.not_null_geo_communes_code_commune.12ca32dbb5": [], "test.makeopendata.unique_geo_postaux_code_postal.11a7ce8c7a": [], "test.makeopendata.not_null_geo_postaux_code_postal.f3f26546c2": [], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_region.426bcb46c6": [], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_region.ad2b5d1f84": [], "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_departement.f929a79113": [], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_departement.cc58d5e085": [], "test.makeopendata.unique_aggeger_effectifs_sante_departement_2022_libelle_departement.79882a7e79": [], "test.makeopendata.not_null_aggeger_effectifs_sante_departement_2022_libelle_departement.baae3ab3e8": [], "test.makeopendata.unique_aggreger_habitat_communes_code_commune_insee.4e49975331": [], "test.makeopendata.not_null_aggreger_habitat_communes_code_commune_insee.cb97ce64fb": [], "source.makeopendata.meta.logement_2020_variables": ["model.makeopendata.decoder_demographie", "model.makeopendata.decoder_habitat"], "source.makeopendata.sources.cog_poste": ["analysis.makeopendata.multiple_agg_per_cp", "analysis.makeopendata.multiple_com_per_cp", "analysis.makeopendata.multiple_cp_per_com", "model.makeopendata.geo_communes", "model.makeopendata.geo_postaux", "model.makeopendata.geo_postaux_communes", "test.makeopendata.assert_one_gps_com"], "source.makeopendata.sources.cog_communes": ["analysis.makeopendata.multiple_agg_per_cp", "model.makeopendata.geo_communes", "test.makeopendata.assert_one_com"], "source.makeopendata.sources.cog_arrondissements": ["model.makeopendata.geo_communes", "test.makeopendata.assert_one_arr"], "source.makeopendata.sources.cog_departements": ["model.makeopendata.geo_communes", "model.makeopendata.geo_postaux", "test.makeopendata.assert_one_dep"], "source.makeopendata.sources.cog_regions": ["model.makeopendata.geo_communes", "model.makeopendata.geo_postaux", "test.makeopendata.assert_one_reg"], "source.makeopendata.sources.dvf_2023": ["model.makeopendata.grouper_mutations", "test.makeopendata.assert_one_price_mutation"], "source.makeopendata.sources.logement_2020": ["model.makeopendata.decoder_demographie", "model.makeopendata.decoder_habitat"], "source.makeopendata.sources.professionels_sante": ["model.makeopendata.aggeger_effectifs_sante_departement_2022", "test.makeopendata.effectif_tout_departement_egal_some_region"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}